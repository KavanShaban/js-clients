var kh = Object.defineProperty;
var Nh = (e, t, i) => (t in e ? kh(e, t, { enumerable: !0, configurable: !0, writable: !0, value: i }) : (e[t] = i));
var Vo = (e, t, i) => (Nh(e, typeof t != "symbol" ? t + "" : t, i), i);
import { _ as np } from "./iframe-5aa777a6.js";
import { g as Lu, r as b, R as c } from "./index-c6dae603.js";
import { r as Ah } from "./index-eb008d06.js";
let Ja;
(function (e) {
  (e[(e.Backspace = 8)] = "Backspace"),
    (e[(e.Tab = 9)] = "Tab"),
    (e[(e.Enter = 13)] = "Enter"),
    (e[(e.Shift = 16)] = "Shift"),
    (e[(e.Ctrl = 17)] = "Ctrl"),
    (e[(e.Alt = 18)] = "Alt"),
    (e[(e.Pause = 19)] = "Pause"),
    (e[(e.CapsLock = 20)] = "CapsLock"),
    (e[(e.Escape = 27)] = "Escape"),
    (e[(e.Space = 32)] = "Space"),
    (e[(e.PageUp = 33)] = "PageUp"),
    (e[(e.PageDown = 34)] = "PageDown"),
    (e[(e.End = 35)] = "End"),
    (e[(e.Home = 36)] = "Home"),
    (e[(e.LeftArrow = 37)] = "LeftArrow"),
    (e[(e.UpArrow = 38)] = "UpArrow"),
    (e[(e.RightArrow = 39)] = "RightArrow"),
    (e[(e.DownArrow = 40)] = "DownArrow"),
    (e[(e.Insert = 45)] = "Insert"),
    (e[(e.Delete = 46)] = "Delete"),
    (e[(e.Key0 = 48)] = "Key0"),
    (e[(e.Key1 = 49)] = "Key1"),
    (e[(e.Key2 = 50)] = "Key2"),
    (e[(e.Key3 = 51)] = "Key3"),
    (e[(e.Key4 = 52)] = "Key4"),
    (e[(e.Key5 = 53)] = "Key5"),
    (e[(e.Key6 = 54)] = "Key6"),
    (e[(e.Key7 = 55)] = "Key7"),
    (e[(e.Key8 = 56)] = "Key8"),
    (e[(e.Key9 = 57)] = "Key9"),
    (e[(e.KeyA = 65)] = "KeyA"),
    (e[(e.KeyB = 66)] = "KeyB"),
    (e[(e.KeyC = 67)] = "KeyC"),
    (e[(e.KeyD = 68)] = "KeyD"),
    (e[(e.KeyE = 69)] = "KeyE"),
    (e[(e.KeyF = 70)] = "KeyF"),
    (e[(e.KeyG = 71)] = "KeyG"),
    (e[(e.KeyH = 72)] = "KeyH"),
    (e[(e.KeyI = 73)] = "KeyI"),
    (e[(e.KeyJ = 74)] = "KeyJ"),
    (e[(e.KeyK = 75)] = "KeyK"),
    (e[(e.KeyL = 76)] = "KeyL"),
    (e[(e.KeyM = 77)] = "KeyM"),
    (e[(e.KeyN = 78)] = "KeyN"),
    (e[(e.KeyO = 79)] = "KeyO"),
    (e[(e.KeyP = 80)] = "KeyP"),
    (e[(e.KeyQ = 81)] = "KeyQ"),
    (e[(e.KeyR = 82)] = "KeyR"),
    (e[(e.KeyS = 83)] = "KeyS"),
    (e[(e.KeyT = 84)] = "KeyT"),
    (e[(e.KeyU = 85)] = "KeyU"),
    (e[(e.KeyV = 86)] = "KeyV"),
    (e[(e.KeyW = 87)] = "KeyW"),
    (e[(e.KeyX = 88)] = "KeyX"),
    (e[(e.KeyY = 89)] = "KeyY"),
    (e[(e.KeyZ = 90)] = "KeyZ"),
    (e[(e.LeftMeta = 91)] = "LeftMeta"),
    (e[(e.RightMeta = 92)] = "RightMeta"),
    (e[(e.Select = 93)] = "Select"),
    (e[(e.Numpad0 = 96)] = "Numpad0"),
    (e[(e.Numpad1 = 97)] = "Numpad1"),
    (e[(e.Numpad2 = 98)] = "Numpad2"),
    (e[(e.Numpad3 = 99)] = "Numpad3"),
    (e[(e.Numpad4 = 100)] = "Numpad4"),
    (e[(e.Numpad5 = 101)] = "Numpad5"),
    (e[(e.Numpad6 = 102)] = "Numpad6"),
    (e[(e.Numpad7 = 103)] = "Numpad7"),
    (e[(e.Numpad8 = 104)] = "Numpad8"),
    (e[(e.Numpad9 = 105)] = "Numpad9"),
    (e[(e.Multiply = 106)] = "Multiply"),
    (e[(e.Add = 107)] = "Add"),
    (e[(e.Subtract = 109)] = "Subtract"),
    (e[(e.Decimal = 110)] = "Decimal"),
    (e[(e.Divide = 111)] = "Divide"),
    (e[(e.F1 = 112)] = "F1"),
    (e[(e.F2 = 113)] = "F2"),
    (e[(e.F3 = 114)] = "F3"),
    (e[(e.F4 = 115)] = "F4"),
    (e[(e.F5 = 116)] = "F5"),
    (e[(e.F6 = 117)] = "F6"),
    (e[(e.F7 = 118)] = "F7"),
    (e[(e.F8 = 119)] = "F8"),
    (e[(e.F9 = 120)] = "F9"),
    (e[(e.F10 = 121)] = "F10"),
    (e[(e.F11 = 122)] = "F11"),
    (e[(e.F12 = 123)] = "F12"),
    (e[(e.NumLock = 144)] = "NumLock"),
    (e[(e.ScrollLock = 145)] = "ScrollLock"),
    (e[(e.Semicolon = 186)] = "Semicolon"),
    (e[(e.Equals = 187)] = "Equals"),
    (e[(e.Comma = 188)] = "Comma"),
    (e[(e.Dash = 189)] = "Dash"),
    (e[(e.Period = 190)] = "Period"),
    (e[(e.ForwardSlash = 191)] = "ForwardSlash"),
    (e[(e.GraveAccent = 192)] = "GraveAccent"),
    (e[(e.OpenBracket = 219)] = "OpenBracket"),
    (e[(e.BackSlash = 220)] = "BackSlash"),
    (e[(e.CloseBracket = 221)] = "CloseBracket"),
    (e[(e.SingleQuote = 222)] = "SingleQuote");
})(Ja || (Ja = {}));
const Hu = { props: { "data-polaris-scrollable": !0 }, selector: "[data-polaris-scrollable]" },
  Fh = { props: { "data-polaris-overlay": !0 }, selector: "[data-polaris-overlay]" },
  wh = { props: { "data-polaris-layer": !0 }, selector: "[data-polaris-layer]" },
  ap = { props: { "data-polaris-unstyled": !0 }, selector: "[data-polaris-unstyled]" },
  nm = { props: { "data-polaris-top-bar": !0 }, selector: "[data-polaris-top-bar]" },
  n5 = { props: { "data-polaris-header-cell": !0 }, selector: "[data-polaris-header-cell]" },
  xh = { props: ["data-portal-id"], selector: "[data-portal-id]" };
var am = ["xs", "sm", "md", "lg", "xl"],
  Th = {
    "breakpoints-xs": {
      value: "0px",
      description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage.",
    },
    "breakpoints-sm": {
      value: "490px",
      description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage.",
    },
    "breakpoints-md": {
      value: "768px",
      description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage.",
    },
    "breakpoints-lg": {
      value: "1040px",
      description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage.",
    },
    "breakpoints-xl": {
      value: "1440px",
      description: "Commonly used for sizing containers (e.g. max-width). See below for media query usage.",
    },
  };
function Mh(e, t) {
  var i = e == null ? null : (typeof Symbol < "u" && e[Symbol.iterator]) || e["@@iterator"];
  if (i != null) {
    var n,
      a,
      r,
      o,
      s = [],
      l = !0,
      d = !1;
    try {
      if (((r = (i = i.call(e)).next), t === 0)) {
        if (Object(i) !== i) return;
        l = !1;
      } else for (; !(l = (n = r.call(i)).done) && (s.push(n.value), s.length !== t); l = !0);
    } catch (u) {
      (d = !0), (a = u);
    } finally {
      try {
        if (!l && i.return != null && ((o = i.return()), Object(o) !== o)) return;
      } finally {
        if (d) throw a;
      }
    }
    return s;
  }
}
function Oh(e, t) {
  return t || (t = e.slice(0)), (e.raw = t), e;
}
function dd(e, t) {
  return Rh(e) || Mh(e, t) || Bh(e, t) || Ch();
}
function Rh(e) {
  if (Array.isArray(e)) return e;
}
function Bh(e, t) {
  if (e) {
    if (typeof e == "string") return rp(e, t);
    var i = Object.prototype.toString.call(e).slice(8, -1);
    if ((i === "Object" && e.constructor && (i = e.constructor.name), i === "Map" || i === "Set")) return Array.from(e);
    if (i === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)) return rp(e, t);
  }
}
function rp(e, t) {
  (t == null || t > e.length) && (t = e.length);
  for (var i = 0, n = new Array(t); i < t; i++) n[i] = e[i];
  return n;
}
function Ch() {
  throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
var op,
  Gl = 16,
  ls = "px",
  rs = "em",
  os = "rem",
  rm = new RegExp(String.raw(op || (op = Oh(["-?d+(?:.d+|d*)"], ["-?\\d+(?:\\.\\d+|\\d*)"])))),
  Ph = new RegExp(ls + "|" + rs + "|" + os);
function Qu(e) {
  e === void 0 && (e = "");
  var t = e.match(new RegExp(rm.source + "(" + Ph.source + ")"));
  return t && t[1];
}
function Eh(e) {
  e === void 0 && (e = "");
  var t = Qu(e);
  if (!t || t === ls) return e;
  if (t === rs || t === os) return "" + parseFloat(e) * Gl + ls;
}
function om(e, t) {
  e === void 0 && (e = ""), t === void 0 && (t = Gl);
  var i = Qu(e);
  if (!i || i === rs) return e;
  if (i === ls) return "" + parseFloat(e) / t + rs;
  if (i === os) return "" + (parseFloat(e) * Gl) / t + rs;
}
function Dh(e) {
  e === void 0 && (e = "");
  var t = Qu(e);
  if (!t || t === os) return e;
  if (t === rs) return "" + parseFloat(e) + os;
  if (t === ls) return "" + parseFloat(e) / Gl + os;
}
function Uh(e) {
  return e.replace(new RegExp(rm.source + "(" + ls + ")", "g"), function (t) {
    var i;
    return (i = Dh(t)) != null ? i : t;
  });
}
function sm(e) {
  return Object.fromEntries(
    Object.entries(e).map(function (t) {
      var i = dd(t, 2),
        n = i[0],
        a = i[1];
      return [n, Object.assign(Object.assign({}, a), {}, { value: Uh(a.value) })];
    })
  );
}
function lm(e) {
  return "--p-" + e;
}
function _(e) {
  return "var(" + lm(e) + ")";
}
function qh(e) {
  return Object.values(e).flatMap(function (t) {
    return Object.keys(t);
  });
}
function Vh(e) {
  var t = Object.entries(e),
    i = t.length - 1;
  return Object.fromEntries(
    t.map(function (n, a) {
      var r = n,
        o = dd(r, 2),
        s = o[0],
        l = o[1],
        d = _h(l),
        u = sp(l),
        f = a === i ? d : d + " and " + sp(t[a + 1][1]);
      return [s, { up: d, down: u, only: f }];
    })
  );
}
function _h(e) {
  return "(min-width: " + om(e) + ")";
}
function sp(e) {
  var t,
    i = parseFloat((t = Eh(e)) != null ? t : "") - 0.04;
  return "(max-width: " + om(i + "px") + ")";
}
var dm = ["border", "breakpoints", "font", "height", "shadow", "space", "text", "width"];
function $h(e) {
  return Object.fromEntries(
    Object.entries(e).map(function (t) {
      var i = dd(t, 2),
        n = i[0],
        a = i[1];
      return [n, dm.includes(n) ? sm(a) : a];
    })
  );
}
var Gh = function (t) {
  return jh(t) && !zh(t);
};
function jh(e) {
  return !!e && typeof e == "object";
}
function zh(e) {
  var t = Object.prototype.toString.call(e);
  return t === "[object RegExp]" || t === "[object Date]" || Hh(e);
}
var Wh = typeof Symbol == "function" && Symbol.for,
  Lh = Wh ? Symbol.for("react.element") : 60103;
function Hh(e) {
  return e.$$typeof === Lh;
}
function Qh(e) {
  return Array.isArray(e) ? [] : {};
}
function Js(e, t) {
  return t.clone !== !1 && t.isMergeableObject(e) ? ds(Qh(e), e, t) : e;
}
function Zh(e, t, i) {
  return e.concat(t).map(function (n) {
    return Js(n, i);
  });
}
function Jh(e, t) {
  if (!t.customMerge) return ds;
  var i = t.customMerge(e);
  return typeof i == "function" ? i : ds;
}
function Yh(e) {
  return Object.getOwnPropertySymbols
    ? Object.getOwnPropertySymbols(e).filter(function (t) {
        return Object.propertyIsEnumerable.call(e, t);
      })
    : [];
}
function lp(e) {
  return Object.keys(e).concat(Yh(e));
}
function um(e, t) {
  try {
    return t in e;
  } catch {
    return !1;
  }
}
function Xh(e, t) {
  return um(e, t) && !(Object.hasOwnProperty.call(e, t) && Object.propertyIsEnumerable.call(e, t));
}
function Kh(e, t, i) {
  var n = {};
  return (
    i.isMergeableObject(e) &&
      lp(e).forEach(function (a) {
        n[a] = Js(e[a], i);
      }),
    lp(t).forEach(function (a) {
      Xh(e, a) || (um(e, a) && i.isMergeableObject(t[a]) ? (n[a] = Jh(a, i)(e[a], t[a], i)) : (n[a] = Js(t[a], i)));
    }),
    n
  );
}
function ds(e, t, i) {
  (i = i || {}),
    (i.arrayMerge = i.arrayMerge || Zh),
    (i.isMergeableObject = i.isMergeableObject || Gh),
    (i.cloneUnlessOtherwiseSpecified = Js);
  var n = Array.isArray(t),
    a = Array.isArray(e),
    r = n === a;
  return r ? (n ? i.arrayMerge(e, t, i) : Kh(e, t, i)) : Js(t, i);
}
ds.all = function (t, i) {
  if (!Array.isArray(t)) throw new Error("first argument should be an array");
  return t.reduce(function (n, a) {
    return ds(n, a, i);
  }, {});
};
var eb = ds,
  tb = eb;
const ib = Lu(tb);
var O = {
    0: "0px",
    "0165": "0.66px",
    "025": "1px",
    "050": "2px",
    100: "4px",
    150: "6px",
    200: "8px",
    275: "11px",
    300: "12px",
    325: "13px",
    350: "14px",
    400: "16px",
    450: "18px",
    500: "20px",
    550: "22px",
    600: "24px",
    700: "28px",
    750: "30px",
    800: "32px",
    900: "36px",
    1e3: "40px",
    1200: "48px",
    1600: "64px",
    2e3: "80px",
    2400: "96px",
    2800: "112px",
    3200: "128px",
  },
  nb = {
    "border-radius-0": { value: O[0] },
    "border-radius-050": { value: O["050"] },
    "border-radius-100": { value: O[100] },
    "border-radius-150": { value: O[150] },
    "border-radius-200": { value: O[200] },
    "border-radius-300": { value: O[300] },
    "border-radius-400": { value: O[400] },
    "border-radius-500": { value: O[500] },
    "border-radius-750": { value: O[750] },
    "border-radius-full": { value: "9999px" },
    "border-width-0": { value: O[0] },
    "border-width-0165": { value: O["0165"] },
    "border-width-025": { value: O["025"] },
    "border-width-050": { value: O["050"] },
    "border-width-100": { value: O[100] },
  },
  N = {
    1: "rgba(255, 255, 255, 1)",
    2: "rgba(253, 253, 253, 1)",
    3: "rgba(250, 250, 250, 1)",
    4: "rgba(247, 247, 247, 1)",
    5: "rgba(243, 243, 243, 1)",
    6: "rgba(241, 241, 241, 1)",
    7: "rgba(235, 235, 235, 1)",
    8: "rgba(227, 227, 227, 1)",
    9: "rgba(212, 212, 212, 1)",
    10: "rgba(204, 204, 204, 1)",
    11: "rgba(181, 181, 181, 1)",
    12: "rgba(138, 138, 138, 1)",
    13: "rgba(97, 97, 97, 1)",
    14: "rgba(74, 74, 74, 1)",
    15: "rgba(48, 48, 48, 1)",
    16: "rgba(26, 26, 26, 1)",
  },
  li = {
    1: "rgba(251, 253, 255, 1)",
    2: "rgba(242, 249, 255, 1)",
    3: "rgba(234, 244, 255, 1)",
    4: "rgba(224, 240, 255, 1)",
    5: "rgba(213, 235, 255, 1)",
    6: "rgba(202, 230, 255, 1)",
    7: "rgba(192, 225, 255, 1)",
    8: "rgba(168, 216, 255, 1)",
    9: "rgba(145, 208, 255, 1)",
    10: "rgba(81, 192, 255, 1)",
    11: "rgba(0, 148, 213, 1)",
    12: "rgba(0, 124, 180, 1)",
    13: "rgba(0, 103, 155, 1)",
    14: "rgba(0, 82, 124, 1)",
    15: "rgba(0, 58, 90, 1)",
    16: "rgba(0, 33, 51, 1)",
  },
  De = {
    1: "rgba(252, 253, 255, 1)",
    2: "rgba(246, 248, 255, 1)",
    3: "rgba(240, 242, 255, 1)",
    4: "rgba(234, 237, 255, 1)",
    5: "rgba(226, 231, 255, 1)",
    6: "rgba(219, 225, 255, 1)",
    7: "rgba(213, 220, 255, 1)",
    8: "rgba(197, 208, 255, 1)",
    9: "rgba(186, 199, 255, 1)",
    10: "rgba(151, 173, 255, 1)",
    11: "rgba(65, 136, 255, 1)",
    12: "rgba(0, 113, 233, 1)",
    13: "rgba(0, 91, 211, 1)",
    14: "rgba(0, 66, 153, 1)",
    15: "rgba(0, 46, 106, 1)",
    16: "rgba(0, 22, 51, 1)",
  },
  di = {
    1: "rgba(248, 255, 251, 1)",
    2: "rgba(227, 255, 237, 1)",
    3: "rgba(205, 254, 225, 1)",
    4: "rgba(180, 254, 210, 1)",
    5: "rgba(146, 254, 194, 1)",
    6: "rgba(99, 253, 176, 1)",
    7: "rgba(56, 250, 163, 1)",
    8: "rgba(53, 238, 155, 1)",
    9: "rgba(50, 225, 147, 1)",
    10: "rgba(46, 211, 137, 1)",
    11: "rgba(50, 160, 110, 1)",
    12: "rgba(41, 132, 90, 1)",
    13: "rgba(19, 111, 69, 1)",
    14: "rgba(12, 81, 50, 1)",
    15: "rgba(8, 61, 37, 1)",
    16: "rgba(9, 42, 27, 1)",
  },
  dp = {
    1: "rgba(250, 255, 250, 1)",
    2: "rgba(228, 255, 229, 1)",
    3: "rgba(208, 255, 209, 1)",
    4: "rgba(187, 254, 190, 1)",
    5: "rgba(157, 254, 160, 1)",
    6: "rgba(119, 254, 122, 1)",
    7: "rgba(56, 254, 62, 1)",
    8: "rgba(40, 242, 47, 1)",
    9: "rgba(37, 232, 43, 1)",
    10: "rgba(32, 207, 39, 1)",
    11: "rgba(24, 168, 29, 1)",
    12: "rgba(17, 135, 21, 1)",
    13: "rgba(12, 113, 15, 1)",
    14: "rgba(11, 85, 13, 1)",
    15: "rgba(3, 61, 5, 1)",
    16: "rgba(3, 33, 4, 1)",
  },
  up = {
    1: "rgba(255, 253, 255, 1)",
    2: "rgba(255, 245, 255, 1)",
    3: "rgba(253, 239, 253, 1)",
    4: "rgba(254, 231, 254, 1)",
    5: "rgba(252, 223, 252, 1)",
    6: "rgba(251, 215, 251, 1)",
    7: "rgba(251, 207, 251, 1)",
    8: "rgba(249, 190, 249, 1)",
    9: "rgba(248, 177, 248, 1)",
    10: "rgba(246, 141, 246, 1)",
    11: "rgba(225, 86, 225, 1)",
    12: "rgba(197, 48, 197, 1)",
    13: "rgba(159, 38, 159, 1)",
    14: "rgba(121, 26, 121, 1)",
    15: "rgba(86, 16, 86, 1)",
    16: "rgba(52, 6, 52, 1)",
  },
  Ci = {
    1: "rgba(255, 253, 250, 1)",
    2: "rgba(255, 247, 238, 1)",
    3: "rgba(255, 241, 227, 1)",
    4: "rgba(255, 235, 213, 1)",
    5: "rgba(255, 228, 198, 1)",
    6: "rgba(255, 221, 182, 1)",
    7: "rgba(255, 214, 164, 1)",
    8: "rgba(255, 200, 121, 1)",
    9: "rgba(255, 184, 0, 1)",
    10: "rgba(229, 165, 0, 1)",
    11: "rgba(178, 132, 0, 1)",
    12: "rgba(149, 111, 0, 1)",
    13: "rgba(124, 88, 0, 1)",
    14: "rgba(94, 66, 0, 1)",
    15: "rgba(65, 45, 0, 1)",
    16: "rgba(37, 26, 0, 1)",
  },
  ui = {
    1: "rgba(253, 253, 255, 1)",
    2: "rgba(248, 247, 255, 1)",
    3: "rgba(243, 241, 255, 1)",
    4: "rgba(239, 236, 255, 1)",
    5: "rgba(233, 229, 255, 1)",
    6: "rgba(228, 222, 255, 1)",
    7: "rgba(223, 217, 255, 1)",
    8: "rgba(212, 204, 255, 1)",
    9: "rgba(199, 188, 255, 1)",
    10: "rgba(170, 149, 255, 1)",
    11: "rgba(148, 116, 255, 1)",
    12: "rgba(128, 81, 255, 1)",
    13: "rgba(113, 38, 255, 1)",
    14: "rgba(87, 0, 209, 1)",
    15: "rgba(59, 0, 147, 1)",
    16: "rgba(28, 0, 79, 1)",
  },
  ci = {
    1: "rgba(255, 251, 251, 1)",
    2: "rgba(255, 246, 246, 1)",
    3: "rgba(255, 237, 236, 1)",
    4: "rgba(254, 233, 232, 1)",
    5: "rgba(254, 226, 225, 1)",
    6: "rgba(254, 218, 217, 1)",
    7: "rgba(254, 211, 209, 1)",
    8: "rgba(254, 195, 193, 1)",
    9: "rgba(253, 176, 172, 1)",
    10: "rgba(253, 129, 122, 1)",
    11: "rgba(239, 77, 47, 1)",
    12: "rgba(229, 28, 0, 1)",
    13: "rgba(181, 38, 11, 1)",
    14: "rgba(142, 31, 11, 1)",
    15: "rgba(95, 21, 7, 1)",
    16: "rgba(47, 10, 4, 1)",
  },
  cp = {
    1: "rgba(255, 253, 253, 1)",
    2: "rgba(255, 246, 248, 1)",
    3: "rgba(255, 239, 243, 1)",
    4: "rgba(255, 232, 238, 1)",
    5: "rgba(255, 225, 232, 1)",
    6: "rgba(255, 217, 227, 1)",
    7: "rgba(254, 209, 221, 1)",
    8: "rgba(254, 193, 210, 1)",
    9: "rgba(254, 181, 202, 1)",
    10: "rgba(254, 142, 177, 1)",
    11: "rgba(253, 75, 146, 1)",
    12: "rgba(227, 12, 118, 1)",
    13: "rgba(185, 7, 95, 1)",
    14: "rgba(141, 4, 72, 1)",
    15: "rgba(100, 2, 49, 1)",
    16: "rgba(62, 1, 28, 1)",
  },
  pp = {
    1: "rgba(248, 255, 254, 1)",
    2: "rgba(232, 252, 250, 1)",
    3: "rgba(215, 250, 247, 1)",
    4: "rgba(195, 247, 242, 1)",
    5: "rgba(170, 246, 239, 1)",
    6: "rgba(137, 245, 236, 1)",
    7: "rgba(112, 240, 229, 1)",
    8: "rgba(90, 230, 219, 1)",
    9: "rgba(44, 224, 212, 1)",
    10: "rgba(30, 199, 188, 1)",
    11: "rgba(0, 161, 152, 1)",
    12: "rgba(18, 131, 124, 1)",
    13: "rgba(12, 106, 100, 1)",
    14: "rgba(12, 83, 79, 1)",
    15: "rgba(3, 60, 57, 1)",
    16: "rgba(6, 44, 41, 1)",
  },
  Pi = {
    1: "rgba(255, 253, 246, 1)",
    2: "rgba(255, 248, 219, 1)",
    3: "rgba(255, 244, 191, 1)",
    4: "rgba(255, 239, 157, 1)",
    5: "rgba(255, 235, 120, 1)",
    6: "rgba(255, 230, 0, 1)",
    7: "rgba(247, 223, 0, 1)",
    8: "rgba(234, 211, 0, 1)",
    9: "rgba(225, 203, 0, 1)",
    10: "rgba(197, 178, 0, 1)",
    11: "rgba(153, 138, 0, 1)",
    12: "rgba(130, 117, 0, 1)",
    13: "rgba(105, 95, 0, 1)",
    14: "rgba(79, 71, 0, 1)",
    15: "rgba(51, 46, 0, 1)",
    16: "rgba(31, 28, 0, 1)",
  },
  Ht = {
    1: "rgba(0, 0, 0, 0)",
    2: "rgba(0, 0, 0, 0.01)",
    3: "rgba(0, 0, 0, 0.02)",
    4: "rgba(0, 0, 0, 0.03)",
    5: "rgba(0, 0, 0, 0.05)",
    6: "rgba(0, 0, 0, 0.06)",
    7: "rgba(0, 0, 0, 0.08)",
    8: "rgba(0, 0, 0, 0.11)",
    9: "rgba(0, 0, 0, 0.17)",
    10: "rgba(0, 0, 0, 0.20)",
    11: "rgba(0, 0, 0, 0.29)",
    12: "rgba(0, 0, 0, 0.46)",
    13: "rgba(0, 0, 0, 0.62)",
    14: "rgba(0, 0, 0, 0.71)",
    15: "rgba(0, 0, 0, 0.81)",
    16: "rgba(0, 0, 0, 0.90)",
  },
  Gn = {
    1: "rgba(255, 255, 255, 0)",
    2: "rgba(255, 255, 255, 0.01)",
    3: "rgba(255, 255, 255, 0.02)",
    4: "rgba(255, 255, 255, 0.03)",
    5: "rgba(255, 255, 255, 0.05)",
    6: "rgba(255, 255, 255, 0.06)",
    7: "rgba(255, 255, 255, 0.08)",
    8: "rgba(255, 255, 255, 0.11)",
    9: "rgba(255, 255, 255, 0.17)",
    10: "rgba(255, 255, 255, 0.20)",
    11: "rgba(255, 255, 255, 0.28)",
    12: "rgba(255, 255, 255, 0.46)",
    13: "rgba(255, 255, 255, 0.62)",
    14: "rgba(255, 255, 255, 0.71)",
    15: "rgba(255, 255, 255, 0.81)",
    16: "rgba(255, 255, 255, 0.90)",
  },
  ab = {
    "color-scheme": { value: "light" },
    "color-bg": { value: N[6], description: "The default background color of the admin." },
    "color-bg-inverse": { value: N[16], description: "Use for high contrast page or component backgrounds." },
    "color-bg-surface": {
      value: N[1],
      description: "The background color for elements with the highest level of prominence, like a card.",
    },
    "color-bg-surface-hover": { value: N[4], description: "The hover state color for elements with the highest level of prominence." },
    "color-bg-surface-active": {
      value: N[5],
      description: "The active state (on press) color for elements with the highest level of prominence.",
    },
    "color-bg-surface-selected": {
      value: N[6],
      description: "The selected state color for elements with the highest level of prominence.",
    },
    "color-bg-surface-disabled": { value: Ht[5], description: "The disabled state color for elements." },
    "color-bg-surface-secondary": { value: N[4], description: "The background color for elements with a secondary level of prominence." },
    "color-bg-surface-secondary-hover": {
      value: N[6],
      description: "The hover state color for elements with a secondary level of prominence.",
    },
    "color-bg-surface-secondary-active": {
      value: N[7],
      description: "The active state (on press) color for elements with a secondary level of prominence.",
    },
    "color-bg-surface-secondary-selected": {
      value: N[7],
      description: "The selected state color for elements with a secondary level of prominence.",
    },
    "color-bg-surface-tertiary": { value: N[5], description: "The background color for elements with a third level of prominence." },
    "color-bg-surface-tertiary-hover": { value: N[7], description: "The hover state color for elements with a third level of prominence." },
    "color-bg-surface-tertiary-active": {
      value: N[8],
      description: "The active state (on press) color for elements with a third level of prominence.",
    },
    "color-bg-surface-brand": { value: N[8], description: "Use to apply the key color to elements." },
    "color-bg-surface-brand-hover": { value: N[7], description: "The hover state color for key elements." },
    "color-bg-surface-brand-active": { value: N[6], description: "The active state (on press) color for key elements." },
    "color-bg-surface-brand-selected": { value: N[6], description: "The selected state color for key elements." },
    "color-bg-surface-info": { value: li[3], description: "Use for backgrounds communicating important information, like banners." },
    "color-bg-surface-info-hover": { value: li[4], description: "The hover state color for communicating important information." },
    "color-bg-surface-info-active": {
      value: li[6],
      description: "The active state (on press) color for communicating important information.",
    },
    "color-bg-surface-success": { value: di[3], description: "Use for backgrounds communicating success, like banners." },
    "color-bg-surface-success-hover": { value: di[4], description: "The hover state color for communicating success." },
    "color-bg-surface-success-active": { value: di[5], description: "The active state (on press) color for communicating success." },
    "color-bg-surface-caution": { value: Pi[2], description: "Use for backgrounds communicating caution, like banners." },
    "color-bg-surface-caution-hover": { value: Pi[3], description: "The hover state for communicating caution." },
    "color-bg-surface-caution-active": { value: Pi[4], description: "The active state (on press) color for communicating caution." },
    "color-bg-surface-warning": { value: Ci[3], description: "Use for backgrounds communicating warning, like banners." },
    "color-bg-surface-warning-hover": { value: Ci[4], description: "The hover state color for communicating warning." },
    "color-bg-surface-warning-active": { value: Ci[5], description: "The active state (on press) color for communicating warning." },
    "color-bg-surface-critical": {
      value: ci[4],
      description: "Use for backgrounds communicating critical information, like banners or input errors.",
    },
    "color-bg-surface-critical-hover": { value: ci[5], description: "The hover state color for communicating critical information." },
    "color-bg-surface-critical-active": {
      value: ci[6],
      description: "The active state (on press) color for communicating critical information.",
    },
    "color-bg-surface-emphasis": {
      value: De[3],
      description: "Use for backgrounds indicating areas of focus in editors, such as the theme editor.",
    },
    "color-bg-surface-emphasis-hover": {
      value: De[4],
      description: "The hover state color for elements indicating areas of focus in editors.",
    },
    "color-bg-surface-emphasis-active": {
      value: De[5],
      description: "The active state (on press) color for elements indicating areas of focus in editors.",
    },
    "color-bg-surface-magic": { value: ui[2], description: "Use for backgrounds of elements suggested by magic AI." },
    "color-bg-surface-magic-hover": { value: ui[3], description: "The hover state color for elements suggested by magic AI." },
    "color-bg-surface-magic-active": { value: ui[5], description: "The active state (on press) color for elements suggested by magic AI." },
    "color-bg-surface-inverse": { value: N[15], description: "Use for elements on bg-inverse." },
    "color-bg-surface-transparent": { value: Ht[1], description: "Use for elements that need a fully transparent background." },
    "color-bg-fill": { value: N[1], description: "The background color of contained elements with a smaller surface area, like a button." },
    "color-bg-fill-hover": {
      value: N[3],
      description: "The hover state color of contained elements with a smaller surface area, like a button.",
    },
    "color-bg-fill-active": {
      value: N[4],
      description: "The active state (on press) color of contained elements with a smaller surface area, like a button.",
    },
    "color-bg-fill-selected": {
      value: N[10],
      description: "The selected state color of contained elements with a smaller surface area, like a button or checkbox.",
    },
    "color-bg-fill-disabled": {
      value: Ht[5],
      description: "The disabled state color of contained elements with a smaller surface area, like a button.",
    },
    "color-bg-fill-secondary": {
      value: N[6],
      description: "The background color of elements with a smaller surface area and a secondary level of prominence.",
    },
    "color-bg-fill-secondary-hover": {
      value: N[7],
      description: "The hover state color of elements with a smaller surface area and a secondary level of prominence.",
    },
    "color-bg-fill-secondary-active": {
      value: N[8],
      description: "The active state (on press) color of elements with a smaller surface area and a secondary level of prominence.",
    },
    "color-bg-fill-tertiary": {
      value: N[8],
      description: "The background color of elements with a smaller surface area and a third level of prominence.",
    },
    "color-bg-fill-tertiary-hover": {
      value: N[9],
      description: "The hover state color of elements with a smaller surface area and a third level of prominence.",
    },
    "color-bg-fill-tertiary-active": {
      value: N[10],
      description: "The active state (on press) color of elements with a smaller surface area and a third level of prominence.",
    },
    "color-bg-fill-brand": { value: N[15], description: "The background color of main actions, like primary buttons." },
    "color-bg-fill-brand-hover": { value: N[16], description: "The hover state color of main actions, like primary buttons." },
    "color-bg-fill-brand-active": { value: N[16], description: "The active state (on press) color of main actions, like primary buttons." },
    "color-bg-fill-brand-selected": { value: N[15], description: "The selected state color of main actions, like primary buttons." },
    "color-bg-fill-brand-disabled": { value: Ht[9], description: "The disabled state color of main actions, like primary buttons." },
    "color-bg-fill-info": {
      value: li[9],
      description:
        "Use for backgrounds communicating important information on elements with a smaller surface area, like a badge or button.",
    },
    "color-bg-fill-info-hover": {
      value: li[10],
      description: "The hover state color for communicating important information on elements with a smaller surface area.",
    },
    "color-bg-fill-info-active": {
      value: li[11],
      description: "The active state (on press) color for communicating important information on elements with a smaller surface area.",
    },
    "color-bg-fill-info-secondary": {
      value: li[5],
      description:
        "Use for backgrounds communicating important information on elements with a smaller surface area, with a secondary level of prominence.",
    },
    "color-bg-fill-success": {
      value: di[12],
      description: "Use for backgrounds communicating success on elements with a smaller surface area, like a badge or a banner.",
    },
    "color-bg-fill-success-hover": {
      value: di[13],
      description: "The hover state color for communicating success on elements with a smaller surface area.",
    },
    "color-bg-fill-success-active": {
      value: di[14],
      description: "The active state (on press) color for communicating success on elements with a smaller surface area.",
    },
    "color-bg-fill-success-secondary": {
      value: di[4],
      description:
        "Use for backgrounds communicating success on elements with a smaller surface area, with a secondary level of prominence.",
    },
    "color-bg-fill-warning": {
      value: Ci[9],
      description: "Use for backgrounds communicating warning on elements with a smaller surface area, like a badge or a banner.",
    },
    "color-bg-fill-warning-hover": {
      value: Ci[10],
      description: "The hover state color for communicating warning on elements with a smaller surface area.",
    },
    "color-bg-fill-warning-active": {
      value: Ci[11],
      description: "The active state (on press) color for communicating warning on elements with a smaller surface area.",
    },
    "color-bg-fill-warning-secondary": {
      value: Ci[7],
      description:
        "Use for backgrounds communicating warning on elements with a smaller surface area, with a secondary level of prominence.",
    },
    "color-bg-fill-caution": {
      value: Pi[6],
      description: "Use for backgrounds communicating caution on elements with a smaller surface area, like a badge or a banner.",
    },
    "color-bg-fill-caution-hover": {
      value: Pi[8],
      description: "The hover state color for communicating caution on elements with a smaller surface area.",
    },
    "color-bg-fill-caution-active": {
      value: Pi[9],
      description: "The active state (on press) color for communicating caution on elements with a smaller surface area.",
    },
    "color-bg-fill-caution-secondary": {
      value: Pi[5],
      description:
        "Use for backgrounds communicating caution on elements with a smaller surface area, with a secondary level of prominence.",
    },
    "color-bg-fill-critical": {
      value: ci[12],
      description:
        "Use for backgrounds communicating critical information on elements with a smaller surface area, like a badge or a banner.",
    },
    "color-bg-fill-critical-hover": {
      value: ci[13],
      description: "The hover state color for communicating critical information on elements with a smaller surface area.",
    },
    "color-bg-fill-critical-active": {
      value: ci[14],
      description: "The active state (on press) color for communicating critical information on elements with a smaller surface area.",
    },
    "color-bg-fill-critical-selected": {
      value: ci[14],
      description: "The selected state color for communicating critical information on elements with a smaller surface area.",
    },
    "color-bg-fill-critical-secondary": {
      value: ci[7],
      description:
        "Use for backgrounds communicating critical information on elements with a smaller surface area, with a secondary level of prominence.",
    },
    "color-bg-fill-emphasis": {
      value: De[13],
      description:
        "Use for backgrounds indicating areas of focus in editors on elements with a smaller surface area, like a button or a badge.",
    },
    "color-bg-fill-emphasis-hover": {
      value: De[14],
      description: "The hover state color for indicating areas of focus in editors on elements with a smaller surface area.",
    },
    "color-bg-fill-emphasis-active": {
      value: De[15],
      description: "The active state (on press) color for indicating areas of focus in editors on elements with a smaller surface area.",
    },
    "color-bg-fill-magic": {
      value: ui[12],
      description: "The background color of elements suggested by magic AI, like a badge or a banner.",
    },
    "color-bg-fill-magic-secondary": {
      value: ui[5],
      description: "The background color of elements suggested by magic AI, with a secondary level of prominence.",
    },
    "color-bg-fill-magic-secondary-hover": {
      value: ui[6],
      description: "The hover state color of elements suggested by magic AI, with a secondary level of prominence.",
    },
    "color-bg-fill-magic-secondary-active": {
      value: ui[7],
      description: "The active state (on press) color of elements suggested by magic AI, with a secondary level of prominence.",
    },
    "color-bg-fill-inverse": {
      value: N[15],
      description: "The background color of elements with a smaller surface area on an inverse background.",
    },
    "color-bg-fill-inverse-hover": {
      value: N[14],
      description: "The hover state color of elements with a smaller surface area on an inverse background.",
    },
    "color-bg-fill-inverse-active": {
      value: N[13],
      description: "The active state (on press) color of elements with a smaller surface area on an inverse background.",
    },
    "color-bg-fill-transparent": {
      value: Ht[3],
      description: "The background color of elements that need to sit on different background colors, like tabs.",
    },
    "color-bg-fill-transparent-hover": {
      value: Ht[5],
      description: "The hover state color of elements that need to sit on different background colors, like tabs.",
    },
    "color-bg-fill-transparent-active": {
      value: Ht[7],
      description: "The active state (on press) color of elements that need to sit on different background colors, like tabs.",
    },
    "color-bg-fill-transparent-selected": {
      value: Ht[7],
      description: "The selected state color of elements that need to sit on different background colors, like tabs.",
    },
    "color-bg-fill-transparent-secondary": {
      value: Ht[6],
      description:
        "The background color of elements that need to sit on different background colors, with a secondary level of prominence.",
    },
    "color-bg-fill-transparent-secondary-hover": {
      value: Ht[7],
      description:
        "The hover state color of elements that need to sit on different background colors, with a secondary level of prominence.",
    },
    "color-bg-fill-transparent-secondary-active": {
      value: Ht[8],
      description:
        "The active state (on press) color of elements that need to sit on different background colors, with a secondary level of prominence.",
    },
    "color-text": { value: N[15], description: "The default text color." },
    "color-text-secondary": { value: N[13], description: "Use for text with a secondary level of prominence." },
    "color-text-disabled": { value: N[11], description: "Use for text in a disabled state." },
    "color-text-link": { value: De[13], description: "Use for text links." },
    "color-text-link-hover": { value: De[14], description: "The hover state color for text links." },
    "color-text-link-active": { value: De[15], description: "The active state (on press) color for text links." },
    "color-text-brand": { value: N[14], description: "Use for text that needs to pull attention." },
    "color-text-brand-hover": { value: N[15], description: "The hover state color for text that needs to pull attention." },
    "color-text-brand-on-bg-fill": { value: N[1], description: "Use for text on bg-fill-brand, like primary buttons." },
    "color-text-brand-on-bg-fill-hover": { value: N[8], description: "The hover state color for text on bg-fill-brand-hover." },
    "color-text-brand-on-bg-fill-active": { value: N[10], description: "The active state (on press) color for text on bg-fill-brand." },
    "color-text-brand-on-bg-fill-disabled": { value: N[1], description: "The disabled state color for text on bg-fill-brand-disabled." },
    "color-text-info": { value: li[15], description: "Use for text communicating important information." },
    "color-text-info-hover": { value: li[15], description: "The hover state color for text communicating important information." },
    "color-text-info-active": {
      value: li[16],
      description: "The active state (on press) color for text communicating important information.",
    },
    "color-text-info-secondary": {
      value: li[12],
      description: "Use for text communicating important information with a secondary level of prominence.",
    },
    "color-text-info-on-bg-fill": { value: li[16], description: "Use for text and icons on bg-fill-info." },
    "color-text-success": { value: di[14], description: "Use for text communicating success." },
    "color-text-success-hover": { value: di[15], description: "The hover state color for text communicating success." },
    "color-text-success-active": { value: di[16], description: "The active state (on press) color for text communicating success." },
    "color-text-success-secondary": {
      value: di[12],
      description: "Use for text communicating success with a secondary level of prominence.",
    },
    "color-text-success-on-bg-fill": { value: di[1], description: "Use for text and icons on bg-fill-success." },
    "color-text-caution": { value: Pi[14], description: "Use for text communicating caution." },
    "color-text-caution-hover": { value: Pi[15], description: "The hover state color for text communicating caution." },
    "color-text-caution-active": { value: Pi[16], description: "The active state (on press) color for text communicating caution." },
    "color-text-caution-secondary": {
      value: Pi[12],
      description: "Use for text communicating caution with a secondary level of prominence.",
    },
    "color-text-caution-on-bg-fill": { value: Pi[15], description: "Use for text and icons on bg-fill-caution." },
    "color-text-warning": { value: Ci[14], description: "Use for text communicating warning." },
    "color-text-warning-hover": { value: Ci[15], description: "The hover state color for text communicating warning." },
    "color-text-warning-active": { value: Ci[16], description: "The active state (on press) color for text communicating warning." },
    "color-text-warning-secondary": {
      value: Ci[12],
      description: "Use for text communicating warning with a secondary level of prominence.",
    },
    "color-text-warning-on-bg-fill": { value: Ci[16], description: "Use for text and icons on bg-fill-warning." },
    "color-text-critical": { value: ci[14], description: "Use for text communicating critical information." },
    "color-text-critical-hover": { value: ci[15], description: "The hover state color for text communicating critical information." },
    "color-text-critical-active": {
      value: ci[16],
      description: "The active state (on press) color for text communicating critical information.",
    },
    "color-text-critical-secondary": {
      value: ci[12],
      description: "Use for text communicating critical information with a secondary level of prominence.",
    },
    "color-text-critical-on-bg-fill": { value: ci[1], description: "Use for text and icons on bg-fill-critical." },
    "color-text-emphasis": { value: De[13], description: "Use for text indicating areas of focus in editors, like the theme editor." },
    "color-text-emphasis-hover": { value: De[14], description: "The hover state color for text indicating areas of focus." },
    "color-text-emphasis-active": { value: De[15], description: "The active state (on press) color for text indicating areas of focus." },
    "color-text-emphasis-on-bg-fill": { value: De[1], description: "Use for text and icons on bg-fill-emphasis." },
    "color-text-emphasis-on-bg-fill-hover": { value: De[5], description: "Use for text and icons on bg-fill-emphasis-hover." },
    "color-text-emphasis-on-bg-fill-active": { value: De[7], description: "Use for text and icons on bg-fill-emphasis-active." },
    "color-text-magic": { value: ui[14], description: "Use for text suggested by magic AI." },
    "color-text-magic-secondary": {
      value: ui[13],
      description: "Use for text suggested by magic AI with a secondary level of prominence.",
    },
    "color-text-magic-on-bg-fill": { value: ui[1], description: "Use for text and icons on bg-fill-magic." },
    "color-text-inverse": { value: N[8], description: "Use for text on an inverse background." },
    "color-text-inverse-secondary": { value: N[11], description: "Use for secondary text on an inverse background." },
    "color-text-link-inverse": { value: De[8], description: "Use for text links on an inverse background." },
    "color-border": { value: N[8], description: "The default color for borders on any element." },
    "color-border-hover": { value: N[10], description: "The hover color for borders on any element." },
    "color-border-disabled": { value: N[7], description: "The disabled color for borders on any element." },
    "color-border-secondary": { value: N[7], description: "The color for hr elements or any visual dividers." },
    "color-border-tertiary": {
      value: N[10],
      description: "The border color on any element. Pair with bg-surface-tertiary or bg-fill-tertiary.",
    },
    "color-border-focus": { value: De[13], description: "The focus ring for any interactive element in a focused state." },
    "color-border-brand": { value: N[8], description: "Use for borders paired with brand colors." },
    "color-border-info": { value: li[8], description: "Use for borders communicating information." },
    "color-border-success": { value: di[5], description: "Use for borders communicating success." },
    "color-border-caution": { value: Pi[5], description: "Use for borders communicating caution." },
    "color-border-warning": { value: Ci[8], description: "Use for borders communicating warning." },
    "color-border-critical": { value: ci[8], description: "Use for borders communicating critical information." },
    "color-border-critical-secondary": {
      value: ci[14],
      description: "Use for borders communicating critical information, such as borders on invalid text fields.",
    },
    "color-border-emphasis": { value: De[13], description: "Use for borders indicating areas of focus." },
    "color-border-emphasis-hover": { value: De[14], description: "The hover state color for borders indicating areas of focus." },
    "color-border-emphasis-active": {
      value: De[15],
      description: "The active state (on press) color for borders indicating areas of focus.",
    },
    "color-border-magic": { value: ui[6], description: "Use for borders suggested by magic AI." },
    "color-border-magic-secondary": {
      value: ui[11],
      description: "Use for borders suggested by magic AI, such as borders on text fields.",
    },
    "color-border-magic-secondary-hover": {
      value: ui[12],
      description: "Use for borders suggested by magic AI, such as borders on text fields.",
    },
    "color-border-inverse": {
      value: N[13],
      description: "Use for borders on an inverse background, such as borders on the global search.",
    },
    "color-border-inverse-hover": { value: N[10], description: "The hover state color for borders on an inverse background." },
    "color-border-inverse-active": { value: N[8], description: "The active state (on press) color for borders on an inverse background." },
    "color-tooltip-tail-down-border-experimental": { value: N[9], description: "The border color for tooltip tails pointing down." },
    "color-tooltip-tail-up-border-experimental": { value: N[8], description: "The border color for tooltip tails pointing up." },
    "color-border-gradient-experimental": { value: "linear-gradient(to bottom, " + N[7] + ", " + N[10] + " 78%, " + N[11] + ")" },
    "color-border-gradient-hover-experimental": { value: "linear-gradient(to bottom, " + N[7] + ", " + N[10] + " 78%, " + N[11] + ")" },
    "color-border-gradient-selected-experimental": { value: "linear-gradient(to bottom, " + N[7] + ", " + N[10] + " 78%, " + N[11] + ")" },
    "color-border-gradient-active-experimental": { value: "linear-gradient(to bottom, " + N[7] + ", " + N[10] + " 78%, " + N[11] + ")" },
    "color-icon": { value: N[14], description: "The default color for icons." },
    "color-icon-hover": { value: N[15], description: "The hover state color for icons." },
    "color-icon-active": { value: N[16], description: "The active state (on press) color for icons." },
    "color-icon-disabled": { value: N[10], description: "The disabled state color for icons." },
    "color-icon-secondary": { value: N[12], description: "Use for secondary icons." },
    "color-icon-secondary-hover": { value: N[13], description: "The hover state color for secondary icons." },
    "color-icon-secondary-active": { value: N[14], description: "The active state (on press) color for secondary icons." },
    "color-icon-brand": { value: N[16], description: "Use for icons that need to pull more focus." },
    "color-icon-info": { value: li[11], description: "Use for icons communicating information." },
    "color-icon-success": { value: di[12], description: "Use for icons communicating success." },
    "color-icon-caution": { value: Pi[11], description: "Use for icons communicating caution." },
    "color-icon-warning": { value: Ci[11], description: "Use for icons communicating warning." },
    "color-icon-critical": { value: ci[11], description: "Use for icons communicating critical information." },
    "color-icon-emphasis": { value: De[13], description: "Use for icons indicating areas of focus in editors, like the theme editor." },
    "color-icon-emphasis-hover": { value: De[14], description: "The hover color for icons indicating areas of focus in editors." },
    "color-icon-emphasis-active": {
      value: De[15],
      description: "The active state (on press) color for icons indicating areas of focus in editors.",
    },
    "color-icon-magic": { value: ui[12], description: "Use for icons suggested by magic AI." },
    "color-icon-inverse": { value: N[8], description: "Use for icons on an inverse background." },
    "color-avatar-bg-fill": { value: N[11] },
    "color-avatar-five-bg-fill": { value: cp[11] },
    "color-avatar-five-text-on-bg-fill": { value: cp[2] },
    "color-avatar-four-bg-fill": { value: li[10] },
    "color-avatar-four-text-on-bg-fill": { value: li[16] },
    "color-avatar-one-bg-fill": { value: up[12] },
    "color-avatar-one-text-on-bg-fill": { value: up[3] },
    "color-avatar-seven-bg-fill": { value: ui[11] },
    "color-avatar-seven-text-on-bg-fill": { value: ui[2] },
    "color-avatar-six-bg-fill": { value: dp[9] },
    "color-avatar-six-text-on-bg-fill": { value: dp[15] },
    "color-avatar-text-on-bg-fill": { value: N[1] },
    "color-avatar-three-bg-fill": { value: pp[9] },
    "color-avatar-three-text-on-bg-fill": { value: pp[15] },
    "color-avatar-two-bg-fill": { value: di[7] },
    "color-avatar-two-text-on-bg-fill": { value: di[14] },
    "color-backdrop-bg": { value: Ht[14] },
    "color-button-gradient-bg-fill": { value: "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)" },
    "color-checkbox-bg-surface-disabled": { value: Ht[7] },
    "color-checkbox-icon-disabled": { value: N[1] },
    "color-input-bg-surface": { value: N[2] },
    "color-input-bg-surface-hover": { value: N[3] },
    "color-input-bg-surface-active": { value: N[4] },
    "color-input-border": { value: N[12] },
    "color-input-border-hover": { value: N[13] },
    "color-input-border-active": { value: N[16] },
    "color-nav-bg": { value: N[7] },
    "color-nav-bg-surface": { value: Ht[3] },
    "color-nav-bg-surface-hover": { value: N[6] },
    "color-nav-bg-surface-active": { value: N[3] },
    "color-nav-bg-surface-selected": { value: N[3] },
    "color-radio-button-bg-surface-disabled": { value: Ht[7] },
    "color-radio-button-icon-disabled": { value: N[1] },
    "color-video-thumbnail-play-button-bg-fill-hover": { value: Ht[15] },
    "color-video-thumbnail-play-button-bg-fill": { value: Ht[14] },
    "color-video-thumbnail-play-button-text-on-bg-fill": { value: N[1] },
    "color-scrollbar-thumb-bg-hover": { value: N[12] },
  },
  rb = {
    "font-family-sans": {
      value: "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
    },
    "font-family-mono": { value: "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace" },
    "font-size-275": { value: O[275] },
    "font-size-300": { value: O[300] },
    "font-size-325": { value: O[325] },
    "font-size-350": { value: O[350] },
    "font-size-400": { value: O[400] },
    "font-size-450": { value: O[450] },
    "font-size-500": { value: O[500] },
    "font-size-550": { value: O[550] },
    "font-size-600": { value: O[600] },
    "font-size-750": { value: O[750] },
    "font-size-800": { value: O[800] },
    "font-size-900": { value: O[900] },
    "font-size-1000": { value: O[1e3] },
    "font-weight-regular": { value: "450" },
    "font-weight-medium": { value: "550" },
    "font-weight-semibold": { value: "650" },
    "font-weight-bold": { value: "700" },
    "font-letter-spacing-densest": { value: "-0.54px" },
    "font-letter-spacing-denser": { value: "-0.3px" },
    "font-letter-spacing-dense": { value: "-0.2px" },
    "font-letter-spacing-normal": { value: "0px" },
    "font-line-height-300": { value: O[300] },
    "font-line-height-400": { value: O[400] },
    "font-line-height-500": { value: O[500] },
    "font-line-height-600": { value: O[600] },
    "font-line-height-700": { value: O[700] },
    "font-line-height-800": { value: O[800] },
    "font-line-height-1000": { value: O[1e3] },
    "font-line-height-1200": { value: O[1200] },
  },
  ob = {
    "height-0": { value: O[0] },
    "height-025": { value: O["025"] },
    "height-050": { value: O["050"] },
    "height-100": { value: O[100] },
    "height-150": { value: O[150] },
    "height-200": { value: O[200] },
    "height-300": { value: O[300] },
    "height-400": { value: O[400] },
    "height-500": { value: O[500] },
    "height-600": { value: O[600] },
    "height-700": { value: O[700] },
    "height-800": { value: O[800] },
    "height-900": { value: O[900] },
    "height-1000": { value: O[1e3] },
    "height-1200": { value: O[1200] },
    "height-1600": { value: O[1600] },
    "height-2000": { value: O[2e3] },
    "height-2400": { value: O[2400] },
    "height-2800": { value: O[2800] },
    "height-3200": { value: O[3200] },
  },
  sb = {
    "motion-duration-0": { value: "0ms" },
    "motion-duration-50": { value: "50ms" },
    "motion-duration-100": { value: "100ms" },
    "motion-duration-150": { value: "150ms" },
    "motion-duration-200": { value: "200ms" },
    "motion-duration-250": { value: "250ms" },
    "motion-duration-300": { value: "300ms" },
    "motion-duration-350": { value: "350ms" },
    "motion-duration-400": { value: "400ms" },
    "motion-duration-450": { value: "450ms" },
    "motion-duration-500": { value: "500ms" },
    "motion-duration-5000": { value: "5000ms" },
    "motion-ease": {
      value: "cubic-bezier(0.25, 0.1, 0.25, 1)",
      description: "Responds quickly and finishes with control. A great default for any user interaction.",
    },
    "motion-ease-in": { value: "cubic-bezier(0.42, 0, 1, 1)", description: "Starts slowly and finishes at top speed. Use sparingly." },
    "motion-ease-out": {
      value: "cubic-bezier(0.19, 0.91, 0.38, 1)",
      description: "Starts at top speed and finishes slowly. Use sparingly.",
    },
    "motion-ease-in-out": {
      value: "cubic-bezier(0.42, 0, 0.58, 1)",
      description: "Starts and finishes with equal speed. A good default for transitions triggered by the system.",
    },
    "motion-linear": {
      value: "cubic-bezier(0, 0, 1, 1)",
      description: "Moves with constant speed. Use for continuous and mechanical animations, such as rotating spinners.",
    },
    "motion-keyframes-bounce": {
      value: "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
    },
    "motion-keyframes-fade-in": { value: "{ to { opacity: 1 } }" },
    "motion-keyframes-pulse": { value: "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }" },
    "motion-keyframes-spin": { value: "{ to { transform: rotate(1turn) } }" },
    "motion-keyframes-appear-above": {
      value: "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
    },
    "motion-keyframes-appear-below": {
      value: "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }",
    },
  },
  lb = {
    "shadow-0": { value: "none" },
    "shadow-100": { value: "0px 1px 0px 0px rgba(26, 26, 26, 0.07)" },
    "shadow-200": { value: "0px 3px 1px -1px rgba(26, 26, 26, 0.07)" },
    "shadow-300": { value: "0px 4px 6px -2px rgba(26, 26, 26, 0.20)" },
    "shadow-400": { value: "0px 8px 16px -4px rgba(26, 26, 26, 0.22)" },
    "shadow-500": { value: "0px 12px 20px -8px rgba(26, 26, 26, 0.24)" },
    "shadow-600": { value: "0px 20px 20px -8px rgba(26, 26, 26, 0.28)" },
    "shadow-bevel-100": {
      value:
        "1px 0px 0px 0px rgba(0, 0, 0, 0.13) inset, -1px 0px 0px 0px rgba(0, 0, 0, 0.13) inset, 0px -1px 0px 0px rgba(0, 0, 0, 0.17) inset, 0px 1px 0px 0px rgba(204, 204, 204, 0.5) inset",
    },
    "shadow-inset-100": { value: "0px 1px 2px 0px rgba(26, 26, 26, 0.15) inset, 0px 1px 1px 0px rgba(26, 26, 26, 0.15) inset" },
    "shadow-inset-200": {
      value:
        "0px 2px 1px 0px rgba(26, 26, 26, 0.20) inset, 1px 0px 1px 0px rgba(26, 26, 26, 0.12) inset, -1px 0px 1px 0px rgba(26, 26, 26, 0.12) inset",
    },
    "shadow-button": { value: "0px -1px 0px 0px #b5b5b5 inset, 0px 0px 0px 1px rgba(0, 0, 0, 0.1) inset, 0px 0.5px 0px 1.5px #FFF inset" },
    "shadow-button-hover": {
      value: "0px 1px 0px 0px #EBEBEB inset, -1px 0px 0px 0px #EBEBEB inset, 1px 0px 0px 0px #EBEBEB inset, 0px -1px 0px 0px #CCC inset",
    },
    "shadow-button-inset": {
      value:
        "-1px 0px 1px 0px rgba(26, 26, 26, 0.122) inset, 1px 0px 1px 0px rgba(26, 26, 26, 0.122) inset, 0px 2px 1px 0px rgba(26, 26, 26, 0.2) inset",
    },
    "shadow-button-primary": {
      value:
        "0px -1px 0px 1px rgba(0, 0, 0, 0.8) inset, 0px 0px 0px 1px rgba(48, 48, 48, 1) inset, 0px 0.5px 0px 1.5px rgba(255, 255, 255, 0.25) inset;",
    },
    "shadow-button-primary-hover": {
      value:
        "0px 1px 0px 0px rgba(255, 255, 255, 0.24) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1px 0px 0px #000 inset, 0px -1px 0px 1px #1A1A1A",
    },
    "shadow-button-primary-inset": { value: "0px 3px 0px 0px rgb(0, 0, 0) inset" },
    "shadow-button-primary-critical": {
      value:
        "0px -1px 0px 1px rgba(142, 31, 11, 0.8) inset, 0px 0px 0px 1px rgba(181, 38, 11, 0.8) inset, 0px 0.5px 0px 1.5px rgba(255, 255, 255, 0.349) inset",
    },
    "shadow-button-primary-critical-hover": {
      value:
        "0px 1px 0px 0px rgba(255, 255, 255, 0.48) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1.5px 0px 0px rgba(0, 0, 0, 0.25) inset",
    },
    "shadow-button-primary-critical-inset": {
      value:
        "-1px 0px 1px 0px rgba(0, 0, 0, 0.2) inset, 1px 0px 1px 0px rgba(0, 0, 0, 0.2) inset, 0px 2px 0px 0px rgba(0, 0, 0, 0.6) inset",
    },
    "shadow-button-primary-success": {
      value:
        "0px -1px 0px 1px rgba(12, 81, 50, 0.8) inset, 0px 0px 0px 1px rgba(19, 111, 69, 0.8) inset, 0px 0.5px 0px 1.5px rgba(255, 255, 255, 0.251) inset",
    },
    "shadow-button-primary-success-hover": {
      value:
        "0px 1px 0px 0px rgba(255, 255, 255, 0.48) inset, 1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, -1px 0px 0px 0px rgba(255, 255, 255, 0.20) inset, 0px -1.5px 0px 0px rgba(0, 0, 0, 0.25) inset",
    },
    "shadow-button-primary-success-inset": {
      value:
        "-1px 0px 1px 0px rgba(0, 0, 0, 0.2) inset, 1px 0px 1px 0px rgba(0, 0, 0, 0.2) inset, 0px 2px 0px 0px rgba(0, 0, 0, 0.6) inset",
    },
    "shadow-border-inset": { value: "0px 0px 0px 1px rgba(0, 0, 0, 0.08) inset" },
  },
  db = {
    "space-0": { value: O[0] },
    "space-025": { value: O["025"] },
    "space-050": { value: O["050"] },
    "space-100": { value: O[100] },
    "space-150": { value: O[150] },
    "space-200": { value: O[200] },
    "space-300": { value: O[300] },
    "space-400": { value: O[400] },
    "space-500": { value: O[500] },
    "space-600": { value: O[600] },
    "space-800": { value: O[800] },
    "space-1000": { value: O[1e3] },
    "space-1200": { value: O[1200] },
    "space-1600": { value: O[1600] },
    "space-2000": { value: O[2e3] },
    "space-2400": { value: O[2400] },
    "space-2800": { value: O[2800] },
    "space-3200": { value: O[3200] },
    "space-button-group-gap": { value: kl("space-200") },
    "space-card-gap": { value: kl("space-400") },
    "space-card-padding": { value: kl("space-400") },
    "space-table-cell-padding": { value: kl("space-150") },
  };
function kl(e) {
  return "var(" + lm(e) + ")";
}
var ub = {
    "text-heading-3xl-font-family": { value: _("font-family-sans") },
    "text-heading-3xl-font-size": { value: _("font-size-900") },
    "text-heading-3xl-font-weight": { value: _("font-weight-bold") },
    "text-heading-3xl-font-letter-spacing": { value: _("font-letter-spacing-densest") },
    "text-heading-3xl-font-line-height": { value: _("font-line-height-1200") },
    "text-heading-2xl-font-family": { value: _("font-family-sans") },
    "text-heading-2xl-font-size": { value: _("font-size-750") },
    "text-heading-2xl-font-weight": { value: _("font-weight-bold") },
    "text-heading-2xl-font-letter-spacing": { value: _("font-letter-spacing-denser") },
    "text-heading-2xl-font-line-height": { value: _("font-line-height-1000") },
    "text-heading-xl-font-family": { value: _("font-family-sans") },
    "text-heading-xl-font-size": { value: _("font-size-600") },
    "text-heading-xl-font-weight": { value: _("font-weight-bold") },
    "text-heading-xl-font-letter-spacing": { value: _("font-letter-spacing-dense") },
    "text-heading-xl-font-line-height": { value: _("font-line-height-800") },
    "text-heading-lg-font-family": { value: _("font-family-sans") },
    "text-heading-lg-font-size": { value: _("font-size-500") },
    "text-heading-lg-font-weight": { value: _("font-weight-semibold") },
    "text-heading-lg-font-letter-spacing": { value: _("font-letter-spacing-dense") },
    "text-heading-lg-font-line-height": { value: _("font-line-height-600") },
    "text-heading-md-font-family": { value: _("font-family-sans") },
    "text-heading-md-font-size": { value: _("font-size-350") },
    "text-heading-md-font-weight": { value: _("font-weight-semibold") },
    "text-heading-md-font-letter-spacing": { value: _("font-letter-spacing-normal") },
    "text-heading-md-font-line-height": { value: _("font-line-height-500") },
    "text-heading-sm-font-family": { value: _("font-family-sans") },
    "text-heading-sm-font-size": { value: _("font-size-325") },
    "text-heading-sm-font-weight": { value: _("font-weight-semibold") },
    "text-heading-sm-font-letter-spacing": { value: _("font-letter-spacing-normal") },
    "text-heading-sm-font-line-height": { value: _("font-line-height-500") },
    "text-heading-xs-font-family": { value: _("font-family-sans") },
    "text-heading-xs-font-size": { value: _("font-size-300") },
    "text-heading-xs-font-weight": { value: _("font-weight-semibold") },
    "text-heading-xs-font-letter-spacing": { value: _("font-letter-spacing-normal") },
    "text-heading-xs-font-line-height": { value: _("font-line-height-400") },
    "text-body-lg-font-family": { value: _("font-family-sans") },
    "text-body-lg-font-size": { value: _("font-size-350") },
    "text-body-lg-font-weight": { value: _("font-weight-regular") },
    "text-body-lg-font-letter-spacing": { value: _("font-letter-spacing-normal") },
    "text-body-lg-font-line-height": { value: _("font-line-height-500") },
    "text-body-md-font-family": { value: _("font-family-sans") },
    "text-body-md-font-size": { value: _("font-size-325") },
    "text-body-md-font-weight": { value: _("font-weight-regular") },
    "text-body-md-font-letter-spacing": { value: _("font-letter-spacing-normal") },
    "text-body-md-font-line-height": { value: _("font-line-height-500") },
    "text-body-sm-font-family": { value: _("font-family-sans") },
    "text-body-sm-font-size": { value: _("font-size-300") },
    "text-body-sm-font-weight": { value: _("font-weight-regular") },
    "text-body-sm-font-letter-spacing": { value: _("font-letter-spacing-normal") },
    "text-body-sm-font-line-height": { value: _("font-line-height-400") },
    "text-body-xs-font-family": { value: _("font-family-sans") },
    "text-body-xs-font-size": { value: _("font-size-275") },
    "text-body-xs-font-weight": { value: _("font-weight-regular") },
    "text-body-xs-font-letter-spacing": { value: _("font-letter-spacing-normal") },
    "text-body-xs-font-line-height": { value: _("font-line-height-300") },
  },
  cb = {
    "width-0": { value: O[0] },
    "width-025": { value: O["025"] },
    "width-050": { value: O["050"] },
    "width-100": { value: O[100] },
    "width-150": { value: O[150] },
    "width-200": { value: O[200] },
    "width-300": { value: O[300] },
    "width-400": { value: O[400] },
    "width-500": { value: O[500] },
    "width-600": { value: O[600] },
    "width-700": { value: O[700] },
    "width-800": { value: O[800] },
    "width-900": { value: O[900] },
    "width-1000": { value: O[1e3] },
    "width-1200": { value: O[1200] },
    "width-1600": { value: O[1600] },
    "width-2000": { value: O[2e3] },
    "width-2400": { value: O[2400] },
    "width-2800": { value: O[2800] },
    "width-3200": { value: O[3200] },
  },
  pb = {
    "z-index-0": { value: "auto" },
    "z-index-1": { value: "100" },
    "z-index-2": { value: "400" },
    "z-index-3": { value: "510" },
    "z-index-4": { value: "512" },
    "z-index-5": { value: "513" },
    "z-index-6": { value: "514" },
    "z-index-7": { value: "515" },
    "z-index-8": { value: "516" },
    "z-index-9": { value: "517" },
    "z-index-10": { value: "518" },
    "z-index-11": { value: "519" },
    "z-index-12": { value: "520" },
  },
  cm = $h({
    border: nb,
    breakpoints: Th,
    color: ab,
    font: rb,
    height: ob,
    motion: sb,
    shadow: lb,
    space: db,
    text: ub,
    width: cb,
    zIndex: pb,
  });
function ud(e) {
  return Object.fromEntries(
    Object.entries(e).map(function (t) {
      var i = dd(t, 2),
        n = i[0],
        a = i[1];
      return [n, a && dm.includes(n) ? sm(a) : a];
    })
  );
}
function dl(e) {
  return ib(cm, e);
}
function pm(e) {
  return "p-theme-" + e;
}
function fm(e) {
  var t = new Set(qh(e));
  return function (i) {
    return t.has(i);
  };
}
fm(cm);
var mm = "light",
  bs = mm,
  fb = [mm, "light-mobile", "light-high-contrast-experimental", "dark-experimental"],
  ym = ud({});
dl(ym);
var gm = ud({
  color: {
    "color-text": { value: N[16] },
    "color-text-secondary": { value: N[16] },
    "color-text-brand": { value: N[16] },
    "color-icon-secondary": { value: N[14] },
    "color-border": { value: N[12] },
    "color-input-border": { value: N[14] },
    "color-border-secondary": { value: N[12] },
    "color-bg-surface-secondary": { value: N[6] },
  },
  shadow: {
    "shadow-bevel-100": {
      value:
        "0px 1px 0px 0px rgba(26, 26, 26, 0.07), 0px 1px 0px 0px rgba(208, 208, 208, 0.40) inset, 1px 0px 0px 0px #CCC inset, -1px 0px 0px 0px #CCC inset, 0px -1px 0px 0px #999 inset",
    },
  },
});
dl(gm);
var Od = "0 0 0 " + _("border-width-025") + " " + _("color-border") + " inset",
  hm = ud({
    color: { "color-button-gradient-bg-fill": { value: "none" } },
    shadow: {
      "shadow-100": { value: "none" },
      "shadow-bevel-100": { value: "none" },
      "shadow-button": { value: Od },
      "shadow-button-hover": { value: Od },
      "shadow-button-inset": { value: Od },
      "shadow-button-primary": { value: "none" },
      "shadow-button-primary-hover": { value: "none" },
      "shadow-button-primary-inset": { value: "none" },
      "shadow-button-primary-critical": { value: "none" },
      "shadow-button-primary-critical-hover": { value: "none" },
      "shadow-button-primary-critical-inset": { value: "none" },
      "shadow-button-primary-success": { value: "none" },
      "shadow-button-primary-success-hover": { value: "none" },
      "shadow-button-primary-success-inset": { value: "none" },
    },
    space: { "space-card-gap": { value: _("space-200") } },
    text: {
      "text-heading-2xl-font-size": { value: _("font-size-800") },
      "text-heading-xl-font-size": { value: _("font-size-550") },
      "text-heading-xl-font-line-height": { value: _("font-line-height-700") },
      "text-heading-lg-font-size": { value: _("font-size-450") },
      "text-heading-md-font-size": { value: _("font-size-400") },
      "text-heading-sm-font-size": { value: _("font-size-350") },
      "text-body-lg-font-size": { value: _("font-size-450") },
      "text-body-lg-font-line-height": { value: _("font-line-height-700") },
      "text-body-md-font-size": { value: _("font-size-400") },
      "text-body-md-font-line-height": { value: _("font-line-height-600") },
      "text-body-sm-font-size": { value: _("font-size-350") },
      "text-body-sm-font-line-height": { value: _("font-line-height-500") },
      "text-body-xs-font-size": { value: _("font-size-300") },
      "text-body-xs-font-line-height": { value: _("font-line-height-400") },
    },
  });
dl(hm);
var bm = ud({
  color: {
    "color-scheme": { value: "dark" },
    "color-bg": { value: N[16] },
    "color-bg-surface": { value: N[15] },
    "color-bg-fill": { value: N[15] },
    "color-icon": { value: N[8] },
    "color-icon-secondary": { value: N[12] },
    "color-text": { value: N[8] },
    "color-text-secondary": { value: N[11] },
    "color-bg-surface-secondary-active": { value: N[13] },
    "color-bg-surface-secondary-hover": { value: N[14] },
    "color-bg-fill-transparent": { value: Gn[8] },
    "color-bg-fill-brand": { value: N[1] },
    "color-text-brand-on-bg-fill": { value: N[15] },
    "color-bg-surface-hover": { value: N[14] },
    "color-bg-fill-hover": { value: N[14] },
    "color-bg-fill-transparent-hover": { value: Gn[9] },
    "color-bg-fill-brand-hover": { value: N[5] },
    "color-bg-surface-selected": { value: N[13] },
    "color-bg-fill-selected": { value: N[13] },
    "color-bg-fill-transparent-selected": { value: Gn[11] },
    "color-bg-fill-brand-selected": { value: N[9] },
    "color-bg-surface-active": { value: N[13] },
    "color-bg-fill-active": { value: N[13] },
    "color-bg-fill-transparent-active": { value: Gn[10] },
    "color-bg-fill-brand-active": { value: N[4] },
    "color-bg-surface-brand-selected": { value: N[14] },
    "color-border-secondary": { value: N[13] },
    "color-tooltip-tail-down-border-experimental": { value: "rgba(60, 60, 60, 1)" },
    "color-tooltip-tail-up-border-experimental": { value: "rgba(71, 71, 71, 1)" },
    "color-border-gradient-experimental": { value: "linear-gradient(to bottom, " + Gn[9] + ", " + Gn[4] + ")" },
    "color-border-gradient-hover-experimental": { value: "linear-gradient(to bottom, " + Gn[9] + ", " + Gn[4] + ")" },
    "color-border-gradient-selected-experimental": { value: "linear-gradient(to bottom, " + Ht[10] + ", " + Gn[10] + ")" },
    "color-border-gradient-active-experimental": { value: "linear-gradient(to bottom, " + Gn[10] + ", " + Gn[4] + ")" },
  },
  shadow: {
    "shadow-bevel-100": {
      value:
        "1px 0px 0px 0px rgba(204, 204, 204, 0.08) inset, -1px 0px 0px 0px rgba(204, 204, 204, 0.08) inset, 0px -1px 0px 0px rgba(204, 204, 204, 0.08) inset, 0px 1px 0px 0px rgba(204, 204, 204, 0.16) inset",
    },
  },
});
dl(bm);
var mb = { light: ym, "light-mobile": hm, "light-high-contrast-experimental": gm, "dark-experimental": bm },
  yb = mb[bs];
dl(yb);
var Zu = {
    light: {
      border: {
        "border-radius-0": "0rem",
        "border-radius-050": "0.125rem",
        "border-radius-100": "0.25rem",
        "border-radius-150": "0.375rem",
        "border-radius-200": "0.5rem",
        "border-radius-300": "0.75rem",
        "border-radius-400": "1rem",
        "border-radius-500": "1.25rem",
        "border-radius-750": "1.875rem",
        "border-radius-full": "624.9375rem",
        "border-width-0": "0rem",
        "border-width-0165": "0.04125rem",
        "border-width-025": "0.0625rem",
        "border-width-050": "0.125rem",
        "border-width-100": "0.25rem",
      },
      breakpoints: {
        "breakpoints-xs": "0rem",
        "breakpoints-sm": "30.625rem",
        "breakpoints-md": "48rem",
        "breakpoints-lg": "65rem",
        "breakpoints-xl": "90rem",
      },
      color: {
        "color-scheme": "light",
        "color-bg": "rgba(241, 241, 241, 1)",
        "color-bg-inverse": "rgba(26, 26, 26, 1)",
        "color-bg-surface": "rgba(255, 255, 255, 1)",
        "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
        "color-bg-surface-active": "rgba(243, 243, 243, 1)",
        "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
        "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
        "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
        "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
        "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
        "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-info": "rgba(234, 244, 255, 1)",
        "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
        "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
        "color-bg-surface-success": "rgba(205, 254, 225, 1)",
        "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
        "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
        "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
        "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
        "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
        "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
        "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
        "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
        "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
        "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
        "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
        "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
        "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
        "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
        "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
        "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
        "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
        "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
        "color-bg-fill": "rgba(255, 255, 255, 1)",
        "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
        "color-bg-fill-active": "rgba(247, 247, 247, 1)",
        "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
        "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
        "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
        "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
        "color-bg-fill-info": "rgba(145, 208, 255, 1)",
        "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
        "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
        "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
        "color-bg-fill-success": "rgba(41, 132, 90, 1)",
        "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
        "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
        "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
        "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
        "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
        "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
        "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
        "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
        "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
        "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
        "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
        "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
        "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
        "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
        "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
        "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
        "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
        "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
        "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
        "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
        "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
        "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
        "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
        "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
        "color-text": "rgba(48, 48, 48, 1)",
        "color-text-secondary": "rgba(97, 97, 97, 1)",
        "color-text-disabled": "rgba(181, 181, 181, 1)",
        "color-text-link": "rgba(0, 91, 211, 1)",
        "color-text-link-hover": "rgba(0, 66, 153, 1)",
        "color-text-link-active": "rgba(0, 46, 106, 1)",
        "color-text-brand": "rgba(74, 74, 74, 1)",
        "color-text-brand-hover": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
        "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
        "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
        "color-text-info": "rgba(0, 58, 90, 1)",
        "color-text-info-hover": "rgba(0, 58, 90, 1)",
        "color-text-info-active": "rgba(0, 33, 51, 1)",
        "color-text-info-secondary": "rgba(0, 124, 180, 1)",
        "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-text-success": "rgba(12, 81, 50, 1)",
        "color-text-success-hover": "rgba(8, 61, 37, 1)",
        "color-text-success-active": "rgba(9, 42, 27, 1)",
        "color-text-success-secondary": "rgba(41, 132, 90, 1)",
        "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
        "color-text-caution": "rgba(79, 71, 0, 1)",
        "color-text-caution-hover": "rgba(51, 46, 0, 1)",
        "color-text-caution-active": "rgba(31, 28, 0, 1)",
        "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
        "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
        "color-text-warning": "rgba(94, 66, 0, 1)",
        "color-text-warning-hover": "rgba(65, 45, 0, 1)",
        "color-text-warning-active": "rgba(37, 26, 0, 1)",
        "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
        "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
        "color-text-critical": "rgba(142, 31, 11, 1)",
        "color-text-critical-hover": "rgba(95, 21, 7, 1)",
        "color-text-critical-active": "rgba(47, 10, 4, 1)",
        "color-text-critical-secondary": "rgba(229, 28, 0, 1)",
        "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
        "color-text-emphasis": "rgba(0, 91, 211, 1)",
        "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
        "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
        "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
        "color-text-magic": "rgba(87, 0, 209, 1)",
        "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
        "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
        "color-text-inverse": "rgba(227, 227, 227, 1)",
        "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
        "color-text-link-inverse": "rgba(197, 208, 255, 1)",
        "color-border": "rgba(227, 227, 227, 1)",
        "color-border-hover": "rgba(204, 204, 204, 1)",
        "color-border-disabled": "rgba(235, 235, 235, 1)",
        "color-border-secondary": "rgba(235, 235, 235, 1)",
        "color-border-tertiary": "rgba(204, 204, 204, 1)",
        "color-border-focus": "rgba(0, 91, 211, 1)",
        "color-border-brand": "rgba(227, 227, 227, 1)",
        "color-border-info": "rgba(168, 216, 255, 1)",
        "color-border-success": "rgba(146, 254, 194, 1)",
        "color-border-caution": "rgba(255, 235, 120, 1)",
        "color-border-warning": "rgba(255, 200, 121, 1)",
        "color-border-critical": "rgba(254, 195, 193, 1)",
        "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
        "color-border-emphasis": "rgba(0, 91, 211, 1)",
        "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-border-magic": "rgba(228, 222, 255, 1)",
        "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
        "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
        "color-border-inverse": "rgba(97, 97, 97, 1)",
        "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
        "color-border-inverse-active": "rgba(227, 227, 227, 1)",
        "color-tooltip-tail-down-border-experimental": "rgba(212, 212, 212, 1)",
        "color-tooltip-tail-up-border-experimental": "rgba(227, 227, 227, 1)",
        "color-border-gradient-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-hover-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-selected-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-active-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-icon": "rgba(74, 74, 74, 1)",
        "color-icon-hover": "rgba(48, 48, 48, 1)",
        "color-icon-active": "rgba(26, 26, 26, 1)",
        "color-icon-disabled": "rgba(204, 204, 204, 1)",
        "color-icon-secondary": "rgba(138, 138, 138, 1)",
        "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
        "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
        "color-icon-brand": "rgba(26, 26, 26, 1)",
        "color-icon-info": "rgba(0, 148, 213, 1)",
        "color-icon-success": "rgba(41, 132, 90, 1)",
        "color-icon-caution": "rgba(153, 138, 0, 1)",
        "color-icon-warning": "rgba(178, 132, 0, 1)",
        "color-icon-critical": "rgba(239, 77, 47, 1)",
        "color-icon-emphasis": "rgba(0, 91, 211, 1)",
        "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-icon-magic": "rgba(128, 81, 255, 1)",
        "color-icon-inverse": "rgba(227, 227, 227, 1)",
        "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
        "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
        "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
        "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
        "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
        "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
        "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
        "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
        "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
        "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
        "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
        "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
        "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
        "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
        "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
        "color-button-gradient-bg-fill": "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)",
        "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-input-bg-surface": "rgba(253, 253, 253, 1)",
        "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
        "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
        "color-input-border": "rgba(138, 138, 138, 1)",
        "color-input-border-hover": "rgba(97, 97, 97, 1)",
        "color-input-border-active": "rgba(26, 26, 26, 1)",
        "color-nav-bg": "rgba(235, 235, 235, 1)",
        "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
        "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
        "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
        "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
        "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
        "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
        "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)",
      },
      font: {
        "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        "font-size-275": "0.6875rem",
        "font-size-300": "0.75rem",
        "font-size-325": "0.8125rem",
        "font-size-350": "0.875rem",
        "font-size-400": "1rem",
        "font-size-450": "1.125rem",
        "font-size-500": "1.25rem",
        "font-size-550": "1.375rem",
        "font-size-600": "1.5rem",
        "font-size-750": "1.875rem",
        "font-size-800": "2rem",
        "font-size-900": "2.25rem",
        "font-size-1000": "2.5rem",
        "font-weight-regular": "450",
        "font-weight-medium": "550",
        "font-weight-semibold": "650",
        "font-weight-bold": "700",
        "font-letter-spacing-densest": "-0.03375rem",
        "font-letter-spacing-denser": "-0.01875rem",
        "font-letter-spacing-dense": "-0.0125rem",
        "font-letter-spacing-normal": "0rem",
        "font-line-height-300": "0.75rem",
        "font-line-height-400": "1rem",
        "font-line-height-500": "1.25rem",
        "font-line-height-600": "1.5rem",
        "font-line-height-700": "1.75rem",
        "font-line-height-800": "2rem",
        "font-line-height-1000": "2.5rem",
        "font-line-height-1200": "3rem",
      },
      height: {
        "height-0": "0rem",
        "height-025": "0.0625rem",
        "height-050": "0.125rem",
        "height-100": "0.25rem",
        "height-150": "0.375rem",
        "height-200": "0.5rem",
        "height-300": "0.75rem",
        "height-400": "1rem",
        "height-500": "1.25rem",
        "height-600": "1.5rem",
        "height-700": "1.75rem",
        "height-800": "2rem",
        "height-900": "2.25rem",
        "height-1000": "2.5rem",
        "height-1200": "3rem",
        "height-1600": "4rem",
        "height-2000": "5rem",
        "height-2400": "6rem",
        "height-2800": "7rem",
        "height-3200": "8rem",
      },
      motion: {
        "motion-duration-0": "0ms",
        "motion-duration-50": "50ms",
        "motion-duration-100": "100ms",
        "motion-duration-150": "150ms",
        "motion-duration-200": "200ms",
        "motion-duration-250": "250ms",
        "motion-duration-300": "300ms",
        "motion-duration-350": "350ms",
        "motion-duration-400": "400ms",
        "motion-duration-450": "450ms",
        "motion-duration-500": "500ms",
        "motion-duration-5000": "5000ms",
        "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
        "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
        "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
        "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
        "motion-linear": "cubic-bezier(0, 0, 1, 1)",
        "motion-keyframes-bounce":
          "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
        "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
        "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
        "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
        "motion-keyframes-appear-above":
          "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
        "motion-keyframes-appear-below":
          "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }",
      },
      shadow: {
        "shadow-0": "none",
        "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
        "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
        "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
        "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
        "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
        "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
        "shadow-bevel-100":
          "0.0625rem 0rem 0rem 0rem rgba(0, 0, 0, 0.13) inset, -0.0625rem 0rem 0rem 0rem rgba(0, 0, 0, 0.13) inset, 0rem -0.0625rem 0rem 0rem rgba(0, 0, 0, 0.17) inset, 0rem 0.0625rem 0rem 0rem rgba(204, 204, 204, 0.5) inset",
        "shadow-inset-100":
          "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
        "shadow-inset-200":
          "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
        "shadow-button":
          "0rem -0.0625rem 0rem 0rem #b5b5b5 inset, 0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.1) inset, 0rem 0.03125rem 0rem 0.09375rem #FFF inset",
        "shadow-button-hover":
          "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
        "shadow-button-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.2) inset",
        "shadow-button-primary":
          "0rem -0.0625rem 0rem 0.0625rem rgba(0, 0, 0, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(48, 48, 48, 1) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.25) inset;",
        "shadow-button-primary-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
        "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem rgb(0, 0, 0) inset",
        "shadow-button-primary-critical":
          "0rem -0.0625rem 0rem 0.0625rem rgba(142, 31, 11, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(181, 38, 11, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.349) inset",
        "shadow-button-primary-critical-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-critical-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-button-primary-success":
          "0rem -0.0625rem 0rem 0.0625rem rgba(12, 81, 50, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(19, 111, 69, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.251) inset",
        "shadow-button-primary-success-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-success-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset",
      },
      space: {
        "space-0": "0rem",
        "space-025": "0.0625rem",
        "space-050": "0.125rem",
        "space-100": "0.25rem",
        "space-150": "0.375rem",
        "space-200": "0.5rem",
        "space-300": "0.75rem",
        "space-400": "1rem",
        "space-500": "1.25rem",
        "space-600": "1.5rem",
        "space-800": "2rem",
        "space-1000": "2.5rem",
        "space-1200": "3rem",
        "space-1600": "4rem",
        "space-2000": "5rem",
        "space-2400": "6rem",
        "space-2800": "7rem",
        "space-3200": "8rem",
        "space-button-group-gap": "0.5rem",
        "space-card-gap": "1rem",
        "space-card-padding": "1rem",
        "space-table-cell-padding": "0.375rem",
      },
      text: {
        "text-heading-3xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-3xl-font-size": "2.25rem",
        "text-heading-3xl-font-weight": "700",
        "text-heading-3xl-font-letter-spacing": "-0.03375rem",
        "text-heading-3xl-font-line-height": "3rem",
        "text-heading-2xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-2xl-font-size": "1.875rem",
        "text-heading-2xl-font-weight": "700",
        "text-heading-2xl-font-letter-spacing": "-0.01875rem",
        "text-heading-2xl-font-line-height": "2.5rem",
        "text-heading-xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xl-font-size": "1.5rem",
        "text-heading-xl-font-weight": "700",
        "text-heading-xl-font-letter-spacing": "-0.0125rem",
        "text-heading-xl-font-line-height": "2rem",
        "text-heading-lg-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-lg-font-size": "1.25rem",
        "text-heading-lg-font-weight": "650",
        "text-heading-lg-font-letter-spacing": "-0.0125rem",
        "text-heading-lg-font-line-height": "1.5rem",
        "text-heading-md-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-md-font-size": "0.875rem",
        "text-heading-md-font-weight": "650",
        "text-heading-md-font-letter-spacing": "0rem",
        "text-heading-md-font-line-height": "1.25rem",
        "text-heading-sm-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-sm-font-size": "0.8125rem",
        "text-heading-sm-font-weight": "650",
        "text-heading-sm-font-letter-spacing": "0rem",
        "text-heading-sm-font-line-height": "1.25rem",
        "text-heading-xs-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xs-font-size": "0.75rem",
        "text-heading-xs-font-weight": "650",
        "text-heading-xs-font-letter-spacing": "0rem",
        "text-heading-xs-font-line-height": "1rem",
        "text-body-lg-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-lg-font-size": "0.875rem",
        "text-body-lg-font-weight": "450",
        "text-body-lg-font-letter-spacing": "0rem",
        "text-body-lg-font-line-height": "1.25rem",
        "text-body-md-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-md-font-size": "0.8125rem",
        "text-body-md-font-weight": "450",
        "text-body-md-font-letter-spacing": "0rem",
        "text-body-md-font-line-height": "1.25rem",
        "text-body-sm-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-sm-font-size": "0.75rem",
        "text-body-sm-font-weight": "450",
        "text-body-sm-font-letter-spacing": "0rem",
        "text-body-sm-font-line-height": "1rem",
        "text-body-xs-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-xs-font-size": "0.6875rem",
        "text-body-xs-font-weight": "450",
        "text-body-xs-font-letter-spacing": "0rem",
        "text-body-xs-font-line-height": "0.75rem",
      },
      width: {
        "width-0": "0rem",
        "width-025": "0.0625rem",
        "width-050": "0.125rem",
        "width-100": "0.25rem",
        "width-150": "0.375rem",
        "width-200": "0.5rem",
        "width-300": "0.75rem",
        "width-400": "1rem",
        "width-500": "1.25rem",
        "width-600": "1.5rem",
        "width-700": "1.75rem",
        "width-800": "2rem",
        "width-900": "2.25rem",
        "width-1000": "2.5rem",
        "width-1200": "3rem",
        "width-1600": "4rem",
        "width-2000": "5rem",
        "width-2400": "6rem",
        "width-2800": "7rem",
        "width-3200": "8rem",
      },
      zIndex: {
        "z-index-0": "auto",
        "z-index-1": "100",
        "z-index-2": "400",
        "z-index-3": "510",
        "z-index-4": "512",
        "z-index-5": "513",
        "z-index-6": "514",
        "z-index-7": "515",
        "z-index-8": "516",
        "z-index-9": "517",
        "z-index-10": "518",
        "z-index-11": "519",
        "z-index-12": "520",
      },
    },
    "light-mobile": {
      border: {
        "border-radius-0": "0rem",
        "border-radius-050": "0.125rem",
        "border-radius-100": "0.25rem",
        "border-radius-150": "0.375rem",
        "border-radius-200": "0.5rem",
        "border-radius-300": "0.75rem",
        "border-radius-400": "1rem",
        "border-radius-500": "1.25rem",
        "border-radius-750": "1.875rem",
        "border-radius-full": "624.9375rem",
        "border-width-0": "0rem",
        "border-width-0165": "0.04125rem",
        "border-width-025": "0.0625rem",
        "border-width-050": "0.125rem",
        "border-width-100": "0.25rem",
      },
      breakpoints: {
        "breakpoints-xs": "0rem",
        "breakpoints-sm": "30.625rem",
        "breakpoints-md": "48rem",
        "breakpoints-lg": "65rem",
        "breakpoints-xl": "90rem",
      },
      color: {
        "color-scheme": "light",
        "color-bg": "rgba(241, 241, 241, 1)",
        "color-bg-inverse": "rgba(26, 26, 26, 1)",
        "color-bg-surface": "rgba(255, 255, 255, 1)",
        "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
        "color-bg-surface-active": "rgba(243, 243, 243, 1)",
        "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
        "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
        "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
        "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
        "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
        "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-info": "rgba(234, 244, 255, 1)",
        "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
        "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
        "color-bg-surface-success": "rgba(205, 254, 225, 1)",
        "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
        "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
        "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
        "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
        "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
        "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
        "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
        "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
        "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
        "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
        "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
        "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
        "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
        "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
        "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
        "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
        "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
        "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
        "color-bg-fill": "rgba(255, 255, 255, 1)",
        "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
        "color-bg-fill-active": "rgba(247, 247, 247, 1)",
        "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
        "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
        "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
        "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
        "color-bg-fill-info": "rgba(145, 208, 255, 1)",
        "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
        "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
        "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
        "color-bg-fill-success": "rgba(41, 132, 90, 1)",
        "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
        "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
        "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
        "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
        "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
        "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
        "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
        "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
        "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
        "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
        "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
        "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
        "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
        "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
        "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
        "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
        "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
        "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
        "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
        "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
        "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
        "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
        "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
        "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
        "color-text": "rgba(48, 48, 48, 1)",
        "color-text-secondary": "rgba(97, 97, 97, 1)",
        "color-text-disabled": "rgba(181, 181, 181, 1)",
        "color-text-link": "rgba(0, 91, 211, 1)",
        "color-text-link-hover": "rgba(0, 66, 153, 1)",
        "color-text-link-active": "rgba(0, 46, 106, 1)",
        "color-text-brand": "rgba(74, 74, 74, 1)",
        "color-text-brand-hover": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
        "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
        "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
        "color-text-info": "rgba(0, 58, 90, 1)",
        "color-text-info-hover": "rgba(0, 58, 90, 1)",
        "color-text-info-active": "rgba(0, 33, 51, 1)",
        "color-text-info-secondary": "rgba(0, 124, 180, 1)",
        "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-text-success": "rgba(12, 81, 50, 1)",
        "color-text-success-hover": "rgba(8, 61, 37, 1)",
        "color-text-success-active": "rgba(9, 42, 27, 1)",
        "color-text-success-secondary": "rgba(41, 132, 90, 1)",
        "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
        "color-text-caution": "rgba(79, 71, 0, 1)",
        "color-text-caution-hover": "rgba(51, 46, 0, 1)",
        "color-text-caution-active": "rgba(31, 28, 0, 1)",
        "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
        "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
        "color-text-warning": "rgba(94, 66, 0, 1)",
        "color-text-warning-hover": "rgba(65, 45, 0, 1)",
        "color-text-warning-active": "rgba(37, 26, 0, 1)",
        "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
        "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
        "color-text-critical": "rgba(142, 31, 11, 1)",
        "color-text-critical-hover": "rgba(95, 21, 7, 1)",
        "color-text-critical-active": "rgba(47, 10, 4, 1)",
        "color-text-critical-secondary": "rgba(229, 28, 0, 1)",
        "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
        "color-text-emphasis": "rgba(0, 91, 211, 1)",
        "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
        "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
        "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
        "color-text-magic": "rgba(87, 0, 209, 1)",
        "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
        "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
        "color-text-inverse": "rgba(227, 227, 227, 1)",
        "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
        "color-text-link-inverse": "rgba(197, 208, 255, 1)",
        "color-border": "rgba(227, 227, 227, 1)",
        "color-border-hover": "rgba(204, 204, 204, 1)",
        "color-border-disabled": "rgba(235, 235, 235, 1)",
        "color-border-secondary": "rgba(235, 235, 235, 1)",
        "color-border-tertiary": "rgba(204, 204, 204, 1)",
        "color-border-focus": "rgba(0, 91, 211, 1)",
        "color-border-brand": "rgba(227, 227, 227, 1)",
        "color-border-info": "rgba(168, 216, 255, 1)",
        "color-border-success": "rgba(146, 254, 194, 1)",
        "color-border-caution": "rgba(255, 235, 120, 1)",
        "color-border-warning": "rgba(255, 200, 121, 1)",
        "color-border-critical": "rgba(254, 195, 193, 1)",
        "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
        "color-border-emphasis": "rgba(0, 91, 211, 1)",
        "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-border-magic": "rgba(228, 222, 255, 1)",
        "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
        "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
        "color-border-inverse": "rgba(97, 97, 97, 1)",
        "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
        "color-border-inverse-active": "rgba(227, 227, 227, 1)",
        "color-tooltip-tail-down-border-experimental": "rgba(212, 212, 212, 1)",
        "color-tooltip-tail-up-border-experimental": "rgba(227, 227, 227, 1)",
        "color-border-gradient-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-hover-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-selected-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-active-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-icon": "rgba(74, 74, 74, 1)",
        "color-icon-hover": "rgba(48, 48, 48, 1)",
        "color-icon-active": "rgba(26, 26, 26, 1)",
        "color-icon-disabled": "rgba(204, 204, 204, 1)",
        "color-icon-secondary": "rgba(138, 138, 138, 1)",
        "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
        "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
        "color-icon-brand": "rgba(26, 26, 26, 1)",
        "color-icon-info": "rgba(0, 148, 213, 1)",
        "color-icon-success": "rgba(41, 132, 90, 1)",
        "color-icon-caution": "rgba(153, 138, 0, 1)",
        "color-icon-warning": "rgba(178, 132, 0, 1)",
        "color-icon-critical": "rgba(239, 77, 47, 1)",
        "color-icon-emphasis": "rgba(0, 91, 211, 1)",
        "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-icon-magic": "rgba(128, 81, 255, 1)",
        "color-icon-inverse": "rgba(227, 227, 227, 1)",
        "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
        "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
        "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
        "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
        "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
        "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
        "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
        "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
        "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
        "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
        "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
        "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
        "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
        "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
        "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
        "color-button-gradient-bg-fill": "none",
        "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-input-bg-surface": "rgba(253, 253, 253, 1)",
        "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
        "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
        "color-input-border": "rgba(138, 138, 138, 1)",
        "color-input-border-hover": "rgba(97, 97, 97, 1)",
        "color-input-border-active": "rgba(26, 26, 26, 1)",
        "color-nav-bg": "rgba(235, 235, 235, 1)",
        "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
        "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
        "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
        "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
        "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
        "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
        "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)",
      },
      font: {
        "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        "font-size-275": "0.6875rem",
        "font-size-300": "0.75rem",
        "font-size-325": "0.8125rem",
        "font-size-350": "0.875rem",
        "font-size-400": "1rem",
        "font-size-450": "1.125rem",
        "font-size-500": "1.25rem",
        "font-size-550": "1.375rem",
        "font-size-600": "1.5rem",
        "font-size-750": "1.875rem",
        "font-size-800": "2rem",
        "font-size-900": "2.25rem",
        "font-size-1000": "2.5rem",
        "font-weight-regular": "450",
        "font-weight-medium": "550",
        "font-weight-semibold": "650",
        "font-weight-bold": "700",
        "font-letter-spacing-densest": "-0.03375rem",
        "font-letter-spacing-denser": "-0.01875rem",
        "font-letter-spacing-dense": "-0.0125rem",
        "font-letter-spacing-normal": "0rem",
        "font-line-height-300": "0.75rem",
        "font-line-height-400": "1rem",
        "font-line-height-500": "1.25rem",
        "font-line-height-600": "1.5rem",
        "font-line-height-700": "1.75rem",
        "font-line-height-800": "2rem",
        "font-line-height-1000": "2.5rem",
        "font-line-height-1200": "3rem",
      },
      height: {
        "height-0": "0rem",
        "height-025": "0.0625rem",
        "height-050": "0.125rem",
        "height-100": "0.25rem",
        "height-150": "0.375rem",
        "height-200": "0.5rem",
        "height-300": "0.75rem",
        "height-400": "1rem",
        "height-500": "1.25rem",
        "height-600": "1.5rem",
        "height-700": "1.75rem",
        "height-800": "2rem",
        "height-900": "2.25rem",
        "height-1000": "2.5rem",
        "height-1200": "3rem",
        "height-1600": "4rem",
        "height-2000": "5rem",
        "height-2400": "6rem",
        "height-2800": "7rem",
        "height-3200": "8rem",
      },
      motion: {
        "motion-duration-0": "0ms",
        "motion-duration-50": "50ms",
        "motion-duration-100": "100ms",
        "motion-duration-150": "150ms",
        "motion-duration-200": "200ms",
        "motion-duration-250": "250ms",
        "motion-duration-300": "300ms",
        "motion-duration-350": "350ms",
        "motion-duration-400": "400ms",
        "motion-duration-450": "450ms",
        "motion-duration-500": "500ms",
        "motion-duration-5000": "5000ms",
        "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
        "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
        "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
        "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
        "motion-linear": "cubic-bezier(0, 0, 1, 1)",
        "motion-keyframes-bounce":
          "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
        "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
        "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
        "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
        "motion-keyframes-appear-above":
          "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
        "motion-keyframes-appear-below":
          "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }",
      },
      shadow: {
        "shadow-0": "none",
        "shadow-100": "none",
        "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
        "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
        "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
        "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
        "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
        "shadow-bevel-100": "none",
        "shadow-inset-100":
          "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
        "shadow-inset-200":
          "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
        "shadow-button": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
        "shadow-button-hover": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
        "shadow-button-inset": "0 0 0 var(--p-border-width-025) var(--p-color-border) inset",
        "shadow-button-primary": "none",
        "shadow-button-primary-hover": "none",
        "shadow-button-primary-inset": "none",
        "shadow-button-primary-critical": "none",
        "shadow-button-primary-critical-hover": "none",
        "shadow-button-primary-critical-inset": "none",
        "shadow-button-primary-success": "none",
        "shadow-button-primary-success-hover": "none",
        "shadow-button-primary-success-inset": "none",
        "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset",
      },
      space: {
        "space-0": "0rem",
        "space-025": "0.0625rem",
        "space-050": "0.125rem",
        "space-100": "0.25rem",
        "space-150": "0.375rem",
        "space-200": "0.5rem",
        "space-300": "0.75rem",
        "space-400": "1rem",
        "space-500": "1.25rem",
        "space-600": "1.5rem",
        "space-800": "2rem",
        "space-1000": "2.5rem",
        "space-1200": "3rem",
        "space-1600": "4rem",
        "space-2000": "5rem",
        "space-2400": "6rem",
        "space-2800": "7rem",
        "space-3200": "8rem",
        "space-button-group-gap": "0.5rem",
        "space-card-gap": "0.5rem",
        "space-card-padding": "1rem",
        "space-table-cell-padding": "0.375rem",
      },
      text: {
        "text-heading-3xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-3xl-font-size": "2.25rem",
        "text-heading-3xl-font-weight": "700",
        "text-heading-3xl-font-letter-spacing": "-0.03375rem",
        "text-heading-3xl-font-line-height": "3rem",
        "text-heading-2xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-2xl-font-size": "2rem",
        "text-heading-2xl-font-weight": "700",
        "text-heading-2xl-font-letter-spacing": "-0.01875rem",
        "text-heading-2xl-font-line-height": "2.5rem",
        "text-heading-xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xl-font-size": "1.375rem",
        "text-heading-xl-font-weight": "700",
        "text-heading-xl-font-letter-spacing": "-0.0125rem",
        "text-heading-xl-font-line-height": "1.75rem",
        "text-heading-lg-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-lg-font-size": "1.125rem",
        "text-heading-lg-font-weight": "650",
        "text-heading-lg-font-letter-spacing": "-0.0125rem",
        "text-heading-lg-font-line-height": "1.5rem",
        "text-heading-md-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-md-font-size": "1rem",
        "text-heading-md-font-weight": "650",
        "text-heading-md-font-letter-spacing": "0rem",
        "text-heading-md-font-line-height": "1.25rem",
        "text-heading-sm-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-sm-font-size": "0.875rem",
        "text-heading-sm-font-weight": "650",
        "text-heading-sm-font-letter-spacing": "0rem",
        "text-heading-sm-font-line-height": "1.25rem",
        "text-heading-xs-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xs-font-size": "0.75rem",
        "text-heading-xs-font-weight": "650",
        "text-heading-xs-font-letter-spacing": "0rem",
        "text-heading-xs-font-line-height": "1rem",
        "text-body-lg-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-lg-font-size": "1.125rem",
        "text-body-lg-font-weight": "450",
        "text-body-lg-font-letter-spacing": "0rem",
        "text-body-lg-font-line-height": "1.75rem",
        "text-body-md-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-md-font-size": "1rem",
        "text-body-md-font-weight": "450",
        "text-body-md-font-letter-spacing": "0rem",
        "text-body-md-font-line-height": "1.5rem",
        "text-body-sm-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-sm-font-size": "0.875rem",
        "text-body-sm-font-weight": "450",
        "text-body-sm-font-letter-spacing": "0rem",
        "text-body-sm-font-line-height": "1.25rem",
        "text-body-xs-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-xs-font-size": "0.75rem",
        "text-body-xs-font-weight": "450",
        "text-body-xs-font-letter-spacing": "0rem",
        "text-body-xs-font-line-height": "1rem",
      },
      width: {
        "width-0": "0rem",
        "width-025": "0.0625rem",
        "width-050": "0.125rem",
        "width-100": "0.25rem",
        "width-150": "0.375rem",
        "width-200": "0.5rem",
        "width-300": "0.75rem",
        "width-400": "1rem",
        "width-500": "1.25rem",
        "width-600": "1.5rem",
        "width-700": "1.75rem",
        "width-800": "2rem",
        "width-900": "2.25rem",
        "width-1000": "2.5rem",
        "width-1200": "3rem",
        "width-1600": "4rem",
        "width-2000": "5rem",
        "width-2400": "6rem",
        "width-2800": "7rem",
        "width-3200": "8rem",
      },
      zIndex: {
        "z-index-0": "auto",
        "z-index-1": "100",
        "z-index-2": "400",
        "z-index-3": "510",
        "z-index-4": "512",
        "z-index-5": "513",
        "z-index-6": "514",
        "z-index-7": "515",
        "z-index-8": "516",
        "z-index-9": "517",
        "z-index-10": "518",
        "z-index-11": "519",
        "z-index-12": "520",
      },
    },
    "light-high-contrast-experimental": {
      border: {
        "border-radius-0": "0rem",
        "border-radius-050": "0.125rem",
        "border-radius-100": "0.25rem",
        "border-radius-150": "0.375rem",
        "border-radius-200": "0.5rem",
        "border-radius-300": "0.75rem",
        "border-radius-400": "1rem",
        "border-radius-500": "1.25rem",
        "border-radius-750": "1.875rem",
        "border-radius-full": "624.9375rem",
        "border-width-0": "0rem",
        "border-width-0165": "0.04125rem",
        "border-width-025": "0.0625rem",
        "border-width-050": "0.125rem",
        "border-width-100": "0.25rem",
      },
      breakpoints: {
        "breakpoints-xs": "0rem",
        "breakpoints-sm": "30.625rem",
        "breakpoints-md": "48rem",
        "breakpoints-lg": "65rem",
        "breakpoints-xl": "90rem",
      },
      color: {
        "color-scheme": "light",
        "color-bg": "rgba(241, 241, 241, 1)",
        "color-bg-inverse": "rgba(26, 26, 26, 1)",
        "color-bg-surface": "rgba(255, 255, 255, 1)",
        "color-bg-surface-hover": "rgba(247, 247, 247, 1)",
        "color-bg-surface-active": "rgba(243, 243, 243, 1)",
        "color-bg-surface-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-surface-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-surface-secondary-hover": "rgba(241, 241, 241, 1)",
        "color-bg-surface-secondary-active": "rgba(235, 235, 235, 1)",
        "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
        "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
        "color-bg-surface-brand-selected": "rgba(241, 241, 241, 1)",
        "color-bg-surface-info": "rgba(234, 244, 255, 1)",
        "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
        "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
        "color-bg-surface-success": "rgba(205, 254, 225, 1)",
        "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
        "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
        "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
        "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
        "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
        "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
        "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
        "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
        "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
        "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
        "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
        "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
        "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
        "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
        "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
        "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
        "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
        "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
        "color-bg-fill": "rgba(255, 255, 255, 1)",
        "color-bg-fill-hover": "rgba(250, 250, 250, 1)",
        "color-bg-fill-active": "rgba(247, 247, 247, 1)",
        "color-bg-fill-selected": "rgba(204, 204, 204, 1)",
        "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
        "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
        "color-bg-fill-brand": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-hover": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-active": "rgba(26, 26, 26, 1)",
        "color-bg-fill-brand-selected": "rgba(48, 48, 48, 1)",
        "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
        "color-bg-fill-info": "rgba(145, 208, 255, 1)",
        "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
        "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
        "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
        "color-bg-fill-success": "rgba(41, 132, 90, 1)",
        "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
        "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
        "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
        "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
        "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
        "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
        "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
        "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
        "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
        "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
        "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
        "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
        "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
        "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
        "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
        "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
        "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
        "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
        "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
        "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
        "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
        "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-transparent": "rgba(0, 0, 0, 0.02)",
        "color-bg-fill-transparent-hover": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-transparent-active": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-selected": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
        "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
        "color-text": "rgba(26, 26, 26, 1)",
        "color-text-secondary": "rgba(26, 26, 26, 1)",
        "color-text-disabled": "rgba(181, 181, 181, 1)",
        "color-text-link": "rgba(0, 91, 211, 1)",
        "color-text-link-hover": "rgba(0, 66, 153, 1)",
        "color-text-link-active": "rgba(0, 46, 106, 1)",
        "color-text-brand": "rgba(26, 26, 26, 1)",
        "color-text-brand-hover": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
        "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
        "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
        "color-text-info": "rgba(0, 58, 90, 1)",
        "color-text-info-hover": "rgba(0, 58, 90, 1)",
        "color-text-info-active": "rgba(0, 33, 51, 1)",
        "color-text-info-secondary": "rgba(0, 124, 180, 1)",
        "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-text-success": "rgba(12, 81, 50, 1)",
        "color-text-success-hover": "rgba(8, 61, 37, 1)",
        "color-text-success-active": "rgba(9, 42, 27, 1)",
        "color-text-success-secondary": "rgba(41, 132, 90, 1)",
        "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
        "color-text-caution": "rgba(79, 71, 0, 1)",
        "color-text-caution-hover": "rgba(51, 46, 0, 1)",
        "color-text-caution-active": "rgba(31, 28, 0, 1)",
        "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
        "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
        "color-text-warning": "rgba(94, 66, 0, 1)",
        "color-text-warning-hover": "rgba(65, 45, 0, 1)",
        "color-text-warning-active": "rgba(37, 26, 0, 1)",
        "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
        "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
        "color-text-critical": "rgba(142, 31, 11, 1)",
        "color-text-critical-hover": "rgba(95, 21, 7, 1)",
        "color-text-critical-active": "rgba(47, 10, 4, 1)",
        "color-text-critical-secondary": "rgba(229, 28, 0, 1)",
        "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
        "color-text-emphasis": "rgba(0, 91, 211, 1)",
        "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
        "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
        "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
        "color-text-magic": "rgba(87, 0, 209, 1)",
        "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
        "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
        "color-text-inverse": "rgba(227, 227, 227, 1)",
        "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
        "color-text-link-inverse": "rgba(197, 208, 255, 1)",
        "color-border": "rgba(138, 138, 138, 1)",
        "color-border-hover": "rgba(204, 204, 204, 1)",
        "color-border-disabled": "rgba(235, 235, 235, 1)",
        "color-border-secondary": "rgba(138, 138, 138, 1)",
        "color-border-tertiary": "rgba(204, 204, 204, 1)",
        "color-border-focus": "rgba(0, 91, 211, 1)",
        "color-border-brand": "rgba(227, 227, 227, 1)",
        "color-border-info": "rgba(168, 216, 255, 1)",
        "color-border-success": "rgba(146, 254, 194, 1)",
        "color-border-caution": "rgba(255, 235, 120, 1)",
        "color-border-warning": "rgba(255, 200, 121, 1)",
        "color-border-critical": "rgba(254, 195, 193, 1)",
        "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
        "color-border-emphasis": "rgba(0, 91, 211, 1)",
        "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-border-magic": "rgba(228, 222, 255, 1)",
        "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
        "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
        "color-border-inverse": "rgba(97, 97, 97, 1)",
        "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
        "color-border-inverse-active": "rgba(227, 227, 227, 1)",
        "color-tooltip-tail-down-border-experimental": "rgba(212, 212, 212, 1)",
        "color-tooltip-tail-up-border-experimental": "rgba(227, 227, 227, 1)",
        "color-border-gradient-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-hover-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-selected-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-border-gradient-active-experimental":
          "linear-gradient(to bottom, rgba(235, 235, 235, 1), rgba(204, 204, 204, 1) 78%, rgba(181, 181, 181, 1))",
        "color-icon": "rgba(74, 74, 74, 1)",
        "color-icon-hover": "rgba(48, 48, 48, 1)",
        "color-icon-active": "rgba(26, 26, 26, 1)",
        "color-icon-disabled": "rgba(204, 204, 204, 1)",
        "color-icon-secondary": "rgba(74, 74, 74, 1)",
        "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
        "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
        "color-icon-brand": "rgba(26, 26, 26, 1)",
        "color-icon-info": "rgba(0, 148, 213, 1)",
        "color-icon-success": "rgba(41, 132, 90, 1)",
        "color-icon-caution": "rgba(153, 138, 0, 1)",
        "color-icon-warning": "rgba(178, 132, 0, 1)",
        "color-icon-critical": "rgba(239, 77, 47, 1)",
        "color-icon-emphasis": "rgba(0, 91, 211, 1)",
        "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-icon-magic": "rgba(128, 81, 255, 1)",
        "color-icon-inverse": "rgba(227, 227, 227, 1)",
        "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
        "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
        "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
        "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
        "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
        "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
        "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
        "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
        "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
        "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
        "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
        "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
        "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
        "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
        "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
        "color-button-gradient-bg-fill": "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)",
        "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-input-bg-surface": "rgba(253, 253, 253, 1)",
        "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
        "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
        "color-input-border": "rgba(74, 74, 74, 1)",
        "color-input-border-hover": "rgba(97, 97, 97, 1)",
        "color-input-border-active": "rgba(26, 26, 26, 1)",
        "color-nav-bg": "rgba(235, 235, 235, 1)",
        "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
        "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
        "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
        "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
        "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
        "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
        "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)",
      },
      font: {
        "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        "font-size-275": "0.6875rem",
        "font-size-300": "0.75rem",
        "font-size-325": "0.8125rem",
        "font-size-350": "0.875rem",
        "font-size-400": "1rem",
        "font-size-450": "1.125rem",
        "font-size-500": "1.25rem",
        "font-size-550": "1.375rem",
        "font-size-600": "1.5rem",
        "font-size-750": "1.875rem",
        "font-size-800": "2rem",
        "font-size-900": "2.25rem",
        "font-size-1000": "2.5rem",
        "font-weight-regular": "450",
        "font-weight-medium": "550",
        "font-weight-semibold": "650",
        "font-weight-bold": "700",
        "font-letter-spacing-densest": "-0.03375rem",
        "font-letter-spacing-denser": "-0.01875rem",
        "font-letter-spacing-dense": "-0.0125rem",
        "font-letter-spacing-normal": "0rem",
        "font-line-height-300": "0.75rem",
        "font-line-height-400": "1rem",
        "font-line-height-500": "1.25rem",
        "font-line-height-600": "1.5rem",
        "font-line-height-700": "1.75rem",
        "font-line-height-800": "2rem",
        "font-line-height-1000": "2.5rem",
        "font-line-height-1200": "3rem",
      },
      height: {
        "height-0": "0rem",
        "height-025": "0.0625rem",
        "height-050": "0.125rem",
        "height-100": "0.25rem",
        "height-150": "0.375rem",
        "height-200": "0.5rem",
        "height-300": "0.75rem",
        "height-400": "1rem",
        "height-500": "1.25rem",
        "height-600": "1.5rem",
        "height-700": "1.75rem",
        "height-800": "2rem",
        "height-900": "2.25rem",
        "height-1000": "2.5rem",
        "height-1200": "3rem",
        "height-1600": "4rem",
        "height-2000": "5rem",
        "height-2400": "6rem",
        "height-2800": "7rem",
        "height-3200": "8rem",
      },
      motion: {
        "motion-duration-0": "0ms",
        "motion-duration-50": "50ms",
        "motion-duration-100": "100ms",
        "motion-duration-150": "150ms",
        "motion-duration-200": "200ms",
        "motion-duration-250": "250ms",
        "motion-duration-300": "300ms",
        "motion-duration-350": "350ms",
        "motion-duration-400": "400ms",
        "motion-duration-450": "450ms",
        "motion-duration-500": "500ms",
        "motion-duration-5000": "5000ms",
        "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
        "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
        "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
        "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
        "motion-linear": "cubic-bezier(0, 0, 1, 1)",
        "motion-keyframes-bounce":
          "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
        "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
        "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
        "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
        "motion-keyframes-appear-above":
          "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
        "motion-keyframes-appear-below":
          "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }",
      },
      shadow: {
        "shadow-0": "none",
        "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
        "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
        "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
        "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
        "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
        "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
        "shadow-bevel-100":
          "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07), 0rem 0.0625rem 0rem 0rem rgba(208, 208, 208, 0.40) inset, 0.0625rem 0rem 0rem 0rem #CCC inset, -0.0625rem 0rem 0rem 0rem #CCC inset, 0rem -0.0625rem 0rem 0rem #999 inset",
        "shadow-inset-100":
          "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
        "shadow-inset-200":
          "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
        "shadow-button":
          "0rem -0.0625rem 0rem 0rem #b5b5b5 inset, 0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.1) inset, 0rem 0.03125rem 0rem 0.09375rem #FFF inset",
        "shadow-button-hover":
          "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
        "shadow-button-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.2) inset",
        "shadow-button-primary":
          "0rem -0.0625rem 0rem 0.0625rem rgba(0, 0, 0, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(48, 48, 48, 1) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.25) inset;",
        "shadow-button-primary-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
        "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem rgb(0, 0, 0) inset",
        "shadow-button-primary-critical":
          "0rem -0.0625rem 0rem 0.0625rem rgba(142, 31, 11, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(181, 38, 11, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.349) inset",
        "shadow-button-primary-critical-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-critical-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-button-primary-success":
          "0rem -0.0625rem 0rem 0.0625rem rgba(12, 81, 50, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(19, 111, 69, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.251) inset",
        "shadow-button-primary-success-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-success-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset",
      },
      space: {
        "space-0": "0rem",
        "space-025": "0.0625rem",
        "space-050": "0.125rem",
        "space-100": "0.25rem",
        "space-150": "0.375rem",
        "space-200": "0.5rem",
        "space-300": "0.75rem",
        "space-400": "1rem",
        "space-500": "1.25rem",
        "space-600": "1.5rem",
        "space-800": "2rem",
        "space-1000": "2.5rem",
        "space-1200": "3rem",
        "space-1600": "4rem",
        "space-2000": "5rem",
        "space-2400": "6rem",
        "space-2800": "7rem",
        "space-3200": "8rem",
        "space-button-group-gap": "0.5rem",
        "space-card-gap": "1rem",
        "space-card-padding": "1rem",
        "space-table-cell-padding": "0.375rem",
      },
      text: {
        "text-heading-3xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-3xl-font-size": "2.25rem",
        "text-heading-3xl-font-weight": "700",
        "text-heading-3xl-font-letter-spacing": "-0.03375rem",
        "text-heading-3xl-font-line-height": "3rem",
        "text-heading-2xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-2xl-font-size": "1.875rem",
        "text-heading-2xl-font-weight": "700",
        "text-heading-2xl-font-letter-spacing": "-0.01875rem",
        "text-heading-2xl-font-line-height": "2.5rem",
        "text-heading-xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xl-font-size": "1.5rem",
        "text-heading-xl-font-weight": "700",
        "text-heading-xl-font-letter-spacing": "-0.0125rem",
        "text-heading-xl-font-line-height": "2rem",
        "text-heading-lg-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-lg-font-size": "1.25rem",
        "text-heading-lg-font-weight": "650",
        "text-heading-lg-font-letter-spacing": "-0.0125rem",
        "text-heading-lg-font-line-height": "1.5rem",
        "text-heading-md-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-md-font-size": "0.875rem",
        "text-heading-md-font-weight": "650",
        "text-heading-md-font-letter-spacing": "0rem",
        "text-heading-md-font-line-height": "1.25rem",
        "text-heading-sm-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-sm-font-size": "0.8125rem",
        "text-heading-sm-font-weight": "650",
        "text-heading-sm-font-letter-spacing": "0rem",
        "text-heading-sm-font-line-height": "1.25rem",
        "text-heading-xs-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xs-font-size": "0.75rem",
        "text-heading-xs-font-weight": "650",
        "text-heading-xs-font-letter-spacing": "0rem",
        "text-heading-xs-font-line-height": "1rem",
        "text-body-lg-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-lg-font-size": "0.875rem",
        "text-body-lg-font-weight": "450",
        "text-body-lg-font-letter-spacing": "0rem",
        "text-body-lg-font-line-height": "1.25rem",
        "text-body-md-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-md-font-size": "0.8125rem",
        "text-body-md-font-weight": "450",
        "text-body-md-font-letter-spacing": "0rem",
        "text-body-md-font-line-height": "1.25rem",
        "text-body-sm-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-sm-font-size": "0.75rem",
        "text-body-sm-font-weight": "450",
        "text-body-sm-font-letter-spacing": "0rem",
        "text-body-sm-font-line-height": "1rem",
        "text-body-xs-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-xs-font-size": "0.6875rem",
        "text-body-xs-font-weight": "450",
        "text-body-xs-font-letter-spacing": "0rem",
        "text-body-xs-font-line-height": "0.75rem",
      },
      width: {
        "width-0": "0rem",
        "width-025": "0.0625rem",
        "width-050": "0.125rem",
        "width-100": "0.25rem",
        "width-150": "0.375rem",
        "width-200": "0.5rem",
        "width-300": "0.75rem",
        "width-400": "1rem",
        "width-500": "1.25rem",
        "width-600": "1.5rem",
        "width-700": "1.75rem",
        "width-800": "2rem",
        "width-900": "2.25rem",
        "width-1000": "2.5rem",
        "width-1200": "3rem",
        "width-1600": "4rem",
        "width-2000": "5rem",
        "width-2400": "6rem",
        "width-2800": "7rem",
        "width-3200": "8rem",
      },
      zIndex: {
        "z-index-0": "auto",
        "z-index-1": "100",
        "z-index-2": "400",
        "z-index-3": "510",
        "z-index-4": "512",
        "z-index-5": "513",
        "z-index-6": "514",
        "z-index-7": "515",
        "z-index-8": "516",
        "z-index-9": "517",
        "z-index-10": "518",
        "z-index-11": "519",
        "z-index-12": "520",
      },
    },
    "dark-experimental": {
      border: {
        "border-radius-0": "0rem",
        "border-radius-050": "0.125rem",
        "border-radius-100": "0.25rem",
        "border-radius-150": "0.375rem",
        "border-radius-200": "0.5rem",
        "border-radius-300": "0.75rem",
        "border-radius-400": "1rem",
        "border-radius-500": "1.25rem",
        "border-radius-750": "1.875rem",
        "border-radius-full": "624.9375rem",
        "border-width-0": "0rem",
        "border-width-0165": "0.04125rem",
        "border-width-025": "0.0625rem",
        "border-width-050": "0.125rem",
        "border-width-100": "0.25rem",
      },
      breakpoints: {
        "breakpoints-xs": "0rem",
        "breakpoints-sm": "30.625rem",
        "breakpoints-md": "48rem",
        "breakpoints-lg": "65rem",
        "breakpoints-xl": "90rem",
      },
      color: {
        "color-scheme": "dark",
        "color-bg": "rgba(26, 26, 26, 1)",
        "color-bg-inverse": "rgba(26, 26, 26, 1)",
        "color-bg-surface": "rgba(48, 48, 48, 1)",
        "color-bg-surface-hover": "rgba(74, 74, 74, 1)",
        "color-bg-surface-active": "rgba(97, 97, 97, 1)",
        "color-bg-surface-selected": "rgba(97, 97, 97, 1)",
        "color-bg-surface-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-surface-secondary": "rgba(247, 247, 247, 1)",
        "color-bg-surface-secondary-hover": "rgba(74, 74, 74, 1)",
        "color-bg-surface-secondary-active": "rgba(97, 97, 97, 1)",
        "color-bg-surface-secondary-selected": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary": "rgba(243, 243, 243, 1)",
        "color-bg-surface-tertiary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-tertiary-active": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand": "rgba(227, 227, 227, 1)",
        "color-bg-surface-brand-hover": "rgba(235, 235, 235, 1)",
        "color-bg-surface-brand-active": "rgba(241, 241, 241, 1)",
        "color-bg-surface-brand-selected": "rgba(74, 74, 74, 1)",
        "color-bg-surface-info": "rgba(234, 244, 255, 1)",
        "color-bg-surface-info-hover": "rgba(224, 240, 255, 1)",
        "color-bg-surface-info-active": "rgba(202, 230, 255, 1)",
        "color-bg-surface-success": "rgba(205, 254, 225, 1)",
        "color-bg-surface-success-hover": "rgba(180, 254, 210, 1)",
        "color-bg-surface-success-active": "rgba(146, 254, 194, 1)",
        "color-bg-surface-caution": "rgba(255, 248, 219, 1)",
        "color-bg-surface-caution-hover": "rgba(255, 244, 191, 1)",
        "color-bg-surface-caution-active": "rgba(255, 239, 157, 1)",
        "color-bg-surface-warning": "rgba(255, 241, 227, 1)",
        "color-bg-surface-warning-hover": "rgba(255, 235, 213, 1)",
        "color-bg-surface-warning-active": "rgba(255, 228, 198, 1)",
        "color-bg-surface-critical": "rgba(254, 233, 232, 1)",
        "color-bg-surface-critical-hover": "rgba(254, 226, 225, 1)",
        "color-bg-surface-critical-active": "rgba(254, 218, 217, 1)",
        "color-bg-surface-emphasis": "rgba(240, 242, 255, 1)",
        "color-bg-surface-emphasis-hover": "rgba(234, 237, 255, 1)",
        "color-bg-surface-emphasis-active": "rgba(226, 231, 255, 1)",
        "color-bg-surface-magic": "rgba(248, 247, 255, 1)",
        "color-bg-surface-magic-hover": "rgba(243, 241, 255, 1)",
        "color-bg-surface-magic-active": "rgba(233, 229, 255, 1)",
        "color-bg-surface-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-surface-transparent": "rgba(0, 0, 0, 0)",
        "color-bg-fill": "rgba(48, 48, 48, 1)",
        "color-bg-fill-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-selected": "rgba(97, 97, 97, 1)",
        "color-bg-fill-disabled": "rgba(0, 0, 0, 0.05)",
        "color-bg-fill-secondary": "rgba(241, 241, 241, 1)",
        "color-bg-fill-secondary-hover": "rgba(235, 235, 235, 1)",
        "color-bg-fill-secondary-active": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary": "rgba(227, 227, 227, 1)",
        "color-bg-fill-tertiary-hover": "rgba(212, 212, 212, 1)",
        "color-bg-fill-tertiary-active": "rgba(204, 204, 204, 1)",
        "color-bg-fill-brand": "rgba(255, 255, 255, 1)",
        "color-bg-fill-brand-hover": "rgba(243, 243, 243, 1)",
        "color-bg-fill-brand-active": "rgba(247, 247, 247, 1)",
        "color-bg-fill-brand-selected": "rgba(212, 212, 212, 1)",
        "color-bg-fill-brand-disabled": "rgba(0, 0, 0, 0.17)",
        "color-bg-fill-info": "rgba(145, 208, 255, 1)",
        "color-bg-fill-info-hover": "rgba(81, 192, 255, 1)",
        "color-bg-fill-info-active": "rgba(0, 148, 213, 1)",
        "color-bg-fill-info-secondary": "rgba(213, 235, 255, 1)",
        "color-bg-fill-success": "rgba(41, 132, 90, 1)",
        "color-bg-fill-success-hover": "rgba(19, 111, 69, 1)",
        "color-bg-fill-success-active": "rgba(12, 81, 50, 1)",
        "color-bg-fill-success-secondary": "rgba(180, 254, 210, 1)",
        "color-bg-fill-warning": "rgba(255, 184, 0, 1)",
        "color-bg-fill-warning-hover": "rgba(229, 165, 0, 1)",
        "color-bg-fill-warning-active": "rgba(178, 132, 0, 1)",
        "color-bg-fill-warning-secondary": "rgba(255, 214, 164, 1)",
        "color-bg-fill-caution": "rgba(255, 230, 0, 1)",
        "color-bg-fill-caution-hover": "rgba(234, 211, 0, 1)",
        "color-bg-fill-caution-active": "rgba(225, 203, 0, 1)",
        "color-bg-fill-caution-secondary": "rgba(255, 235, 120, 1)",
        "color-bg-fill-critical": "rgba(229, 28, 0, 1)",
        "color-bg-fill-critical-hover": "rgba(181, 38, 11, 1)",
        "color-bg-fill-critical-active": "rgba(142, 31, 11, 1)",
        "color-bg-fill-critical-selected": "rgba(142, 31, 11, 1)",
        "color-bg-fill-critical-secondary": "rgba(254, 211, 209, 1)",
        "color-bg-fill-emphasis": "rgba(0, 91, 211, 1)",
        "color-bg-fill-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-bg-fill-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-bg-fill-magic": "rgba(128, 81, 255, 1)",
        "color-bg-fill-magic-secondary": "rgba(233, 229, 255, 1)",
        "color-bg-fill-magic-secondary-hover": "rgba(228, 222, 255, 1)",
        "color-bg-fill-magic-secondary-active": "rgba(223, 217, 255, 1)",
        "color-bg-fill-inverse": "rgba(48, 48, 48, 1)",
        "color-bg-fill-inverse-hover": "rgba(74, 74, 74, 1)",
        "color-bg-fill-inverse-active": "rgba(97, 97, 97, 1)",
        "color-bg-fill-transparent": "rgba(255, 255, 255, 0.11)",
        "color-bg-fill-transparent-hover": "rgba(255, 255, 255, 0.17)",
        "color-bg-fill-transparent-active": "rgba(255, 255, 255, 0.20)",
        "color-bg-fill-transparent-selected": "rgba(255, 255, 255, 0.28)",
        "color-bg-fill-transparent-secondary": "rgba(0, 0, 0, 0.06)",
        "color-bg-fill-transparent-secondary-hover": "rgba(0, 0, 0, 0.08)",
        "color-bg-fill-transparent-secondary-active": "rgba(0, 0, 0, 0.11)",
        "color-text": "rgba(227, 227, 227, 1)",
        "color-text-secondary": "rgba(181, 181, 181, 1)",
        "color-text-disabled": "rgba(181, 181, 181, 1)",
        "color-text-link": "rgba(0, 91, 211, 1)",
        "color-text-link-hover": "rgba(0, 66, 153, 1)",
        "color-text-link-active": "rgba(0, 46, 106, 1)",
        "color-text-brand": "rgba(74, 74, 74, 1)",
        "color-text-brand-hover": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill": "rgba(48, 48, 48, 1)",
        "color-text-brand-on-bg-fill-hover": "rgba(227, 227, 227, 1)",
        "color-text-brand-on-bg-fill-active": "rgba(204, 204, 204, 1)",
        "color-text-brand-on-bg-fill-disabled": "rgba(255, 255, 255, 1)",
        "color-text-info": "rgba(0, 58, 90, 1)",
        "color-text-info-hover": "rgba(0, 58, 90, 1)",
        "color-text-info-active": "rgba(0, 33, 51, 1)",
        "color-text-info-secondary": "rgba(0, 124, 180, 1)",
        "color-text-info-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-text-success": "rgba(12, 81, 50, 1)",
        "color-text-success-hover": "rgba(8, 61, 37, 1)",
        "color-text-success-active": "rgba(9, 42, 27, 1)",
        "color-text-success-secondary": "rgba(41, 132, 90, 1)",
        "color-text-success-on-bg-fill": "rgba(248, 255, 251, 1)",
        "color-text-caution": "rgba(79, 71, 0, 1)",
        "color-text-caution-hover": "rgba(51, 46, 0, 1)",
        "color-text-caution-active": "rgba(31, 28, 0, 1)",
        "color-text-caution-secondary": "rgba(130, 117, 0, 1)",
        "color-text-caution-on-bg-fill": "rgba(51, 46, 0, 1)",
        "color-text-warning": "rgba(94, 66, 0, 1)",
        "color-text-warning-hover": "rgba(65, 45, 0, 1)",
        "color-text-warning-active": "rgba(37, 26, 0, 1)",
        "color-text-warning-secondary": "rgba(149, 111, 0, 1)",
        "color-text-warning-on-bg-fill": "rgba(37, 26, 0, 1)",
        "color-text-critical": "rgba(142, 31, 11, 1)",
        "color-text-critical-hover": "rgba(95, 21, 7, 1)",
        "color-text-critical-active": "rgba(47, 10, 4, 1)",
        "color-text-critical-secondary": "rgba(229, 28, 0, 1)",
        "color-text-critical-on-bg-fill": "rgba(255, 251, 251, 1)",
        "color-text-emphasis": "rgba(0, 91, 211, 1)",
        "color-text-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-text-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-text-emphasis-on-bg-fill": "rgba(252, 253, 255, 1)",
        "color-text-emphasis-on-bg-fill-hover": "rgba(226, 231, 255, 1)",
        "color-text-emphasis-on-bg-fill-active": "rgba(213, 220, 255, 1)",
        "color-text-magic": "rgba(87, 0, 209, 1)",
        "color-text-magic-secondary": "rgba(113, 38, 255, 1)",
        "color-text-magic-on-bg-fill": "rgba(253, 253, 255, 1)",
        "color-text-inverse": "rgba(227, 227, 227, 1)",
        "color-text-inverse-secondary": "rgba(181, 181, 181, 1)",
        "color-text-link-inverse": "rgba(197, 208, 255, 1)",
        "color-border": "rgba(227, 227, 227, 1)",
        "color-border-hover": "rgba(204, 204, 204, 1)",
        "color-border-disabled": "rgba(235, 235, 235, 1)",
        "color-border-secondary": "rgba(97, 97, 97, 1)",
        "color-border-tertiary": "rgba(204, 204, 204, 1)",
        "color-border-focus": "rgba(0, 91, 211, 1)",
        "color-border-brand": "rgba(227, 227, 227, 1)",
        "color-border-info": "rgba(168, 216, 255, 1)",
        "color-border-success": "rgba(146, 254, 194, 1)",
        "color-border-caution": "rgba(255, 235, 120, 1)",
        "color-border-warning": "rgba(255, 200, 121, 1)",
        "color-border-critical": "rgba(254, 195, 193, 1)",
        "color-border-critical-secondary": "rgba(142, 31, 11, 1)",
        "color-border-emphasis": "rgba(0, 91, 211, 1)",
        "color-border-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-border-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-border-magic": "rgba(228, 222, 255, 1)",
        "color-border-magic-secondary": "rgba(148, 116, 255, 1)",
        "color-border-magic-secondary-hover": "rgba(128, 81, 255, 1)",
        "color-border-inverse": "rgba(97, 97, 97, 1)",
        "color-border-inverse-hover": "rgba(204, 204, 204, 1)",
        "color-border-inverse-active": "rgba(227, 227, 227, 1)",
        "color-tooltip-tail-down-border-experimental": "rgba(60, 60, 60, 1)",
        "color-tooltip-tail-up-border-experimental": "rgba(71, 71, 71, 1)",
        "color-border-gradient-experimental": "linear-gradient(to bottom, rgba(255, 255, 255, 0.17), rgba(255, 255, 255, 0.03))",
        "color-border-gradient-hover-experimental": "linear-gradient(to bottom, rgba(255, 255, 255, 0.17), rgba(255, 255, 255, 0.03))",
        "color-border-gradient-selected-experimental": "linear-gradient(to bottom, rgba(0, 0, 0, 0.20), rgba(255, 255, 255, 0.20))",
        "color-border-gradient-active-experimental": "linear-gradient(to bottom, rgba(255, 255, 255, 0.20), rgba(255, 255, 255, 0.03))",
        "color-icon": "rgba(227, 227, 227, 1)",
        "color-icon-hover": "rgba(48, 48, 48, 1)",
        "color-icon-active": "rgba(26, 26, 26, 1)",
        "color-icon-disabled": "rgba(204, 204, 204, 1)",
        "color-icon-secondary": "rgba(138, 138, 138, 1)",
        "color-icon-secondary-hover": "rgba(97, 97, 97, 1)",
        "color-icon-secondary-active": "rgba(74, 74, 74, 1)",
        "color-icon-brand": "rgba(26, 26, 26, 1)",
        "color-icon-info": "rgba(0, 148, 213, 1)",
        "color-icon-success": "rgba(41, 132, 90, 1)",
        "color-icon-caution": "rgba(153, 138, 0, 1)",
        "color-icon-warning": "rgba(178, 132, 0, 1)",
        "color-icon-critical": "rgba(239, 77, 47, 1)",
        "color-icon-emphasis": "rgba(0, 91, 211, 1)",
        "color-icon-emphasis-hover": "rgba(0, 66, 153, 1)",
        "color-icon-emphasis-active": "rgba(0, 46, 106, 1)",
        "color-icon-magic": "rgba(128, 81, 255, 1)",
        "color-icon-inverse": "rgba(227, 227, 227, 1)",
        "color-avatar-bg-fill": "rgba(181, 181, 181, 1)",
        "color-avatar-five-bg-fill": "rgba(253, 75, 146, 1)",
        "color-avatar-five-text-on-bg-fill": "rgba(255, 246, 248, 1)",
        "color-avatar-four-bg-fill": "rgba(81, 192, 255, 1)",
        "color-avatar-four-text-on-bg-fill": "rgba(0, 33, 51, 1)",
        "color-avatar-one-bg-fill": "rgba(197, 48, 197, 1)",
        "color-avatar-one-text-on-bg-fill": "rgba(253, 239, 253, 1)",
        "color-avatar-seven-bg-fill": "rgba(148, 116, 255, 1)",
        "color-avatar-seven-text-on-bg-fill": "rgba(248, 247, 255, 1)",
        "color-avatar-six-bg-fill": "rgba(37, 232, 43, 1)",
        "color-avatar-six-text-on-bg-fill": "rgba(3, 61, 5, 1)",
        "color-avatar-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-avatar-three-bg-fill": "rgba(44, 224, 212, 1)",
        "color-avatar-three-text-on-bg-fill": "rgba(3, 60, 57, 1)",
        "color-avatar-two-bg-fill": "rgba(56, 250, 163, 1)",
        "color-avatar-two-text-on-bg-fill": "rgba(12, 81, 50, 1)",
        "color-backdrop-bg": "rgba(0, 0, 0, 0.71)",
        "color-button-gradient-bg-fill": "linear-gradient(180deg, rgba(48, 48, 48, 0) 63.53%, rgba(255, 255, 255, 0.15) 100%)",
        "color-checkbox-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-checkbox-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-input-bg-surface": "rgba(253, 253, 253, 1)",
        "color-input-bg-surface-hover": "rgba(250, 250, 250, 1)",
        "color-input-bg-surface-active": "rgba(247, 247, 247, 1)",
        "color-input-border": "rgba(138, 138, 138, 1)",
        "color-input-border-hover": "rgba(97, 97, 97, 1)",
        "color-input-border-active": "rgba(26, 26, 26, 1)",
        "color-nav-bg": "rgba(235, 235, 235, 1)",
        "color-nav-bg-surface": "rgba(0, 0, 0, 0.02)",
        "color-nav-bg-surface-hover": "rgba(241, 241, 241, 1)",
        "color-nav-bg-surface-active": "rgba(250, 250, 250, 1)",
        "color-nav-bg-surface-selected": "rgba(250, 250, 250, 1)",
        "color-radio-button-bg-surface-disabled": "rgba(0, 0, 0, 0.08)",
        "color-radio-button-icon-disabled": "rgba(255, 255, 255, 1)",
        "color-video-thumbnail-play-button-bg-fill-hover": "rgba(0, 0, 0, 0.81)",
        "color-video-thumbnail-play-button-bg-fill": "rgba(0, 0, 0, 0.71)",
        "color-video-thumbnail-play-button-text-on-bg-fill": "rgba(255, 255, 255, 1)",
        "color-scrollbar-thumb-bg-hover": "rgba(138, 138, 138, 1)",
      },
      font: {
        "font-family-sans": "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "font-family-mono": "ui-monospace, SFMono-Regular, 'SF Mono', Consolas, 'Liberation Mono', Menlo, monospace",
        "font-size-275": "0.6875rem",
        "font-size-300": "0.75rem",
        "font-size-325": "0.8125rem",
        "font-size-350": "0.875rem",
        "font-size-400": "1rem",
        "font-size-450": "1.125rem",
        "font-size-500": "1.25rem",
        "font-size-550": "1.375rem",
        "font-size-600": "1.5rem",
        "font-size-750": "1.875rem",
        "font-size-800": "2rem",
        "font-size-900": "2.25rem",
        "font-size-1000": "2.5rem",
        "font-weight-regular": "450",
        "font-weight-medium": "550",
        "font-weight-semibold": "650",
        "font-weight-bold": "700",
        "font-letter-spacing-densest": "-0.03375rem",
        "font-letter-spacing-denser": "-0.01875rem",
        "font-letter-spacing-dense": "-0.0125rem",
        "font-letter-spacing-normal": "0rem",
        "font-line-height-300": "0.75rem",
        "font-line-height-400": "1rem",
        "font-line-height-500": "1.25rem",
        "font-line-height-600": "1.5rem",
        "font-line-height-700": "1.75rem",
        "font-line-height-800": "2rem",
        "font-line-height-1000": "2.5rem",
        "font-line-height-1200": "3rem",
      },
      height: {
        "height-0": "0rem",
        "height-025": "0.0625rem",
        "height-050": "0.125rem",
        "height-100": "0.25rem",
        "height-150": "0.375rem",
        "height-200": "0.5rem",
        "height-300": "0.75rem",
        "height-400": "1rem",
        "height-500": "1.25rem",
        "height-600": "1.5rem",
        "height-700": "1.75rem",
        "height-800": "2rem",
        "height-900": "2.25rem",
        "height-1000": "2.5rem",
        "height-1200": "3rem",
        "height-1600": "4rem",
        "height-2000": "5rem",
        "height-2400": "6rem",
        "height-2800": "7rem",
        "height-3200": "8rem",
      },
      motion: {
        "motion-duration-0": "0ms",
        "motion-duration-50": "50ms",
        "motion-duration-100": "100ms",
        "motion-duration-150": "150ms",
        "motion-duration-200": "200ms",
        "motion-duration-250": "250ms",
        "motion-duration-300": "300ms",
        "motion-duration-350": "350ms",
        "motion-duration-400": "400ms",
        "motion-duration-450": "450ms",
        "motion-duration-500": "500ms",
        "motion-duration-5000": "5000ms",
        "motion-ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
        "motion-ease-in": "cubic-bezier(0.42, 0, 1, 1)",
        "motion-ease-out": "cubic-bezier(0.19, 0.91, 0.38, 1)",
        "motion-ease-in-out": "cubic-bezier(0.42, 0, 0.58, 1)",
        "motion-linear": "cubic-bezier(0, 0, 1, 1)",
        "motion-keyframes-bounce":
          "{ from, 65%, 85% { transform: scale(1) } 75% { transform: scale(0.85) } 82.5% { transform: scale(1.05) } }",
        "motion-keyframes-fade-in": "{ to { opacity: 1 } }",
        "motion-keyframes-pulse": "{ from, 75% { transform: scale(0.85); opacity: 1; } to { transform: scale(2.5); opacity: 0; } }",
        "motion-keyframes-spin": "{ to { transform: rotate(1turn) } }",
        "motion-keyframes-appear-above":
          "{ from { transform: translateY(var(--p-space-100)); opacity: 0; } to { transform: none; opacity: 1; } }",
        "motion-keyframes-appear-below":
          "{ from { transform: translateY(calc(var(--p-space-100) * -1)); opacity: 0; } to { transform: none; opacity: 1; } }",
      },
      shadow: {
        "shadow-0": "none",
        "shadow-100": "0rem 0.0625rem 0rem 0rem rgba(26, 26, 26, 0.07)",
        "shadow-200": "0rem 0.1875rem 0.0625rem -0.0625rem rgba(26, 26, 26, 0.07)",
        "shadow-300": "0rem 0.25rem 0.375rem -0.125rem rgba(26, 26, 26, 0.20)",
        "shadow-400": "0rem 0.5rem 1rem -0.25rem rgba(26, 26, 26, 0.22)",
        "shadow-500": "0rem 0.75rem 1.25rem -0.5rem rgba(26, 26, 26, 0.24)",
        "shadow-600": "0rem 1.25rem 1.25rem -0.5rem rgba(26, 26, 26, 0.28)",
        "shadow-bevel-100":
          "0.0625rem 0rem 0rem 0rem rgba(204, 204, 204, 0.08) inset, -0.0625rem 0rem 0rem 0rem rgba(204, 204, 204, 0.08) inset, 0rem -0.0625rem 0rem 0rem rgba(204, 204, 204, 0.08) inset, 0rem 0.0625rem 0rem 0rem rgba(204, 204, 204, 0.16) inset",
        "shadow-inset-100":
          "0rem 0.0625rem 0.125rem 0rem rgba(26, 26, 26, 0.15) inset, 0rem 0.0625rem 0.0625rem 0rem rgba(26, 26, 26, 0.15) inset",
        "shadow-inset-200":
          "0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.20) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset, -0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.12) inset",
        "shadow-button":
          "0rem -0.0625rem 0rem 0rem #b5b5b5 inset, 0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.1) inset, 0rem 0.03125rem 0rem 0.09375rem #FFF inset",
        "shadow-button-hover":
          "0rem 0.0625rem 0rem 0rem #EBEBEB inset, -0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0.0625rem 0rem 0rem 0rem #EBEBEB inset, 0rem -0.0625rem 0rem 0rem #CCC inset",
        "shadow-button-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(26, 26, 26, 0.122) inset, 0rem 0.125rem 0.0625rem 0rem rgba(26, 26, 26, 0.2) inset",
        "shadow-button-primary":
          "0rem -0.0625rem 0rem 0.0625rem rgba(0, 0, 0, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(48, 48, 48, 1) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.25) inset;",
        "shadow-button-primary-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.24) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.0625rem 0rem 0rem #000 inset, 0rem -0.0625rem 0rem 0.0625rem #1A1A1A",
        "shadow-button-primary-inset": "0rem 0.1875rem 0rem 0rem rgb(0, 0, 0) inset",
        "shadow-button-primary-critical":
          "0rem -0.0625rem 0rem 0.0625rem rgba(142, 31, 11, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(181, 38, 11, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.349) inset",
        "shadow-button-primary-critical-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-critical-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-button-primary-success":
          "0rem -0.0625rem 0rem 0.0625rem rgba(12, 81, 50, 0.8) inset, 0rem 0rem 0rem 0.0625rem rgba(19, 111, 69, 0.8) inset, 0rem 0.03125rem 0rem 0.09375rem rgba(255, 255, 255, 0.251) inset",
        "shadow-button-primary-success-hover":
          "0rem 0.0625rem 0rem 0rem rgba(255, 255, 255, 0.48) inset, 0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, -0.0625rem 0rem 0rem 0rem rgba(255, 255, 255, 0.20) inset, 0rem -0.09375rem 0rem 0rem rgba(0, 0, 0, 0.25) inset",
        "shadow-button-primary-success-inset":
          "-0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0.0625rem 0rem 0.0625rem 0rem rgba(0, 0, 0, 0.2) inset, 0rem 0.125rem 0rem 0rem rgba(0, 0, 0, 0.6) inset",
        "shadow-border-inset": "0rem 0rem 0rem 0.0625rem rgba(0, 0, 0, 0.08) inset",
      },
      space: {
        "space-0": "0rem",
        "space-025": "0.0625rem",
        "space-050": "0.125rem",
        "space-100": "0.25rem",
        "space-150": "0.375rem",
        "space-200": "0.5rem",
        "space-300": "0.75rem",
        "space-400": "1rem",
        "space-500": "1.25rem",
        "space-600": "1.5rem",
        "space-800": "2rem",
        "space-1000": "2.5rem",
        "space-1200": "3rem",
        "space-1600": "4rem",
        "space-2000": "5rem",
        "space-2400": "6rem",
        "space-2800": "7rem",
        "space-3200": "8rem",
        "space-button-group-gap": "0.5rem",
        "space-card-gap": "1rem",
        "space-card-padding": "1rem",
        "space-table-cell-padding": "0.375rem",
      },
      text: {
        "text-heading-3xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-3xl-font-size": "2.25rem",
        "text-heading-3xl-font-weight": "700",
        "text-heading-3xl-font-letter-spacing": "-0.03375rem",
        "text-heading-3xl-font-line-height": "3rem",
        "text-heading-2xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-2xl-font-size": "1.875rem",
        "text-heading-2xl-font-weight": "700",
        "text-heading-2xl-font-letter-spacing": "-0.01875rem",
        "text-heading-2xl-font-line-height": "2.5rem",
        "text-heading-xl-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xl-font-size": "1.5rem",
        "text-heading-xl-font-weight": "700",
        "text-heading-xl-font-letter-spacing": "-0.0125rem",
        "text-heading-xl-font-line-height": "2rem",
        "text-heading-lg-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-lg-font-size": "1.25rem",
        "text-heading-lg-font-weight": "650",
        "text-heading-lg-font-letter-spacing": "-0.0125rem",
        "text-heading-lg-font-line-height": "1.5rem",
        "text-heading-md-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-md-font-size": "0.875rem",
        "text-heading-md-font-weight": "650",
        "text-heading-md-font-letter-spacing": "0rem",
        "text-heading-md-font-line-height": "1.25rem",
        "text-heading-sm-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-sm-font-size": "0.8125rem",
        "text-heading-sm-font-weight": "650",
        "text-heading-sm-font-letter-spacing": "0rem",
        "text-heading-sm-font-line-height": "1.25rem",
        "text-heading-xs-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-heading-xs-font-size": "0.75rem",
        "text-heading-xs-font-weight": "650",
        "text-heading-xs-font-letter-spacing": "0rem",
        "text-heading-xs-font-line-height": "1rem",
        "text-body-lg-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-lg-font-size": "0.875rem",
        "text-body-lg-font-weight": "450",
        "text-body-lg-font-letter-spacing": "0rem",
        "text-body-lg-font-line-height": "1.25rem",
        "text-body-md-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-md-font-size": "0.8125rem",
        "text-body-md-font-weight": "450",
        "text-body-md-font-letter-spacing": "0rem",
        "text-body-md-font-line-height": "1.25rem",
        "text-body-sm-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-sm-font-size": "0.75rem",
        "text-body-sm-font-weight": "450",
        "text-body-sm-font-letter-spacing": "0rem",
        "text-body-sm-font-line-height": "1rem",
        "text-body-xs-font-family":
          "'Inter', -apple-system, BlinkMacSystemFont, 'San Francisco', 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif",
        "text-body-xs-font-size": "0.6875rem",
        "text-body-xs-font-weight": "450",
        "text-body-xs-font-letter-spacing": "0rem",
        "text-body-xs-font-line-height": "0.75rem",
      },
      width: {
        "width-0": "0rem",
        "width-025": "0.0625rem",
        "width-050": "0.125rem",
        "width-100": "0.25rem",
        "width-150": "0.375rem",
        "width-200": "0.5rem",
        "width-300": "0.75rem",
        "width-400": "1rem",
        "width-500": "1.25rem",
        "width-600": "1.5rem",
        "width-700": "1.75rem",
        "width-800": "2rem",
        "width-900": "2.25rem",
        "width-1000": "2.5rem",
        "width-1200": "3rem",
        "width-1600": "4rem",
        "width-2000": "5rem",
        "width-2400": "6rem",
        "width-2800": "7rem",
        "width-3200": "8rem",
      },
      zIndex: {
        "z-index-0": "auto",
        "z-index-1": "100",
        "z-index-2": "400",
        "z-index-3": "510",
        "z-index-4": "512",
        "z-index-5": "513",
        "z-index-6": "514",
        "z-index-7": "515",
        "z-index-8": "516",
        "z-index-9": "517",
        "z-index-10": "518",
        "z-index-11": "519",
        "z-index-12": "520",
      },
    },
  },
  Ju = Zu[bs];
fm(Zu[bs]);
const Yu = b.createContext(null),
  Xu = b.createContext(null);
function vm(e) {
  return Zu[e];
}
function a5() {
  const e = b.useContext(Yu);
  if (!e)
    throw new Error(
      "No theme was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions."
    );
  return e;
}
function gb() {
  const e = b.useContext(Xu);
  if (!e)
    throw new Error(
      "No themeName was provided. Your application must be wrapped in an <AppProvider> or <ThemeProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions."
    );
  return e;
}
function Im(e) {
  const t = typeof e;
  return e != null && (t === "object" || t === "function");
}
function re(...e) {
  return e.filter(Boolean).join(" ");
}
function kt(e, t) {
  return `${e}${t.charAt(0).toUpperCase()}${t.slice(1)}`;
}
function Ku(e) {
  const t = Object.entries(e).filter(([i, n]) => n != null);
  return t.length ? Object.fromEntries(t) : void 0;
}
function er(e, t, i, n) {
  if (!n) return {};
  let a;
  return (
    Im(n)
      ? (a = Object.fromEntries(Object.entries(n).map(([r, o]) => [r, `var(--p-${i}-${o})`])))
      : (a = { [am[0]]: `var(--p-${i}-${n})` }),
    Object.fromEntries(Object.entries(a).map(([r, o]) => [`--pc-${e}-${t}-${r}`, o]))
  );
}
function Sm(e, t, i) {
  return i
    ? Im(i)
      ? Object.fromEntries(Object.entries(i).map(([n, a]) => [`--pc-${e}-${t}-${n}`, a]))
      : { [`--pc-${e}-${t}-${am[0]}`]: i }
    : {};
}
var hb = { themeContainer: "Polaris-ThemeProvider--themeContainer" };
const bb = ["light", "dark-experimental"],
  vb = (e) => bb.includes(e);
function Ib(e) {
  const { as: t = "div", children: i, className: n, theme: a = bs } = e;
  return c.createElement(
    Xu.Provider,
    { value: a },
    c.createElement(
      Yu.Provider,
      { value: vm(a) },
      c.createElement(t, { "data-portal-id": e["data-portal-id"], className: re(pm(a), hb.themeContainer, n) }, i)
    )
  );
}
const km = b.createContext(!1),
  ec = typeof window > "u" || typeof document > "u",
  Ys = ec ? b.useEffect : b.useLayoutEffect;
function Nm(e, t, i, n) {
  const a = b.useRef(t),
    r = b.useRef(n);
  Ys(() => {
    a.current = t;
  }, [t]),
    Ys(() => {
      r.current = n;
    }, [n]),
    b.useEffect(() => {
      if (!(typeof e == "string" && i !== null)) return;
      let o;
      if (typeof i > "u") o = window;
      else if ("current" in i) {
        if (i.current === null) return;
        o = i.current;
      } else o = i;
      const s = r.current,
        l = (d) => a.current(d);
      return (
        o.addEventListener(e, l, s),
        () => {
          o.removeEventListener(e, l, s);
        }
      );
    }, [e, i]);
}
const Am = { navigationBarCollapsed: "767.95px", stackedContent: "1039.95px" },
  Fm = {
    media: "",
    addListener: Ts,
    removeListener: Ts,
    matches: !1,
    onchange: Ts,
    addEventListener: Ts,
    removeEventListener: Ts,
    dispatchEvent: (e) => !0,
  };
function Ts() {}
function Rd() {
  return typeof window > "u" ? Fm : window.matchMedia(`(max-width: ${Am.navigationBarCollapsed})`);
}
function Sb() {
  return typeof window > "u" ? Fm : window.matchMedia(`(max-width: ${Am.stackedContent})`);
}
const Bl = kb(Ju.breakpoints);
function fp(e, t) {
  return Object.fromEntries(
    !ec && !t
      ? Bl.map(([i, n]) => [i, window.matchMedia(n).matches])
      : typeof e == "object" && e !== null
      ? Bl.map(([i]) => [i, e[i] ?? !1])
      : Bl.map(([i]) => [i, e ?? !1])
  );
}
function tc(e) {
  const [t, i] = b.useState(fp(e == null ? void 0 : e.defaults, !0));
  return (
    Ys(() => {
      const n = Bl.map(([r, o]) => window.matchMedia(o)),
        a = () => i(fp());
      return (
        n.forEach((r) => {
          r.addListener ? r.addListener(a) : r.addEventListener("change", a);
        }),
        a(),
        () => {
          n.forEach((r) => {
            r.removeListener ? r.removeListener(a) : r.removeEventListener("change", a);
          });
        }
      );
    }, []),
    t
  );
}
function kb(e) {
  return Object.entries(Vh(e))
    .map(([i, n]) => Object.entries(n).map(([a, r]) => [`${i.split("-")[1]}${Nb(a)}`, r]))
    .flat();
}
function Nb(e) {
  return e.charAt(0).toUpperCase() + e.slice(1);
}
function jl(e, t, i) {
  let n,
    a,
    r,
    o,
    s,
    l,
    d = 0,
    u = !1,
    f = !1,
    p = !0;
  const m = !t && t !== 0;
  if (typeof e != "function") throw new TypeError("Expected a function");
  const h = t || 0;
  typeof i == "object" &&
    ((u = !!i.leading),
    (f = "maxWait" in i),
    (r = f ? Math.max(Number(i.maxWait) || 0, h) : void 0),
    (p = "trailing" in i ? !!i.trailing : p));
  function k(U) {
    const P = n,
      z = a;
    return (n = void 0), (a = void 0), (d = U), (o = e.apply(z, P)), o;
  }
  function x(U, P) {
    return m ? (cancelAnimationFrame(s), requestAnimationFrame(U)) : setTimeout(U, P);
  }
  function T(U) {
    if (m) return cancelAnimationFrame(U);
    clearTimeout(U);
  }
  function y(U) {
    return (d = U), (s = x(F, h)), u ? k(U) : o;
  }
  function v(U) {
    const P = U - l,
      z = U - d,
      E = h - P;
    return f && r ? Math.min(E, r - z) : E;
  }
  function S(U) {
    const P = U - l,
      z = U - d;
    return l === void 0 || P >= h || P < 0 || (f && r && z >= r);
  }
  function F() {
    const U = Date.now();
    if (S(U)) return w(U);
    s = x(F, v(U));
  }
  function w(U) {
    return (s = void 0), p && n ? k(U) : ((n = a = void 0), o);
  }
  function M() {
    s !== void 0 && T(s), (d = 0), (n = l = a = s = void 0);
  }
  function C() {
    return s === void 0 ? o : w(Date.now());
  }
  function $() {
    return s !== void 0;
  }
  function L(...U) {
    const P = Date.now(),
      z = S(P);
    if (((n = U), (a = this), (l = P), z)) {
      if (s === void 0) return y(l);
      if (f) return (s = x(F, h)), k(l);
    }
    return s === void 0 && (s = x(F, h)), o;
  }
  return (L.cancel = M), (L.flush = C), (L.pending = $), L;
}
class Mo {
  static get zero() {
    return new Mo();
  }
  constructor({ top: t = 0, left: i = 0, width: n = 0, height: a = 0 } = {}) {
    (this.top = t), (this.left = i), (this.width = n), (this.height = a);
  }
  get center() {
    return { x: this.left + this.width / 2, y: this.top + this.height / 2 };
  }
}
function vr(e) {
  if (!(e instanceof Element)) return new Mo({ width: window.innerWidth, height: window.innerHeight });
  const t = e.getBoundingClientRect();
  return new Mo({ top: t.top, left: t.left, width: t.width, height: t.height });
}
const Nl = 1e3 / 60;
class wm {
  constructor(t) {
    (this.stickyItems = []),
      (this.stuckItems = []),
      (this.container = null),
      (this.topBarOffset = 0),
      (this.handleResize = jl(
        () => {
          this.manageStickyItems();
        },
        Nl,
        { leading: !0, trailing: !0, maxWait: Nl }
      )),
      (this.handleScroll = jl(
        () => {
          this.manageStickyItems();
        },
        Nl,
        { leading: !0, trailing: !0, maxWait: Nl }
      )),
      t && this.setContainer(t);
  }
  registerStickyItem(t) {
    this.stickyItems.push(t);
  }
  unregisterStickyItem(t) {
    const i = this.stickyItems.findIndex(({ stickyNode: n }) => t === n);
    this.stickyItems.splice(i, 1);
  }
  setContainer(t) {
    (this.container = t),
      xm(t) && this.setTopBarOffset(t),
      this.container.addEventListener("scroll", this.handleScroll),
      window.addEventListener("resize", this.handleResize),
      this.manageStickyItems();
  }
  removeScrollListener() {
    this.container &&
      (this.container.removeEventListener("scroll", this.handleScroll), window.removeEventListener("resize", this.handleResize));
  }
  manageStickyItems() {
    if (this.stickyItems.length <= 0) return;
    const t = this.container ? Ab(this.container) : 0,
      i = vr(this.container).top + this.topBarOffset;
    this.stickyItems.forEach((n) => {
      const { handlePositioning: a } = n,
        { sticky: r, top: o, left: s, width: l } = this.evaluateStickyItem(n, t, i);
      this.updateStuckItems(n, r), a(r, o, s, l);
    });
  }
  evaluateStickyItem(t, i, n) {
    var x;
    const { stickyNode: a, placeHolderNode: r, boundingElement: o, offset: s, disableWhenStacked: l } = t;
    if (l && Sb().matches) return { sticky: !1, top: 0, left: 0, width: "auto" };
    const d = s ? this.getOffset(a) + parseInt(Ju.space["space-500"], 10) : this.getOffset(a),
      u = i + d,
      f = r.getBoundingClientRect().top - n + i,
      p = n + d,
      m = r.getBoundingClientRect().width,
      h = r.getBoundingClientRect().left;
    let k;
    if (o == null) k = u >= f;
    else {
      const T = a.getBoundingClientRect().height || ((x = a.firstElementChild) == null ? void 0 : x.getBoundingClientRect().height) || 0,
        y = o.getBoundingClientRect().bottom - T + i - n;
      k = u >= f && u < y;
    }
    return { sticky: k, top: p, left: h, width: m };
  }
  updateStuckItems(t, i) {
    const { stickyNode: n } = t;
    i && !this.isNodeStuck(n) ? this.addStuckItem(t) : !i && this.isNodeStuck(n) && this.removeStuckItem(t);
  }
  addStuckItem(t) {
    this.stuckItems.push(t);
  }
  removeStuckItem(t) {
    const { stickyNode: i } = t,
      n = this.stuckItems.findIndex(({ stickyNode: a }) => i === a);
    this.stuckItems.splice(n, 1);
  }
  getOffset(t) {
    if (this.stuckItems.length === 0) return 0;
    let i = 0,
      n = 0;
    const a = this.stuckItems.length,
      r = vr(t);
    for (; n < a; ) {
      const o = this.stuckItems[n].stickyNode;
      if (o !== t) {
        const s = vr(o);
        Fb(r, s) || (i += vr(o).height);
      } else break;
      n++;
    }
    return i;
  }
  isNodeStuck(t) {
    return this.stuckItems.findIndex(({ stickyNode: n }) => t === n) >= 0;
  }
  setTopBarOffset(t) {
    const i = t.querySelector(`:not(${Hu.selector}) ${nm.selector}`);
    this.topBarOffset = i ? i.clientHeight : 0;
  }
}
function xm(e) {
  return e === document;
}
function Ab(e) {
  return xm(e) ? document.body.scrollTop || document.documentElement.scrollTop : e.scrollTop;
}
function Fb(e, t) {
  const i = e.left,
    n = e.left + e.width,
    a = t.left;
  return t.left + t.width < i || n < a;
}
const mp = "data-lock-scrolling",
  yp = "data-lock-scrolling-hidden",
  gp = "data-lock-scrolling-wrapper";
let Al = 0;
function wb() {
  const { body: e } = document;
  return e.scrollHeight > e.clientHeight;
}
class xb {
  constructor() {
    (this.scrollLocks = 0), (this.locked = !1);
  }
  registerScrollLock() {
    (this.scrollLocks += 1), this.handleScrollLocking();
  }
  unregisterScrollLock() {
    (this.scrollLocks -= 1), this.handleScrollLocking();
  }
  handleScrollLocking() {
    if (ec) return;
    const { scrollLocks: t } = this,
      { body: i } = document,
      n = i.firstElementChild;
    t === 0
      ? (i.removeAttribute(mp), i.removeAttribute(yp), n && n.removeAttribute(gp), window.scroll(0, Al), (this.locked = !1))
      : t > 0 &&
        !this.locked &&
        ((Al = window.pageYOffset),
        i.setAttribute(mp, ""),
        wb() || i.setAttribute(yp, ""),
        n && (n.setAttribute(gp, ""), (n.scrollTop = Al)),
        (this.locked = !0));
  }
  resetScrollPosition() {
    Al = 0;
  }
}
const Tb = /\[(.*?)\]|(\w+)/g;
function hp(e, t, i) {
  if (e == null) return;
  const n = Array.isArray(t) ? t : Mb(t);
  let a = e;
  for (let r = 0; r < n.length; r++) {
    const o = a[n[r]];
    if (o === void 0) return i;
    a = o;
  }
  return a;
}
function Mb(e) {
  const t = [];
  let i;
  for (; (i = Tb.exec(e)); ) {
    const [, n, a] = i;
    t.push(n || a);
  }
  return t;
}
function Ob(...e) {
  let t = {};
  for (const i of e) t = Tm(t, i);
  return t;
}
function Tm(e, t) {
  const i = Array.isArray(e) ? [...e] : { ...e };
  for (const n in t)
    if (Object.prototype.hasOwnProperty.call(t, n)) bp(t[n]) && bp(i[n]) ? (i[n] = Tm(i[n], t[n])) : (i[n] = t[n]);
    else continue;
  return i;
}
function bp(e) {
  return e !== null && typeof e == "object";
}
const Rb = /{([^}]*)}/g;
class vp {
  constructor(t) {
    (this.translation = {}), (this.translation = Array.isArray(t) ? Ob(...t.slice().reverse()) : t);
  }
  translate(t, i) {
    const n = hp(this.translation, t, "");
    return n
      ? i
        ? n.replace(Rb, (a) => {
            const r = a.substring(1, a.length - 1);
            if (i[r] === void 0) {
              const o = JSON.stringify(i);
              throw new Error(
                `Error in translation for key '${t}'. No replacement found for key '${r}'. The following replacements were passed: '${o}'`
              );
            }
            return i[r];
          })
        : n
      : "";
  }
  translationKeyExists(t) {
    return !!hp(this.translation, t);
  }
}
const Bb = b.createContext(void 0),
  Mm = b.createContext(void 0),
  Cb = b.createContext(void 0),
  Om = b.createContext(void 0),
  Rm = b.createContext(void 0),
  Pb = b.createContext(void 0);
class Xs extends b.PureComponent {
  componentDidMount() {
    this.attachListener();
  }
  componentDidUpdate({ passive: t, ...i }) {
    this.detachListener(i), this.attachListener();
  }
  componentWillUnmount() {
    this.detachListener();
  }
  render() {
    return null;
  }
  attachListener() {
    const { event: t, handler: i, capture: n, passive: a } = this.props;
    window.addEventListener(t, i, { capture: n, passive: a });
  }
  detachListener(t) {
    const { event: i, handler: n, capture: a } = t || this.props;
    window.removeEventListener(i, n, a);
  }
}
const Eb = function ({ children: t }) {
  const [i, n] = b.useState(Rd().matches),
    a = b.useCallback(
      jl(
        () => {
          i !== Rd().matches && n(!i);
        },
        40,
        { trailing: !0, leading: !0, maxWait: 40 }
      ),
      [i]
    );
  b.useEffect(() => {
    n(Rd().matches);
  }, []);
  const r = b.useMemo(() => ({ isNavigationCollapsed: i }), [i]);
  return c.createElement(Pb.Provider, { value: r }, c.createElement(Xs, { event: "resize", handler: a }), t);
};
function cd() {
  const [e, t] = b.useState(!1);
  return (
    b.useEffect(() => {
      t(!0);
    }, []),
    e
  );
}
const ic = b.createContext(void 0);
function Db(e, t) {
  return c.createElement("div", { id: "PolarisPortalsContainer", ref: t });
}
const Ub = b.forwardRef(Db);
function qb({ children: e, container: t }) {
  const i = cd(),
    n = b.useRef(null),
    a = b.useMemo(() => (t ? { container: t } : i ? { container: n.current } : { container: null }), [t, i]);
  return c.createElement(ic.Provider, { value: a }, e, t ? null : c.createElement(Ub, { ref: n }));
}
const Vb = b.createContext(void 0);
function _b({ children: e }) {
  const [t, i] = b.useState([]),
    n = b.useCallback((o) => {
      i((s) => [...s, o]);
    }, []),
    a = b.useCallback((o) => {
      let s = !0;
      return (
        i((l) => {
          const d = [...l],
            u = d.indexOf(o);
          return u === -1 ? (s = !1) : d.splice(u, 1), d;
        }),
        s
      );
    }, []),
    r = b.useMemo(() => ({ trapFocusList: t, add: n, remove: a }), [n, t, a]);
  return c.createElement(Vb.Provider, { value: r }, e);
}
const $b = b.createContext(void 0),
  Gb = { tooltip: 0, hovercard: 0 };
function jb({ children: e }) {
  const [t, i] = b.useState(Gb),
    n = b.useCallback((o) => {
      i((s) => ({ ...s, [o]: s[o] + 1 }));
    }, []),
    a = b.useCallback((o) => {
      i((s) => ({ ...s, [o]: s[o] - 1 }));
    }, []),
    r = b.useMemo(
      () => ({
        presenceList: Object.entries(t).reduce((o, s) => {
          const [l, d] = s;
          return { ...o, [l]: d >= 1 };
        }, {}),
        presenceCounter: t,
        addPresence: n,
        removePresence: a,
      }),
      [n, a, t]
    );
  return c.createElement($b.Provider, { value: r }, e);
}
const zb = 20,
  Cl = 30,
  Wb = Cl + 10;
function Lb() {
  var a;
  const e = document.createElement("div");
  e.setAttribute(
    "style",
    `position: absolute; opacity: 0; transform: translate3d(-9999px, -9999px, 0); pointer-events: none; width:${Cl}px; height:${Cl}px;`
  );
  const t = document.createElement("div");
  t.setAttribute("style", `width:100%; height: ${Wb}; overflow:scroll; scrollbar-width: thin;`),
    e.appendChild(t),
    document.body.appendChild(e);
  const i = Cl - (((a = e.firstElementChild) == null ? void 0 : a.clientWidth) ?? 0),
    n = Math.min(i, zb);
  document.documentElement.style.setProperty("--pc-app-provider-scrollbar-width", `${n}px`), document.body.removeChild(e);
}
class r5 extends b.Component {
  constructor(t) {
    super(t),
      (this.setBodyStyles = () => {
        (document.body.style.backgroundColor = "var(--p-color-bg)"), (document.body.style.color = "var(--p-color-text)");
      }),
      (this.setRootAttributes = () => {
        const a = this.getThemeName();
        fb.forEach((r) => {
          document.documentElement.classList.toggle(pm(r), r === a);
        });
      }),
      (this.getThemeName = () => this.props.theme ?? bs),
      (this.stickyManager = new wm()),
      (this.scrollLockManager = new xb());
    const { i18n: i, linkComponent: n } = this.props;
    this.state = { link: n, intl: new vp(i) };
  }
  componentDidMount() {
    if (document != null) {
      this.stickyManager.setContainer(document), this.setBodyStyles(), this.setRootAttributes();
      const t =
          navigator.userAgent.includes("Safari") &&
          !navigator.userAgent.includes("Chrome") &&
          (navigator.userAgent.includes("Version/16.1") ||
            navigator.userAgent.includes("Version/16.2") ||
            navigator.userAgent.includes("Version/16.3")),
        i =
          navigator.userAgent.includes("Shopify Mobile/iOS") &&
          (navigator.userAgent.includes("OS 16_1") || navigator.userAgent.includes("OS 16_2") || navigator.userAgent.includes("OS 16_3"));
      (t || i) && document.documentElement.classList.add("Polaris-Safari-16-Font-Optical-Sizing-Patch");
    }
    Lb();
  }
  componentDidUpdate({ i18n: t, linkComponent: i }) {
    const { i18n: n, linkComponent: a } = this.props;
    this.setRootAttributes(), !(n === t && a === i) && this.setState({ link: a, intl: new vp(n) });
  }
  render() {
    const { children: t, features: i } = this.props,
      n = this.getThemeName(),
      { intl: a, link: r } = this.state;
    return c.createElement(
      Xu.Provider,
      { value: n },
      c.createElement(
        Yu.Provider,
        { value: vm(n) },
        c.createElement(
          Bb.Provider,
          { value: i },
          c.createElement(
            Mm.Provider,
            { value: a },
            c.createElement(
              Cb.Provider,
              { value: this.scrollLockManager },
              c.createElement(
                Om.Provider,
                { value: this.stickyManager },
                c.createElement(
                  Rm.Provider,
                  { value: r },
                  c.createElement(Eb, null, c.createElement(qb, null, c.createElement(_b, null, c.createElement(jb, null, t))))
                )
              )
            )
          )
        )
      )
    );
  }
}
var Bm = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", { d: "M10 6a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5a.75.75 0 0 1 .75-.75Z" }),
    c.createElement("path", { d: "M11 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Zm-1.5 0a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z",
    })
  );
};
Bm.displayName = "AlertCircleIcon";
var Cm = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", { d: "M10 6a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5a.75.75 0 0 1 .75-.75Z" }),
    c.createElement("path", { d: "M11 13a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M11.237 3.177a1.75 1.75 0 0 0-2.474 0l-5.586 5.585a1.75 1.75 0 0 0 0 2.475l5.586 5.586a1.75 1.75 0 0 0 2.474 0l5.586-5.586a1.75 1.75 0 0 0 0-2.475l-5.586-5.585Zm-1.414 1.06a.25.25 0 0 1 .354 0l5.586 5.586a.25.25 0 0 1 0 .354l-5.586 5.585a.25.25 0 0 1-.354 0l-5.586-5.585a.25.25 0 0 1 0-.354l5.586-5.586Z",
    })
  );
};
Cm.displayName = "AlertDiamondIcon";
var Pm = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", { d: "M10 6.75a.75.75 0 0 1 .75.75v3.5a.75.75 0 1 1-1.5 0v-3.5a.75.75 0 0 1 .75-.75Z" }),
    c.createElement("path", { d: "M11 13.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z" }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M10 3.5c-1.045 0-1.784.702-2.152 1.447a449.26 449.26 0 0 1-2.005 3.847l-.028.052a403.426 403.426 0 0 0-2.008 3.856c-.372.752-.478 1.75.093 2.614.57.863 1.542 1.184 2.464 1.184h7.272c.922 0 1.895-.32 2.464-1.184.57-.864.465-1.862.093-2.614-.21-.424-1.113-2.147-2.004-3.847l-.032-.061a429.497 429.497 0 0 1-2.005-3.847c-.368-.745-1.107-1.447-2.152-1.447Zm-.808 2.112c.404-.816 1.212-.816 1.616 0 .202.409 1.112 2.145 2.022 3.88a418.904 418.904 0 0 1 2.018 3.875c.404.817 0 1.633-1.212 1.633h-7.272c-1.212 0-1.617-.816-1.212-1.633.202-.408 1.113-2.147 2.023-3.883a421.932 421.932 0 0 0 2.017-3.872Z",
    })
  );
};
Pm.displayName = "AlertTriangleIcon";
var Em = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M15.78 5.97a.75.75 0 0 1 0 1.06l-6.5 6.5a.75.75 0 0 1-1.06 0l-3.25-3.25a.75.75 0 1 1 1.06-1.06l2.72 2.72 5.97-5.97a.75.75 0 0 1 1.06 0Z",
    })
  );
};
Em.displayName = "CheckIcon";
var nc = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M5.72 8.47a.75.75 0 0 1 1.06 0l3.47 3.47 3.47-3.47a.75.75 0 1 1 1.06 1.06l-4 4a.75.75 0 0 1-1.06 0l-4-4a.75.75 0 0 1 0-1.06Z",
    })
  );
};
nc.displayName = "ChevronDownIcon";
var ac = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M14.53 12.28a.75.75 0 0 1-1.06 0l-3.47-3.47-3.47 3.47a.75.75 0 0 1-1.06-1.06l4-4a.75.75 0 0 1 1.06 0l4 4a.75.75 0 0 1 0 1.06Z",
    })
  );
};
ac.displayName = "ChevronUpIcon";
var Hb = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", { d: "M11.5 8.25a.75.75 0 0 1 .75.75v4.25a.75.75 0 0 1-1.5 0v-4.25a.75.75 0 0 1 .75-.75Z" }),
    c.createElement("path", { d: "M9.25 9a.75.75 0 0 0-1.5 0v4.25a.75.75 0 0 0 1.5 0v-4.25Z" }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M7.25 5.25a2.75 2.75 0 0 1 5.5 0h3a.75.75 0 0 1 0 1.5h-.75v5.45c0 1.68 0 2.52-.327 3.162a3 3 0 0 1-1.311 1.311c-.642.327-1.482.327-3.162.327h-.4c-1.68 0-2.52 0-3.162-.327a3 3 0 0 1-1.311-1.311c-.327-.642-.327-1.482-.327-3.162v-5.45h-.75a.75.75 0 0 1 0-1.5h3Zm1.5 0a1.25 1.25 0 1 1 2.5 0h-2.5Zm-2.25 1.5h7v5.45c0 .865-.001 1.423-.036 1.848-.033.408-.09.559-.128.633a1.5 1.5 0 0 1-.655.655c-.074.038-.225.095-.633.128-.425.035-.983.036-1.848.036h-.4c-.865 0-1.423-.001-1.848-.036-.408-.033-.559-.09-.633-.128a1.5 1.5 0 0 1-.656-.655c-.037-.074-.094-.225-.127-.633-.035-.425-.036-.983-.036-1.848v-5.45Z",
    })
  );
};
Hb.displayName = "DeleteIcon";
var Qb = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M15.655 4.344a2.695 2.695 0 0 0-3.81 0l-.599.599-.009-.009-1.06 1.06.008.01-5.88 5.88a2.75 2.75 0 0 0-.805 1.944v1.922a.75.75 0 0 0 .75.75h1.922a2.75 2.75 0 0 0 1.944-.806l7.54-7.539a2.695 2.695 0 0 0 0-3.81Zm-4.409 2.72-5.88 5.88a1.25 1.25 0 0 0-.366.884v1.172h1.172c.331 0 .65-.132.883-.366l5.88-5.88-1.689-1.69Zm2.75.629.599-.599a1.195 1.195 0 1 0-1.69-1.689l-.598.599 1.69 1.689Z",
    })
  );
};
Qb.displayName = "EditIcon";
var Zb = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      d: "M11.977 4.751a7.598 7.598 0 0 0-1.977-.251c-2.444 0-4.196 1.045-5.325 2.233a7.188 7.188 0 0 0-1.243 1.773c-.26.532-.432 1.076-.432 1.494 0 .418.171.962.432 1.493.172.354.4.734.687 1.116l1.074-1.074a5.388 5.388 0 0 1-.414-.7c-.221-.453-.279-.753-.279-.835 0-.082.058-.382.279-.835a5.71 5.71 0 0 1 .983-1.398c.89-.937 2.264-1.767 4.238-1.767.24 0 .471.012.693.036l1.284-1.285Z",
    }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M4.25 14.6a.75.75 0 0 0 1.067 1.053l1.062-1.061c.975.543 2.177.908 3.621.908 2.45 0 4.142-1.05 5.24-2.242 1.078-1.17 1.588-2.476 1.738-3.076a.749.749 0 0 0 0-.364c-.15-.6-.66-1.906-1.738-3.076a7.245 7.245 0 0 0-.51-.502l.923-.923a.75.75 0 0 0-1.053-1.068l-.008.008-10.335 10.336-.008.007Zm5.75-.6c-.978 0-1.809-.204-2.506-.523l1.108-1.109a2.75 2.75 0 0 0 3.766-3.766l1.3-1.299c.169.147.325.3.469.455a6.387 6.387 0 0 1 1.332 2.242 6.387 6.387 0 0 1-1.332 2.242c-.86.933-2.17 1.758-4.137 1.758Zm0-2.75c-.087 0-.172-.01-.254-.026l1.478-1.478a1.25 1.25 0 0 1-1.224 1.504Z",
    })
  );
};
Zb.displayName = "HideIcon";
var Dm = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", { d: "M10 14a.75.75 0 0 1-.75-.75v-3.5a.75.75 0 0 1 1.5 0v3.5a.75.75 0 0 1-.75.75Z" }),
    c.createElement("path", { d: "M9 7a1 1 0 1 1 2 0 1 1 0 0 1-2 0Z" }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Zm-1.5 0a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0Z",
    })
  );
};
Dm.displayName = "InfoIcon";
var Um = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M5 10c0-.414.336-.75.75-.75h8.5c.414 0 .75.336.75.75s-.336.75-.75.75h-8.5c-.414 0-.75-.336-.75-.75Z",
    })
  );
};
Um.displayName = "MinusIcon";
var Jb = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", { d: "M6.55 7.25a.7.7 0 0 1 .7-.7h5.5a.7.7 0 0 1 0 1.4h-5.5a.7.7 0 0 1-.7-.7Z" }),
    c.createElement("path", { d: "M7 9.05a.7.7 0 0 0 0 1.4h2.25a.7.7 0 1 0 0-1.4h-2.25Z" }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M3.5 6.25a2.75 2.75 0 0 1 2.75-2.75h7.5a2.75 2.75 0 0 1 2.75 2.75v5.5a.75.75 0 0 1-.22.53l-4 4a.75.75 0 0 1-.53.22h-5.5a2.75 2.75 0 0 1-2.75-2.75v-7.5Zm2.75-1.25c-.69 0-1.25.56-1.25 1.25v7.5c0 .69.56 1.25 1.25 1.25h4.75v-2.25c0-.966.784-1.75 1.75-1.75h2.25v-4.75c0-.69-.56-1.25-1.25-1.25h-7.5Zm7.69 7.5h-1.19a.25.25 0 0 0-.25.25v1.19l1.44-1.44Z",
    })
  );
};
Jb.displayName = "NoteIcon";
var qm = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      d: "M10.884 4.323a1.25 1.25 0 0 0-1.768 0l-2.646 2.647a.75.75 0 0 0 1.06 1.06l2.47-2.47 2.47 2.47a.75.75 0 1 0 1.06-1.06l-2.646-2.647Z",
    }),
    c.createElement("path", {
      d: "m13.53 13.03-2.646 2.647a1.25 1.25 0 0 1-1.768 0l-2.646-2.647a.75.75 0 0 1 1.06-1.06l2.47 2.47 2.47-2.47a.75.75 0 0 1 1.06 1.06Z",
    })
  );
};
qm.displayName = "SelectIcon";
var Yb = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", { fillRule: "evenodd", d: "M13 10a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm-1.5 0a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z" }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M10 4c-2.476 0-4.348 1.23-5.577 2.532a9.266 9.266 0 0 0-1.4 1.922 5.98 5.98 0 0 0-.37.818c-.082.227-.153.488-.153.728s.071.501.152.728c.088.246.213.524.371.818.317.587.784 1.27 1.4 1.922 1.229 1.302 3.1 2.532 5.577 2.532 2.476 0 4.348-1.23 5.577-2.532a9.265 9.265 0 0 0 1.4-1.922 5.98 5.98 0 0 0 .37-.818c.082-.227.153-.488.153-.728s-.071-.501-.152-.728a5.984 5.984 0 0 0-.371-.818 9.269 9.269 0 0 0-1.4-1.922c-1.229-1.302-3.1-2.532-5.577-2.532Zm-5.999 6.002v-.004c.004-.02.017-.09.064-.223a4.5 4.5 0 0 1 .278-.608 7.768 7.768 0 0 1 1.17-1.605c1.042-1.104 2.545-2.062 4.487-2.062 1.942 0 3.445.958 4.486 2.062a7.77 7.77 0 0 1 1.17 1.605c.13.24.221.447.279.608.047.132.06.203.064.223v.004c-.004.02-.017.09-.064.223a4.503 4.503 0 0 1-.278.608 7.768 7.768 0 0 1-1.17 1.605c-1.042 1.104-2.545 2.062-4.487 2.062-1.942 0-3.445-.958-4.486-2.062a7.766 7.766 0 0 1-1.17-1.605 4.5 4.5 0 0 1-.279-.608c-.047-.132-.06-.203-.064-.223Z",
    })
  );
};
Yb.displayName = "ViewIcon";
var Vm = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      d: "M13.03 6.97a.75.75 0 0 1 0 1.06l-1.97 1.97 1.97 1.97a.75.75 0 1 1-1.06 1.06l-1.97-1.97-1.97 1.97a.75.75 0 0 1-1.06-1.06l1.97-1.97-1.97-1.97a.75.75 0 0 1 1.06-1.06l1.97 1.97 1.97-1.97a.75.75 0 0 1 1.06 0Z",
    }),
    c.createElement("path", {
      fillRule: "evenodd",
      d: "M10 17a7 7 0 1 0 0-14 7 7 0 0 0 0 14Zm0-1.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11Z",
    })
  );
};
Vm.displayName = "XCircleIcon";
var _m = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      d: "M12.72 13.78a.75.75 0 1 0 1.06-1.06l-2.72-2.72 2.72-2.72a.75.75 0 0 0-1.06-1.06l-2.72 2.72-2.72-2.72a.75.75 0 0 0-1.06 1.06l2.72 2.72-2.72 2.72a.75.75 0 1 0 1.06 1.06l2.72-2.72 2.72 2.72Z",
    })
  );
};
_m.displayName = "XIcon";
var $m = function (t) {
  return c.createElement(
    "svg",
    Object.assign({ viewBox: "0 0 20 20" }, t),
    c.createElement("path", {
      d: "M12.72 13.78a.75.75 0 1 0 1.06-1.06l-2.72-2.72 2.72-2.72a.75.75 0 0 0-1.06-1.06l-2.72 2.72-2.72-2.72a.75.75 0 0 0-1.06 1.06l2.72 2.72-2.72 2.72a.75.75 0 1 0 1.06 1.06l2.72-2.72 2.72 2.72Z",
    })
  );
};
$m.displayName = "XSmallIcon";
function Xb(e) {
  const { top: t, left: i, bottom: n, right: a } = e.getBoundingClientRect();
  return t >= 0 && a <= window.innerWidth && n <= window.innerHeight && i >= 0;
}
const pu =
    'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]',
  zl =
    'a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not([aria-disabled="true"]):not([tabindex="-1"]):not(:disabled),*[tabindex]:not([tabindex="-1"])',
  Kb =
    'a[role="menuitem"],frame[role="menuitem"],iframe[role="menuitem"],input[role="menuitem"]:not([type=hidden]):not(:disabled),select[role="menuitem"]:not(:disabled),textarea[role="menuitem"]:not(:disabled),button[role="menuitem"]:not(:disabled),*[tabindex]:not([tabindex="-1"])',
  rc = ({ currentTarget: e }) => e.blur();
function e0(e, t) {
  const i = [...document.querySelectorAll(pu)],
    n = i.indexOf(e) + 1,
    a = i.slice(n);
  for (const r of a) if (Xb(r) && (!t || (t && t(r)))) return r;
  return null;
}
function t0(e, t = !0) {
  return !t && pd(e, pu) ? e : e.querySelector(pu);
}
function Ms(e) {
  const t = "a,button,frame,iframe,input:not([type=hidden]),select,textarea,*[tabindex]";
  return pd(e, t) ? e : e.querySelector(t);
}
function o5(e, t = !0) {
  var i;
  (i = t0(e, t)) == null || i.focus();
}
function Ip(e, t) {
  const i = e0(e, t);
  return i && i instanceof HTMLElement ? (i.focus(), !0) : !1;
}
function Gm(e, t = !0) {
  return !t && pd(e, zl) ? e : e.querySelector(zl);
}
function s5(e, t = !0) {
  const i = Gm(e, t);
  return i ? (i.focus(), !0) : !1;
}
function i0(e, t = !0) {
  if (!t && pd(e, zl)) return e;
  const i = e.querySelectorAll(zl);
  return i[i.length - 1];
}
function l5(e, t = !0) {
  const i = i0(e, t);
  return i ? (i.focus(), !0) : !1;
}
function d5(e, t) {
  const i = jm(e),
    n = zm(i, t);
  n === -1 ? i[0].focus() : i[(n - 1 + i.length) % i.length].focus();
}
function u5(e, t) {
  const i = jm(e),
    n = zm(i, t);
  n === -1 ? i[0].focus() : i[(n + 1) % i.length].focus();
}
function jm(e) {
  return e.querySelectorAll(Kb);
}
function zm(e, t) {
  let i = 0;
  for (const n of e) {
    if (n === t) break;
    i++;
  }
  return i === e.length ? -1 : i;
}
function pd(e, t) {
  if (e.matches) return e.matches(t);
  const i = (e.ownerDocument || document).querySelectorAll(t);
  let n = i.length;
  for (; --n >= 0 && i.item(n) !== e; ) return n > -1;
}
var xt = {
    Button: "Polaris-Button",
    disabled: "Polaris-Button--disabled",
    pressed: "Polaris-Button--pressed",
    variantPrimary: "Polaris-Button--variantPrimary",
    variantSecondary: "Polaris-Button--variantSecondary",
    variantTertiary: "Polaris-Button--variantTertiary",
    variantPlain: "Polaris-Button--variantPlain",
    removeUnderline: "Polaris-Button--removeUnderline",
    variantMonochromePlain: "Polaris-Button--variantMonochromePlain",
    toneSuccess: "Polaris-Button--toneSuccess",
    toneCritical: "Polaris-Button--toneCritical",
    sizeMicro: "Polaris-Button--sizeMicro",
    sizeSlim: "Polaris-Button--sizeSlim",
    sizeMedium: "Polaris-Button--sizeMedium",
    sizeLarge: "Polaris-Button--sizeLarge",
    textAlignCenter: "Polaris-Button--textAlignCenter",
    textAlignStart: "Polaris-Button--textAlignStart",
    textAlignLeft: "Polaris-Button--textAlignLeft",
    textAlignEnd: "Polaris-Button--textAlignEnd",
    textAlignRight: "Polaris-Button--textAlignRight",
    fullWidth: "Polaris-Button--fullWidth",
    iconOnly: "Polaris-Button--iconOnly",
    iconWithText: "Polaris-Button--iconWithText",
    disclosure: "Polaris-Button--disclosure",
    loading: "Polaris-Button--loading",
    pressable: "Polaris-Button--pressable",
    hidden: "Polaris-Button--hidden",
    Icon: "Polaris-Button__Icon",
    Spinner: "Polaris-Button__Spinner",
  },
  Os = {
    Icon: "Polaris-Icon",
    toneInherit: "Polaris-Icon--toneInherit",
    toneBase: "Polaris-Icon--toneBase",
    toneSubdued: "Polaris-Icon--toneSubdued",
    toneCaution: "Polaris-Icon--toneCaution",
    toneWarning: "Polaris-Icon--toneWarning",
    toneCritical: "Polaris-Icon--toneCritical",
    toneInteractive: "Polaris-Icon--toneInteractive",
    toneInfo: "Polaris-Icon--toneInfo",
    toneSuccess: "Polaris-Icon--toneSuccess",
    tonePrimary: "Polaris-Icon--tonePrimary",
    toneEmphasis: "Polaris-Icon--toneEmphasis",
    toneMagic: "Polaris-Icon--toneMagic",
    toneTextCaution: "Polaris-Icon--toneTextCaution",
    toneTextWarning: "Polaris-Icon--toneTextWarning",
    toneTextCritical: "Polaris-Icon--toneTextCritical",
    toneTextInfo: "Polaris-Icon--toneTextInfo",
    toneTextPrimary: "Polaris-Icon--toneTextPrimary",
    toneTextSuccess: "Polaris-Icon--toneTextSuccess",
    toneTextMagic: "Polaris-Icon--toneTextMagic",
    Svg: "Polaris-Icon__Svg",
    Img: "Polaris-Icon__Img",
    Placeholder: "Polaris-Icon__Placeholder",
  },
  jn = {
    root: "Polaris-Text--root",
    block: "Polaris-Text--block",
    truncate: "Polaris-Text--truncate",
    visuallyHidden: "Polaris-Text--visuallyHidden",
    start: "Polaris-Text--start",
    center: "Polaris-Text--center",
    end: "Polaris-Text--end",
    justify: "Polaris-Text--justify",
    base: "Polaris-Text--base",
    inherit: "Polaris-Text--inherit",
    disabled: "Polaris-Text--disabled",
    success: "Polaris-Text--success",
    critical: "Polaris-Text--critical",
    caution: "Polaris-Text--caution",
    subdued: "Polaris-Text--subdued",
    magic: "Polaris-Text--magic",
    "magic-subdued": "Polaris-Text__magic--subdued",
    "text-inverse": "Polaris-Text__text--inverse",
    "text-inverse-secondary": "Polaris-Text--textInverseSecondary",
    headingXs: "Polaris-Text--headingXs",
    headingSm: "Polaris-Text--headingSm",
    headingMd: "Polaris-Text--headingMd",
    headingLg: "Polaris-Text--headingLg",
    headingXl: "Polaris-Text--headingXl",
    heading2xl: "Polaris-Text--heading2xl",
    heading3xl: "Polaris-Text--heading3xl",
    bodyXs: "Polaris-Text--bodyXs",
    bodySm: "Polaris-Text--bodySm",
    bodyMd: "Polaris-Text--bodyMd",
    bodyLg: "Polaris-Text--bodyLg",
    regular: "Polaris-Text--regular",
    medium: "Polaris-Text--medium",
    semibold: "Polaris-Text--semibold",
    bold: "Polaris-Text--bold",
    break: "Polaris-Text--break",
    numeric: "Polaris-Text--numeric",
    "line-through": "Polaris-Text__line--through",
  };
const Nt = ({
  alignment: e,
  as: t,
  breakWord: i,
  children: n,
  tone: a,
  fontWeight: r,
  id: o,
  numeric: s = !1,
  truncate: l = !1,
  variant: d,
  visuallyHidden: u = !1,
  textDecorationLine: f,
}) => {
  const p = t || (u ? "span" : "p"),
    m = re(
      jn.root,
      d && jn[d],
      r && jn[r],
      (e || l) && jn.block,
      e && jn[e],
      i && jn.break,
      a && jn[a],
      s && jn.numeric,
      l && jn.truncate,
      u && jn.visuallyHidden,
      f && jn[f]
    );
  return c.createElement(p, Object.assign({ className: m }, o && { id: o }), n);
};
function yn({ source: e, tone: t, accessibilityLabel: i }) {
  let n;
  typeof e == "function" ? (n = "function") : e === "placeholder" ? (n = "placeholder") : (n = "external");
  const a = re(Os.Icon, t && Os[kt("tone", t)]),
    { mdDown: r } = tc(),
    o = e,
    s = {
      function: c.createElement(
        o,
        Object.assign({ className: Os.Svg, focusable: "false", "aria-hidden": "true" }, r ? { viewBox: "1 1 18 18" } : {})
      ),
      placeholder: c.createElement("div", { className: Os.Placeholder }),
      external: c.createElement("img", { className: Os.Img, src: `data:image/svg+xml;utf8,${e}`, alt: "", "aria-hidden": "true" }),
    };
  return c.createElement("span", { className: a }, i && c.createElement(Nt, { as: "span", visuallyHidden: !0 }, i), s[n]);
}
var Sp = { Spinner: "Polaris-Spinner", sizeSmall: "Polaris-Spinner--sizeSmall", sizeLarge: "Polaris-Spinner--sizeLarge" };
function Wm({ size: e = "large", accessibilityLabel: t, hasFocusableParent: i }) {
  const n = cd(),
    a = re(Sp.Spinner, e && Sp[kt("size", e)]),
    r =
      e === "large"
        ? c.createElement(
            "svg",
            { viewBox: "0 0 44 44", xmlns: "http://www.w3.org/2000/svg" },
            c.createElement("path", {
              d: "M15.542 1.487A21.507 21.507 0 00.5 22c0 11.874 9.626 21.5 21.5 21.5 9.847 0 18.364-6.675 20.809-16.072a1.5 1.5 0 00-2.904-.756C37.803 34.755 30.473 40.5 22 40.5 11.783 40.5 3.5 32.217 3.5 22c0-8.137 5.3-15.247 12.942-17.65a1.5 1.5 0 10-.9-2.863z",
            })
          )
        : c.createElement(
            "svg",
            { viewBox: "0 0 20 20", xmlns: "http://www.w3.org/2000/svg" },
            c.createElement("path", {
              d: "M7.229 1.173a9.25 9.25 0 1011.655 11.412 1.25 1.25 0 10-2.4-.698 6.75 6.75 0 11-8.506-8.329 1.25 1.25 0 10-.75-2.385z",
            })
          ),
    o = { ...(!i && { role: "status" }) },
    s = (n || !i) && c.createElement(Nt, { as: "span", visuallyHidden: !0 }, t);
  return c.createElement(c.Fragment, null, c.createElement("span", { className: a }, r), c.createElement("span", o, s));
}
function n0(e, t) {
  const i = b.useCallback(
    (n) => {
      e && (n.preventDefault(), n.stopPropagation());
    },
    [e]
  );
  return e ? i : t;
}
function a0() {
  return b.useContext(Rm);
}
const r0 = b.memo(
  b.forwardRef(function (t, i) {
    const n = a0();
    if (n) return c.createElement(n, Object.assign({}, ap.props, t, { ref: i }));
    const { external: a, url: r, target: o, ...s } = t;
    let l;
    a ? (l = "_blank") : (l = o ?? void 0);
    const d = l === "_blank" ? "noopener noreferrer" : void 0;
    return c.createElement("a", Object.assign({ target: l }, s, { href: r, rel: d }, ap.props, { ref: i }));
  })
);
function o0({
  id: e,
  children: t,
  className: i,
  url: n,
  external: a,
  target: r,
  download: o,
  submit: s,
  disabled: l,
  loading: d,
  pressed: u,
  accessibilityLabel: f,
  role: p,
  ariaControls: m,
  ariaExpanded: h,
  ariaDescribedBy: k,
  ariaChecked: x,
  onClick: T,
  onFocus: y,
  onBlur: v,
  onKeyDown: S,
  onKeyPress: F,
  onKeyUp: w,
  onMouseEnter: M,
  onTouchStart: C,
  ...$
}) {
  let L;
  const U = { id: e, className: i, "aria-label": f },
    P = { ...U, role: p, onClick: T, onFocus: y, onBlur: v, onMouseUp: rc, onMouseEnter: M, onTouchStart: C },
    z = n0(l, T);
  return (
    n
      ? (L = l
          ? c.createElement("a", U, t)
          : c.createElement(r0, Object.assign({}, P, { url: n, external: a, target: r, download: o }, $), t))
      : (L = c.createElement(
          "button",
          Object.assign(
            {},
            P,
            {
              "aria-disabled": l,
              type: s ? "submit" : "button",
              "aria-busy": d ? !0 : void 0,
              "aria-controls": m,
              "aria-expanded": h,
              "aria-describedby": k,
              "aria-checked": x,
              "aria-pressed": u,
              onKeyDown: S,
              onKeyUp: w,
              onKeyPress: F,
              onClick: z,
              tabIndex: l ? -1 : void 0,
            },
            $
          ),
          t
        )),
    L
  );
}
class s0 extends Error {
  constructor(t = "") {
    super(
      `${
        t && `${t} `
      }Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions.`
    ),
      (this.name = "MissingAppProviderError");
  }
}
function Po() {
  const e = b.useContext(Mm);
  if (!e) throw new s0("No i18n was provided.");
  return e;
}
function Pl({
  id: e,
  children: t,
  url: i,
  disabled: n,
  external: a,
  download: r,
  target: o,
  submit: s,
  loading: l,
  pressed: d,
  accessibilityLabel: u,
  role: f,
  ariaControls: p,
  ariaExpanded: m,
  ariaDescribedBy: h,
  ariaChecked: k,
  onClick: x,
  onFocus: T,
  onBlur: y,
  onKeyDown: v,
  onKeyPress: S,
  onKeyUp: F,
  onMouseEnter: w,
  onTouchStart: M,
  onPointerDown: C,
  icon: $,
  disclosure: L,
  removeUnderline: U,
  size: P = "medium",
  textAlign: z = "center",
  fullWidth: E,
  dataPrimaryLink: K,
  tone: J,
  variant: Q = "secondary",
}) {
  const oe = Po(),
    qe = n || l,
    { mdUp: te } = tc(),
    Ot = re(
      xt.Button,
      xt.pressable,
      xt[kt("variant", Q)],
      xt[kt("size", P)],
      xt[kt("textAlign", z)],
      E && xt.fullWidth,
      L && xt.disclosure,
      $ && t && xt.iconWithText,
      $ && t == null && xt.iconOnly,
      qe && xt.disabled,
      l && xt.loading,
      d && !n && !i && xt.pressed,
      U && xt.removeUnderline,
      J && xt[kt("tone", J)]
    ),
    Yt = L
      ? c.createElement("span", { className: l ? xt.hidden : xt.Icon }, c.createElement(yn, { source: l ? "placeholder" : d0(L, ac, nc) }))
      : null,
    ai = l0($) ? c.createElement(yn, { source: l ? "placeholder" : $ }) : $,
    ri = ai ? c.createElement("span", { className: l ? xt.hidden : xt.Icon }, ai) : null,
    Ie = ["plain", "monochromePlain"].includes(Q);
  let Se = "medium";
  Ie ? (Se = "regular") : Q === "primary" && (Se = te ? "medium" : "semibold");
  let wt = "bodySm";
  (P === "large" || (Ie && P !== "micro")) && (wt = "bodyMd");
  const $n = t ? c.createElement(Nt, { as: "span", variant: wt, fontWeight: Se, key: n ? "text-disabled" : "text" }, t) : null,
    rr = l
      ? c.createElement(
          "span",
          { className: xt.Spinner },
          c.createElement(Wm, { size: "small", accessibilityLabel: oe.translate("Polaris.Button.spinnerAccessibilityLabel") })
        )
      : null,
    or = {
      id: e,
      className: Ot,
      accessibilityLabel: u,
      ariaDescribedBy: h,
      role: f,
      onClick: x,
      onFocus: T,
      onBlur: y,
      onMouseUp: rc,
      onMouseEnter: w,
      onTouchStart: M,
      "data-primary-link": K,
    },
    oi = { url: i, external: a, download: r, target: o },
    Ai = {
      submit: s,
      disabled: qe,
      loading: l,
      ariaControls: p,
      ariaExpanded: m,
      ariaChecked: k,
      pressed: d,
      onKeyDown: v,
      onKeyUp: F,
      onKeyPress: S,
      onPointerDown: C,
    };
  return c.createElement(o0, Object.assign({}, or, oi, Ai), rr, ri, $n, Yt);
}
function l0(e) {
  return typeof e == "string" || (typeof e == "object" && e.body) || typeof e == "function";
}
function d0(e, t, i) {
  return e === "select" ? qm : e === "up" ? t : i;
}
function c5(e, t = {}) {
  return Array.isArray(e) ? e.map((i, n) => fu(i, t, n)) : fu(e, t);
}
function fu({ content: e, onAction: t, plain: i, destructive: n, ...a }, r, o) {
  const s = i ? "plain" : void 0,
    l = n ? "primary" : void 0,
    d = !(r != null && r.tone) && n ? "critical" : r == null ? void 0 : r.tone;
  return c.createElement(Pl, Object.assign({ key: o, onClick: t, tone: d, variant: s || l }, a, r), e);
}
var Fl = {
  listReset: "Polaris-Box--listReset",
  Box: "Polaris-Box",
  visuallyHidden: "Polaris-Box--visuallyHidden",
  printHidden: "Polaris-Box--printHidden",
};
const Un = b.forwardRef(
  (
    {
      as: e = "div",
      background: t,
      borderColor: i,
      borderStyle: n,
      borderWidth: a,
      borderBlockStartWidth: r,
      borderBlockEndWidth: o,
      borderInlineStartWidth: s,
      borderInlineEndWidth: l,
      borderRadius: d,
      borderEndStartRadius: u,
      borderEndEndRadius: f,
      borderStartStartRadius: p,
      borderStartEndRadius: m,
      children: h,
      color: k,
      id: x,
      minHeight: T,
      minWidth: y,
      maxWidth: v,
      overflowX: S,
      overflowY: F,
      outlineColor: w,
      outlineStyle: M,
      outlineWidth: C,
      padding: $,
      paddingBlock: L,
      paddingBlockStart: U,
      paddingBlockEnd: P,
      paddingInline: z,
      paddingInlineStart: E,
      paddingInlineEnd: K,
      role: J,
      shadow: Q,
      tabIndex: oe,
      width: qe,
      printHidden: te,
      visuallyHidden: Ot,
      position: Yt,
      insetBlockStart: ai,
      insetBlockEnd: ri,
      insetInlineStart: Ie,
      insetInlineEnd: Se,
      zIndex: wt,
      opacity: $n,
      ...rr
    },
    or
  ) => {
    const oi = n || (i || a || r || o || s || l ? "solid" : void 0),
      Ai = M || (w || C ? "solid" : void 0),
      ro = {
        "--pc-box-color": k ? `var(--p-color-${k})` : void 0,
        "--pc-box-background": t ? `var(--p-color-${t})` : void 0,
        "--pc-box-border-color": i ? (i === "transparent" ? "transparent" : `var(--p-color-${i})`) : void 0,
        "--pc-box-border-style": oi,
        "--pc-box-border-radius": d ? `var(--p-border-radius-${d})` : void 0,
        "--pc-box-border-end-start-radius": u ? `var(--p-border-radius-${u})` : void 0,
        "--pc-box-border-end-end-radius": f ? `var(--p-border-radius-${f})` : void 0,
        "--pc-box-border-start-start-radius": p ? `var(--p-border-radius-${p})` : void 0,
        "--pc-box-border-start-end-radius": m ? `var(--p-border-radius-${m})` : void 0,
        "--pc-box-border-width": a ? `var(--p-border-width-${a})` : void 0,
        "--pc-box-border-block-start-width": r ? `var(--p-border-width-${r})` : void 0,
        "--pc-box-border-block-end-width": o ? `var(--p-border-width-${o})` : void 0,
        "--pc-box-border-inline-start-width": s ? `var(--p-border-width-${s})` : void 0,
        "--pc-box-border-inline-end-width": l ? `var(--p-border-width-${l})` : void 0,
        "--pc-box-min-height": T,
        "--pc-box-min-width": y,
        "--pc-box-max-width": v,
        "--pc-box-outline-color": w ? `var(--p-color-${w})` : void 0,
        "--pc-box-outline-style": Ai,
        "--pc-box-outline-width": C ? `var(--p-border-width-${C})` : void 0,
        "--pc-box-overflow-x": S,
        "--pc-box-overflow-y": F,
        ...er("box", "padding-block-start", "space", U || L || $),
        ...er("box", "padding-block-end", "space", P || L || $),
        ...er("box", "padding-inline-start", "space", E || z || $),
        ...er("box", "padding-inline-end", "space", K || z || $),
        "--pc-box-shadow": Q ? `var(--p-shadow-${Q})` : void 0,
        "--pc-box-width": qe,
        position: Yt,
        "--pc-box-inset-block-start": ai ? `var(--p-space-${ai})` : void 0,
        "--pc-box-inset-block-end": ri ? `var(--p-space-${ri})` : void 0,
        "--pc-box-inset-inline-start": Ie ? `var(--p-space-${Ie})` : void 0,
        "--pc-box-inset-inline-end": Se ? `var(--p-space-${Se})` : void 0,
        zIndex: wt,
        opacity: $n,
      },
      oo = re(Fl.Box, Ot && Fl.visuallyHidden, te && Fl.printHidden, e === "ul" && Fl.listReset);
    return c.createElement(e, { className: oo, id: x, ref: or, style: Ku(ro), role: J, tabIndex: oe, ...rr }, h);
  }
);
Un.displayName = "Box";
var u0 = { InlineStack: "Polaris-InlineStack" };
const Oo = function ({ as: t = "div", align: i, direction: n = "row", blockAlign: a, gap: r, wrap: o = !0, children: s }) {
  const l = {
    "--pc-inline-stack-align": i,
    "--pc-inline-stack-block-align": a,
    "--pc-inline-stack-wrap": o ? "wrap" : "nowrap",
    ...er("inline-stack", "gap", "space", r),
    ...Sm("inline-stack", "flex-direction", n),
  };
  return c.createElement(t, { className: u0.InlineStack, style: l }, s);
};
var Bd = {
  BlockStack: "Polaris-BlockStack",
  listReset: "Polaris-BlockStack--listReset",
  fieldsetReset: "Polaris-BlockStack--fieldsetReset",
};
const Ro = ({ as: e = "div", children: t, align: i, inlineAlign: n, gap: a, id: r, reverseOrder: o = !1, ...s }) => {
  const l = re(Bd.BlockStack, (e === "ul" || e === "ol") && Bd.listReset, e === "fieldset" && Bd.fieldsetReset),
    d = {
      "--pc-block-stack-align": i ? `${i}` : null,
      "--pc-block-stack-inline-align": n ? `${n}` : null,
      "--pc-block-stack-order": o ? "column-reverse" : "column",
      ...er("block-stack", "gap", "space", a),
    };
  return c.createElement(e, { className: l, id: r, style: Ku(d), ...s }, t);
};
function c0({ alt: e, sourceSet: t, source: i, crossOrigin: n, onLoad: a, className: r, ...o }) {
  const s = t ? t.map(({ source: d, descriptor: u }) => `${d} ${u}`).join(",") : null,
    l = b.useCallback(() => {
      a && a();
    }, [a]);
  return c.createElement("img", Object.assign({ alt: e, src: i, crossOrigin: n, className: r, onLoad: l }, s ? { srcSet: s } : {}, o));
}
const p0 = b.createContext(!1);
var _o = {
  Badge: "Polaris-Badge",
  toneSuccess: "Polaris-Badge--toneSuccess",
  "toneSuccess-strong": "Polaris-Badge__toneSuccess--strong",
  toneInfo: "Polaris-Badge--toneInfo",
  "toneInfo-strong": "Polaris-Badge__toneInfo--strong",
  toneAttention: "Polaris-Badge--toneAttention",
  "toneAttention-strong": "Polaris-Badge__toneAttention--strong",
  toneWarning: "Polaris-Badge--toneWarning",
  "toneWarning-strong": "Polaris-Badge__toneWarning--strong",
  toneCritical: "Polaris-Badge--toneCritical",
  "toneCritical-strong": "Polaris-Badge__toneCritical--strong",
  toneNew: "Polaris-Badge--toneNew",
  toneMagic: "Polaris-Badge--toneMagic",
  "toneRead-only": "Polaris-Badge__toneRead--only",
  toneEnabled: "Polaris-Badge--toneEnabled",
  sizeLarge: "Polaris-Badge--sizeLarge",
  withinFilter: "Polaris-Badge--withinFilter",
  Icon: "Polaris-Badge__Icon",
  PipContainer: "Polaris-Badge__PipContainer",
};
let Ti;
(function (e) {
  (e.Info = "info"),
    (e.Success = "success"),
    (e.Warning = "warning"),
    (e.Critical = "critical"),
    (e.Attention = "attention"),
    (e.New = "new"),
    (e.Magic = "magic"),
    (e.InfoStrong = "info-strong"),
    (e.SuccessStrong = "success-strong"),
    (e.WarningStrong = "warning-strong"),
    (e.CriticalStrong = "critical-strong"),
    (e.AttentionStrong = "attention-strong"),
    (e.ReadOnly = "read-only"),
    (e.Enabled = "enabled");
})(Ti || (Ti = {}));
let js;
(function (e) {
  (e.Incomplete = "incomplete"), (e.PartiallyComplete = "partiallyComplete"), (e.Complete = "complete");
})(js || (js = {}));
function Lm(e, t, i) {
  let n = "",
    a = "";
  if (!t && !i) return "";
  switch (t) {
    case js.Incomplete:
      n = e.translate("Polaris.Badge.PROGRESS_LABELS.incomplete");
      break;
    case js.PartiallyComplete:
      n = e.translate("Polaris.Badge.PROGRESS_LABELS.partiallyComplete");
      break;
    case js.Complete:
      n = e.translate("Polaris.Badge.PROGRESS_LABELS.complete");
      break;
  }
  switch (i) {
    case Ti.Info:
    case Ti.InfoStrong:
      a = e.translate("Polaris.Badge.TONE_LABELS.info");
      break;
    case Ti.Success:
    case Ti.SuccessStrong:
      a = e.translate("Polaris.Badge.TONE_LABELS.success");
      break;
    case Ti.Warning:
    case Ti.WarningStrong:
      a = e.translate("Polaris.Badge.TONE_LABELS.warning");
      break;
    case Ti.Critical:
    case Ti.CriticalStrong:
      a = e.translate("Polaris.Badge.TONE_LABELS.critical");
      break;
    case Ti.Attention:
    case Ti.AttentionStrong:
      a = e.translate("Polaris.Badge.TONE_LABELS.attention");
      break;
    case Ti.New:
      a = e.translate("Polaris.Badge.TONE_LABELS.new");
      break;
    case Ti.ReadOnly:
      a = e.translate("Polaris.Badge.TONE_LABELS.readOnly");
      break;
    case Ti.Enabled:
      a = e.translate("Polaris.Badge.TONE_LABELS.enabled");
      break;
  }
  return !i && t ? n : i && !t ? a : e.translate("Polaris.Badge.progressAndTone", { progressLabel: n, toneLabel: a });
}
var Cd = {
  Pip: "Polaris-Badge-Pip",
  toneInfo: "Polaris-Badge-Pip--toneInfo",
  toneSuccess: "Polaris-Badge-Pip--toneSuccess",
  toneNew: "Polaris-Badge-Pip--toneNew",
  toneAttention: "Polaris-Badge-Pip--toneAttention",
  toneWarning: "Polaris-Badge-Pip--toneWarning",
  toneCritical: "Polaris-Badge-Pip--toneCritical",
  progressIncomplete: "Polaris-Badge-Pip--progressIncomplete",
  progressPartiallyComplete: "Polaris-Badge-Pip--progressPartiallyComplete",
  progressComplete: "Polaris-Badge-Pip--progressComplete",
};
function f0({ tone: e, progress: t = "complete", accessibilityLabelOverride: i }) {
  const n = Po(),
    a = re(Cd.Pip, e && Cd[kt("tone", e)], t && Cd[kt("progress", t)]),
    r = i || Lm(n, t, e);
  return c.createElement("span", { className: a }, c.createElement(Nt, { as: "span", visuallyHidden: !0 }, r));
}
const kp = "medium",
  m0 = {
    complete: () =>
      c.createElement(
        "svg",
        { viewBox: "0 0 20 20" },
        c.createElement("path", {
          d: "M6 10c0-.93 0-1.395.102-1.776a3 3 0 0 1 2.121-2.122C8.605 6 9.07 6 10 6c.93 0 1.395 0 1.776.102a3 3 0 0 1 2.122 2.122C14 8.605 14 9.07 14 10s0 1.395-.102 1.777a3 3 0 0 1-2.122 2.12C11.395 14 10.93 14 10 14s-1.395 0-1.777-.102a3 3 0 0 1-2.12-2.121C6 11.395 6 10.93 6 10Z",
        })
      ),
    partiallyComplete: () =>
      c.createElement(
        "svg",
        { viewBox: "0 0 20 20" },
        c.createElement("path", {
          fillRule: "evenodd",
          d: "m8.888 6.014-.017-.018-.02.02c-.253.013-.45.038-.628.086a3 3 0 0 0-2.12 2.122C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.121 2.12C8.605 14 9.07 14 10 14c.93 0 1.395 0 1.776-.102a3 3 0 0 0 2.122-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.122-2.122C11.395 6 10.93 6 10 6c-.475 0-.829 0-1.112.014ZM8.446 7.34a1.75 1.75 0 0 0-1.041.94l4.314 4.315c.443-.2.786-.576.941-1.042L8.446 7.34Zm4.304 2.536L10.124 7.25c.908.001 1.154.013 1.329.06a1.75 1.75 0 0 1 1.237 1.237c.047.175.059.42.06 1.329ZM8.547 12.69c.182.05.442.06 1.453.06h.106L7.25 9.894V10c0 1.01.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237Z",
        })
      ),
    incomplete: () =>
      c.createElement(
        "svg",
        { viewBox: "0 0 20 20" },
        c.createElement("path", {
          fillRule: "evenodd",
          d: "M8.547 12.69c.183.05.443.06 1.453.06s1.27-.01 1.453-.06a1.75 1.75 0 0 0 1.237-1.237c.05-.182.06-.443.06-1.453s-.01-1.27-.06-1.453a1.75 1.75 0 0 0-1.237-1.237c-.182-.05-.443-.06-1.453-.06s-1.27.01-1.453.06A1.75 1.75 0 0 0 7.31 8.547c-.05.183-.06.443-.06 1.453s.01 1.27.06 1.453a1.75 1.75 0 0 0 1.237 1.237ZM6.102 8.224C6 8.605 6 9.07 6 10s0 1.395.102 1.777a3 3 0 0 0 2.122 2.12C8.605 14 9.07 14 10 14s1.395 0 1.777-.102a3 3 0 0 0 2.12-2.121C14 11.395 14 10.93 14 10c0-.93 0-1.395-.102-1.776a3 3 0 0 0-2.121-2.122C11.395 6 10.93 6 10 6c-.93 0-1.395 0-1.776.102a3 3 0 0 0-2.122 2.122Z",
        })
      ),
  };
function y0({ children: e, tone: t, progress: i, icon: n, size: a = kp, toneAndProgressLabelOverride: r }) {
  const o = Po(),
    s = b.useContext(p0),
    l = re(_o.Badge, t && _o[kt("tone", t)], a && a !== kp && _o[kt("size", a)], s && _o.withinFilter),
    d = r || Lm(o, i, t);
  let u = !!d && c.createElement(Nt, { as: "span", visuallyHidden: !0 }, d);
  return (
    i && !n && (u = c.createElement("span", { className: _o.Icon }, c.createElement(yn, { accessibilityLabel: d, source: m0[i] }))),
    c.createElement(
      "span",
      { className: l },
      u,
      n && c.createElement("span", { className: _o.Icon }, c.createElement(yn, { source: n })),
      e && c.createElement(Nt, { as: "span", variant: "bodySm", fontWeight: t === "new" ? "medium" : void 0 }, e)
    )
  );
}
y0.Pip = f0;
function Hm(e) {
  const [t, i] = b.useState(e);
  return {
    value: t,
    toggle: b.useCallback(() => i((n) => !n), []),
    setTrue: b.useCallback(() => i(!0), []),
    setFalse: b.useCallback(() => i(!1), []),
  };
}
function g0() {
  const e = b.useContext(ic);
  if (!e)
    throw new Error(
      "No portals manager was provided. Your application must be wrapped in an <AppProvider> component. See https://polaris.shopify.com/components/app-provider for implementation instructions."
    );
  return e;
}
function h0({ children: e, idPrefix: t = "", onPortalCreated: i = b0 }) {
  const n = gb(),
    { container: a } = g0(),
    r = b.useId(),
    o = t !== "" ? `${t}-${r}` : r;
  return (
    b.useEffect(() => {
      i();
    }, [i]),
    a ? Ah.createPortal(c.createElement(Ib, { theme: vb(n) ? n : bs, "data-portal-id": o }, e), a) : null
  );
}
function b0() {}
function v0(e, t, i, n, a, r, o, s = 0) {
  const l = e.top,
    d = l + e.height,
    u = e.top - s,
    f = a.height - e.top - e.height,
    p = t.height,
    m = i.activator + i.container,
    h = i.container,
    k = e.top - Math.max(n.top, 0),
    x = a.top + Math.min(a.height, n.top + n.height) - (e.top + e.height),
    T = k >= h,
    y = x >= h,
    v = Math.min(u, p),
    S = Math.min(f, p),
    F = Math.min(u + e.height, p),
    w = Math.min(f + e.height, p),
    M = o ? 0 : a.top,
    C = { height: v - m, top: l + M - v, positioning: "above" },
    $ = { height: S - m, top: d + M, positioning: "below" },
    L = { height: w - m, top: l + M, positioning: "cover" },
    U = { height: F - m, top: l + M - v + e.height + m, positioning: "cover" };
  return r === "above"
    ? (T || (k >= x && !y)) && (u > p || u > f)
      ? C
      : $
    : r === "below"
    ? (y || (x >= k && !T)) && (f > p || f > u)
      ? $
      : C
    : r === "cover"
    ? (y || (x >= k && !T)) && (f + e.height > p || f > u)
      ? L
      : U
    : T && y
    ? u > f
      ? C
      : $
    : k > h
    ? C
    : $;
}
function I0(e, t, i, n, a) {
  const r = i.width - t.width;
  if (a === "left") return Math.min(r, Math.max(0, e.left - n.horizontal));
  if (a === "right") {
    const o = i.width - (e.left + e.width);
    return Math.min(r, Math.max(0, o - n.horizontal));
  }
  return Math.min(r, Math.max(0, e.center.x - t.width / 2));
}
function S0(e, t) {
  const { center: i } = e;
  return i.y < t.top || i.y > t.top + t.height;
}
function k0(e, t = Qm()) {
  const i = Math.max(e.top, 0),
    n = Math.max(e.left, 0),
    a = Math.min(e.top + e.height, t.height),
    r = Math.min(e.left + e.width, t.width);
  return new Mo({ top: i, left: n, height: a - i, width: r - n });
}
function Qm() {
  return new Mo({ top: window.scrollY, left: window.scrollX, height: window.innerHeight, width: document.body.clientWidth });
}
var Pd = {
  PositionedOverlay: "Polaris-PositionedOverlay",
  fixed: "Polaris-PositionedOverlay--fixed",
  calculating: "Polaris-PositionedOverlay--calculating",
  preventInteraction: "Polaris-PositionedOverlay--preventInteraction",
};
const Np = Symbol("unique_identifier");
function N0(e) {
  const t = b.useRef(Np);
  return t.current === Np && (t.current = e()), t;
}
function A0(e) {
  const t = cd(),
    i = b.useRef(!1);
  if (t && !i.current) return (i.current = !0), e();
}
const Zm = b.createContext(void 0);
var uo = {
  Scrollable: "Polaris-Scrollable",
  hasTopShadow: "Polaris-Scrollable--hasTopShadow",
  hasBottomShadow: "Polaris-Scrollable--hasBottomShadow",
  horizontal: "Polaris-Scrollable--horizontal",
  vertical: "Polaris-Scrollable--vertical",
  scrollbarWidthThin: "Polaris-Scrollable--scrollbarWidthThin",
  scrollbarWidthNone: "Polaris-Scrollable--scrollbarWidthNone",
  scrollbarWidthAuto: "Polaris-Scrollable--scrollbarWidthAuto",
  scrollbarGutterStable: "Polaris-Scrollable--scrollbarGutterStable",
  "scrollbarGutterStableboth-edges": "Polaris-Scrollable__scrollbarGutterStableboth--edges",
};
function F0() {
  const e = b.useRef(null),
    t = b.useContext(Zm);
  b.useEffect(() => {
    !t || !e.current || t(e.current.offsetTop);
  }, [t]);
  const i = b.useId();
  return c.createElement("a", { id: i, ref: e });
}
const Ap = 100,
  Jm = 2,
  Ym = b.forwardRef(
    (
      {
        children: e,
        className: t,
        horizontal: i = !0,
        vertical: n = !0,
        shadow: a,
        hint: r,
        focusable: o,
        scrollbarWidth: s = "thin",
        scrollbarGutter: l,
        onScrolledToBottom: d,
        ...u
      },
      f
    ) => {
      const [p, m] = b.useState(!1),
        [h, k] = b.useState(!1),
        x = N0(() => new wm()),
        T = b.useRef(null),
        y = b.useCallback((w, M = {}) => {
          var L;
          const C = M.behavior || "smooth",
            $ = Xm() ? "auto" : C;
          (L = T.current) == null || L.scrollTo({ top: w, behavior: $ });
        }, []),
        v = b.useRef();
      b.useImperativeHandle(f || v, () => ({ scrollTo: y }));
      const S = b.useCallback(() => {
        const w = T.current;
        w &&
          requestAnimationFrame(() => {
            const { scrollTop: M, clientHeight: C, scrollHeight: $ } = w,
              L = $ > C,
              U = M > 0,
              P = M + C >= $ - Jm;
            m(U), k(!P), L && P && d && d();
          });
      }, [d]);
      A0(() => {
        S(), r && requestAnimationFrame(() => w0(T.current));
      }),
        b.useEffect(() => {
          var C;
          const w = T.current;
          if (!w) return;
          const M = jl(S, 50, { trailing: !0 });
          return (
            (C = x.current) == null || C.setContainer(w),
            w.addEventListener("scroll", S),
            globalThis.addEventListener("resize", M),
            () => {
              w.removeEventListener("scroll", S), globalThis.removeEventListener("resize", M);
            }
          );
        }, [x, S]);
      const F = re(
        t,
        uo.Scrollable,
        n && uo.vertical,
        i && uo.horizontal,
        a && p && uo.hasTopShadow,
        a && h && uo.hasBottomShadow,
        s && uo[kt("scrollbarWidth", s)],
        l && uo[kt("scrollbarGutter", l.replace(" ", ""))]
      );
      return c.createElement(
        Zm.Provider,
        { value: y },
        c.createElement(
          Om.Provider,
          { value: x.current },
          c.createElement("div", Object.assign({ className: F }, Hu.props, u, { ref: T, tabIndex: o ? 0 : void 0 }), e)
        )
      );
    }
  );
Ym.displayName = "Scrollable";
function Xm() {
  try {
    return window.matchMedia("(prefers-reduced-motion: reduce)").matches;
  } catch {
    return !1;
  }
}
function w0(e) {
  if (!e || Xm()) return;
  const t = e.scrollHeight - e.clientHeight,
    i = Math.min(Ap, t) - Jm,
    n = () => {
      requestAnimationFrame(() => {
        e.scrollTop >= i && (e.removeEventListener("scroll", n), e.scrollTo({ top: 0, behavior: "smooth" }));
      });
    };
  e.addEventListener("scroll", n), e.scrollTo({ top: Ap, behavior: "smooth" });
}
const x0 = (e) => {
    const t = e.closest(Hu.selector);
    return t instanceof HTMLElement ? t : document;
  },
  Ks = Ym;
Ks.ScrollTo = F0;
Ks.forNode = x0;
const Fp = { childList: !0, subtree: !0, characterData: !0, attributeFilter: ["style"] };
class T0 extends b.PureComponent {
  constructor(t) {
    super(t),
      (this.state = {
        measuring: !0,
        activatorRect: vr(this.props.activator),
        right: void 0,
        left: void 0,
        top: 0,
        height: 0,
        width: null,
        positioning: "below",
        zIndex: null,
        outsideScrollableContainer: !1,
        lockPosition: !1,
        chevronOffset: 0,
      }),
      (this.overlay = null),
      (this.scrollableContainers = []),
      (this.overlayDetails = () => {
        const { measuring: i, left: n, right: a, positioning: r, height: o, activatorRect: s, chevronOffset: l } = this.state;
        return { measuring: i, left: n, right: a, desiredHeight: o, positioning: r, activatorRect: s, chevronOffset: l };
      }),
      (this.setOverlay = (i) => {
        this.overlay = i;
      }),
      (this.setScrollableContainers = () => {
        const i = [];
        let n = Ks.forNode(this.props.activator);
        if (n) for (i.push(n); n != null && n.parentElement; ) (n = Ks.forNode(n.parentElement)), i.push(n);
        this.scrollableContainers = i;
      }),
      (this.registerScrollHandlers = () => {
        this.scrollableContainers.forEach((i) => {
          i.addEventListener("scroll", this.handleMeasurement);
        });
      }),
      (this.unregisterScrollHandlers = () => {
        this.scrollableContainers.forEach((i) => {
          i.removeEventListener("scroll", this.handleMeasurement);
        });
      }),
      (this.handleMeasurement = () => {
        const { lockPosition: i, top: n } = this.state;
        this.observer.disconnect(),
          this.setState(
            ({ left: a, top: r, right: o }) => ({ left: a, right: o, top: r, height: 0, positioning: "below", measuring: !0 }),
            () => {
              if (this.overlay == null || this.firstScrollableContainer == null) return;
              const {
                  activator: a,
                  preferredPosition: r = "below",
                  preferredAlignment: o = "center",
                  onScrollOut: s,
                  fullWidth: l,
                  fixed: d,
                  preferInputActivator: u = !0,
                } = this.props,
                f = (u && a.querySelector("input")) || a,
                p = vr(f),
                m = vr(this.overlay),
                h = R0(this.firstScrollableContainer) ? document.body : this.firstScrollableContainer,
                k = vr(h),
                x = l || r === "cover" ? new Mo({ ...m, width: p.width }) : m;
              h === document.body && (k.height = document.body.scrollHeight);
              let T = 0;
              const y = h.querySelector(`${nm.selector}`);
              y && (T = y.clientHeight);
              const v =
                  this.overlay.firstElementChild && this.overlay.firstChild instanceof HTMLElement
                    ? M0(this.overlay.firstElementChild)
                    : { activator: 0, container: 0, horizontal: 0 },
                S = Qm(),
                F = O0(a),
                w = F == null ? F : F + 1,
                M = v0(p, x, v, k, S, r, d, T),
                C = I0(p, x, S, v, o),
                $ = p.center.x - C + v.horizontal * 2;
              this.setState(
                {
                  measuring: !1,
                  activatorRect: vr(a),
                  left: o !== "right" ? C : void 0,
                  right: o === "right" ? C : void 0,
                  top: i ? n : M.top,
                  lockPosition: !!d,
                  height: M.height || 0,
                  width: l || r === "cover" ? x.width : null,
                  positioning: M.positioning,
                  outsideScrollableContainer: s != null && S0(p, k0(k)),
                  zIndex: w,
                  chevronOffset: $,
                },
                () => {
                  this.overlay && (this.observer.observe(this.overlay, Fp), this.observer.observe(a, Fp));
                }
              );
            }
          );
      }),
      (this.observer = new MutationObserver(this.handleMeasurement));
  }
  componentDidMount() {
    this.setScrollableContainers(),
      this.scrollableContainers.length && !this.props.fixed && this.registerScrollHandlers(),
      this.handleMeasurement();
  }
  componentWillUnmount() {
    this.observer.disconnect(), this.scrollableContainers.length && !this.props.fixed && this.unregisterScrollHandlers();
  }
  componentDidUpdate() {
    const { outsideScrollableContainer: t, top: i } = this.state,
      { onScrollOut: n, active: a } = this.props;
    a && n != null && i !== 0 && t && n();
  }
  render() {
    const { left: t, right: i, top: n, zIndex: a, width: r } = this.state,
      { render: o, fixed: s, preventInteraction: l, classNames: d, zIndexOverride: u } = this.props,
      f = {
        top: n == null || isNaN(n) ? void 0 : n,
        left: t == null || isNaN(t) ? void 0 : t,
        right: i == null || isNaN(i) ? void 0 : i,
        width: r == null || isNaN(r) ? void 0 : r,
        zIndex: u || a || void 0,
      },
      p = re(Pd.PositionedOverlay, s && Pd.fixed, l && Pd.preventInteraction, d);
    return c.createElement(
      "div",
      { className: p, style: f, ref: this.setOverlay },
      c.createElement(Xs, { event: "resize", handler: this.handleMeasurement }),
      o(this.overlayDetails())
    );
  }
  get firstScrollableContainer() {
    return this.scrollableContainers[0] ?? null;
  }
  forceUpdatePosition() {
    requestAnimationFrame(this.handleMeasurement);
  }
}
function M0(e) {
  const t = window.getComputedStyle(e);
  return {
    activator: parseFloat(t.marginTop || "0"),
    container: parseFloat(t.marginBottom || "0"),
    horizontal: parseFloat(t.marginLeft || "0"),
  };
}
function O0(e) {
  const t = e.closest(wh.selector) || document.body,
    i = t === document.body ? "auto" : parseInt(window.getComputedStyle(t).zIndex || "0", 10);
  return i === "auto" || isNaN(i) ? null : i;
}
function R0(e) {
  return e === document;
}
function B0({ keyCode: e, handler: t, keyEvent: i = "keyup", options: n, useCapture: a }) {
  const r = b.useRef({ handler: t, keyCode: e });
  Ys(() => {
    r.current = { handler: t, keyCode: e };
  }, [t, e]);
  const o = b.useCallback((s) => {
    const { handler: l, keyCode: d } = r.current;
    s.keyCode === d && l(s);
  }, []);
  return (
    b.useEffect(
      () => (
        document.addEventListener(i, o, a || n),
        () => {
          document.removeEventListener(i, o, a || n);
        }
      ),
      [i, o, a, n]
    ),
    null
  );
}
var ae = {
  TextField: "Polaris-TextField",
  ClearButton: "Polaris-TextField__ClearButton",
  Loading: "Polaris-TextField__Loading",
  disabled: "Polaris-TextField--disabled",
  error: "Polaris-TextField--error",
  readOnly: "Polaris-TextField--readOnly",
  Input: "Polaris-TextField__Input",
  Backdrop: "Polaris-TextField__Backdrop",
  multiline: "Polaris-TextField--multiline",
  hasValue: "Polaris-TextField--hasValue",
  focus: "Polaris-TextField--focus",
  VerticalContent: "Polaris-TextField__VerticalContent",
  InputAndSuffixWrapper: "Polaris-TextField__InputAndSuffixWrapper",
  toneMagic: "Polaris-TextField--toneMagic",
  Prefix: "Polaris-TextField__Prefix",
  Suffix: "Polaris-TextField__Suffix",
  AutoSizeWrapper: "Polaris-TextField__AutoSizeWrapper",
  AutoSizeWrapperWithSuffix: "Polaris-TextField__AutoSizeWrapperWithSuffix",
  suggestion: "Polaris-TextField--suggestion",
  borderless: "Polaris-TextField--borderless",
  slim: "Polaris-TextField--slim",
  "Input-hasClearButton": "Polaris-TextField__Input--hasClearButton",
  "Input-suffixed": "Polaris-TextField__Input--suffixed",
  "Input-alignRight": "Polaris-TextField__Input--alignRight",
  "Input-alignLeft": "Polaris-TextField__Input--alignLeft",
  "Input-alignCenter": "Polaris-TextField__Input--alignCenter",
  "Input-autoSize": "Polaris-TextField__Input--autoSize",
  PrefixIcon: "Polaris-TextField__PrefixIcon",
  CharacterCount: "Polaris-TextField__CharacterCount",
  AlignFieldBottom: "Polaris-TextField__AlignFieldBottom",
  Spinner: "Polaris-TextField__Spinner",
  SpinnerIcon: "Polaris-TextField__SpinnerIcon",
  Resizer: "Polaris-TextField__Resizer",
  DummyInput: "Polaris-TextField__DummyInput",
  Segment: "Polaris-TextField__Segment",
  monospaced: "Polaris-TextField--monospaced",
};
const C0 = c.forwardRef(function ({ onChange: t, onClick: i, onMouseDown: n, onMouseUp: a, onBlur: r }, o) {
  function s(d) {
    return () => t(d);
  }
  function l(d) {
    return (u) => {
      u.button === 0 && (n == null || n(d));
    };
  }
  return c.createElement(
    "div",
    { className: ae.Spinner, onClick: i, "aria-hidden": !0, ref: o },
    c.createElement(
      "div",
      { role: "button", className: ae.Segment, tabIndex: -1, onClick: s(1), onMouseDown: l(s(1)), onMouseUp: a, onBlur: r },
      c.createElement("div", { className: ae.SpinnerIcon }, c.createElement(yn, { source: ac }))
    ),
    c.createElement(
      "div",
      { role: "button", className: ae.Segment, tabIndex: -1, onClick: s(-1), onMouseDown: l(s(-1)), onMouseUp: a, onBlur: r },
      c.createElement("div", { className: ae.SpinnerIcon }, c.createElement(yn, { source: nc }))
    )
  );
});
var co = {
    hidden: "Polaris-Labelled--hidden",
    LabelWrapper: "Polaris-Labelled__LabelWrapper",
    disabled: "Polaris-Labelled--disabled",
    HelpText: "Polaris-Labelled__HelpText",
    readOnly: "Polaris-Labelled--readOnly",
    Error: "Polaris-Labelled__Error",
    Action: "Polaris-Labelled__Action",
  },
  wp = { InlineError: "Polaris-InlineError", Icon: "Polaris-InlineError__Icon" };
function Km({ message: e, fieldID: t }) {
  return e
    ? c.createElement(
        "div",
        { id: ey(t), className: wp.InlineError },
        c.createElement("div", { className: wp.Icon }, c.createElement(yn, { source: Bm })),
        c.createElement(Nt, { as: "span", variant: "bodyMd" }, e)
      )
    : null;
}
function ey(e) {
  return `${e}Error`;
}
var wl = {
  Label: "Polaris-Label",
  hidden: "Polaris-Label--hidden",
  Text: "Polaris-Label__Text",
  RequiredIndicator: "Polaris-Label__RequiredIndicator",
};
function ty(e) {
  return `${e}Label`;
}
function P0({ children: e, id: t, hidden: i, requiredIndicator: n }) {
  const a = re(wl.Label, i && wl.hidden);
  return c.createElement(
    "div",
    { className: a },
    c.createElement(
      "label",
      { id: ty(t), htmlFor: t, className: re(wl.Text, n && wl.RequiredIndicator) },
      c.createElement(Nt, { as: "span", variant: "bodyMd" }, e)
    )
  );
}
function E0({
  id: e,
  label: t,
  error: i,
  action: n,
  helpText: a,
  children: r,
  labelHidden: o,
  requiredIndicator: s,
  disabled: l,
  readOnly: d,
  ...u
}) {
  const f = re(o && co.hidden, l && co.disabled, d && co.readOnly),
    p = n ? c.createElement("div", { className: co.Action }, fu(n, { variant: "plain" })) : null,
    m = a
      ? c.createElement(
          "div",
          { className: co.HelpText, id: iy(e), "aria-disabled": l },
          c.createElement(Nt, { as: "span", tone: "subdued", variant: "bodyMd", breakWord: !0 }, a)
        )
      : null,
    h = i && typeof i != "boolean" && c.createElement("div", { className: co.Error }, c.createElement(Km, { message: i, fieldID: e })),
    k = t
      ? c.createElement(
          "div",
          { className: co.LabelWrapper },
          c.createElement(P0, Object.assign({ id: e, requiredIndicator: s }, u, { hidden: !1 }), t),
          p
        )
      : null;
  return c.createElement("div", { className: f }, k, r, h, m);
}
function iy(e) {
  return `${e}HelpText`;
}
var Vs = {
  Connected: "Polaris-Connected",
  Item: "Polaris-Connected__Item",
  "Item-primary": "Polaris-Connected__Item--primary",
  "Item-focused": "Polaris-Connected__Item--focused",
};
function Ed({ children: e, position: t }) {
  const { value: i, setTrue: n, setFalse: a } = Hm(!1),
    r = re(Vs.Item, i && Vs["Item-focused"], t === "primary" ? Vs["Item-primary"] : Vs["Item-connection"]);
  return c.createElement("div", { onBlur: a, onFocus: n, className: r }, e);
}
function D0({ children: e, left: t, right: i }) {
  const n = t ? c.createElement(Ed, { position: "left" }, t) : null,
    a = i ? c.createElement(Ed, { position: "right" }, i) : null;
  return c.createElement("div", { className: Vs.Connected }, n, c.createElement(Ed, { position: "primary" }, e), a);
}
function U0({ contents: e, currentHeight: t = null, minimumLines: i, onHeightChange: n }) {
  const a = b.useRef(null),
    r = b.useRef(null),
    o = b.useRef(),
    s = b.useRef(t);
  t !== s.current && (s.current = t),
    b.useEffect(
      () => () => {
        o.current && cancelAnimationFrame(o.current);
      },
      []
    );
  const l = i ? c.createElement("div", { ref: r, className: ae.DummyInput, dangerouslySetInnerHTML: { __html: _0(i) } }) : null,
    d = b.useCallback(() => {
      o.current && cancelAnimationFrame(o.current),
        (o.current = requestAnimationFrame(() => {
          if (!a.current || !r.current) return;
          const u = Math.max(a.current.offsetHeight, r.current.offsetHeight);
          u !== s.current && n(u);
        }));
    }, [n]);
  return (
    Ys(() => {
      d();
    }),
    c.createElement(
      "div",
      { "aria-hidden": !0, className: ae.Resizer },
      c.createElement(Xs, { event: "resize", handler: d }),
      c.createElement("div", { ref: a, className: ae.DummyInput, dangerouslySetInnerHTML: { __html: $0(e) } }),
      l
    )
  );
}
const ny = { "&": "&amp;", "<": "&lt;", ">": "&gt;", "\n": "<br>", "\r": "" },
  q0 = new RegExp(`[${Object.keys(ny).join()}]`, "g");
function V0(e) {
  return ny[e];
}
function _0(e) {
  let t = "";
  for (let i = 0; i < e; i++) t += "<br>";
  return t;
}
function $0(e) {
  return e ? `${e.replace(q0, V0)}<br>` : "<br>";
}
function p5({
  prefix: e,
  suffix: t,
  verticalContent: i,
  placeholder: n,
  value: a = "",
  helpText: r,
  label: o,
  labelAction: s,
  labelHidden: l,
  disabled: d,
  clearButton: u,
  readOnly: f,
  autoFocus: p,
  focused: m,
  multiline: h,
  error: k,
  connectedRight: x,
  connectedLeft: T,
  type: y = "text",
  name: v,
  id: S,
  role: F,
  step: w,
  largeStep: M,
  autoComplete: C,
  max: $,
  maxLength: L,
  maxHeight: U,
  min: P,
  minLength: z,
  pattern: E,
  inputMode: K,
  spellCheck: J,
  ariaOwns: Q,
  ariaControls: oe,
  ariaExpanded: qe,
  ariaActiveDescendant: te,
  ariaAutocomplete: Ot,
  showCharacterCount: Yt,
  align: ai,
  requiredIndicator: ri,
  monospaced: Ie,
  selectTextOnFocus: Se,
  suggestion: wt,
  variant: $n = "inherit",
  size: rr = "medium",
  onClearButtonClick: or,
  onChange: oi,
  onSpinnerChange: Ai,
  onFocus: ro,
  onBlur: oo,
  tone: Ss,
  autoSize: bl,
  loading: Gc,
}) {
  const vl = Po(),
    [g, I] = b.useState(null),
    [A, G] = b.useState(!!m),
    q = cd(),
    R = b.useId(),
    V = S ?? R,
    ve = b.useRef(null),
    ge = b.useRef(null),
    so = b.useRef(null),
    pa = b.useRef(null),
    ks = b.useRef(null),
    lo = b.useRef(null),
    Nr = b.useRef(null),
    Ns = b.useRef(),
    qo = b.useRef(null),
    Ar = b.useCallback(() => (h ? so.current : ge.current), [h]);
  b.useEffect(() => {
    const j = Ar();
    !j || m === void 0 || (m ? j.focus() : j.blur());
  }, [m, i, Ar]),
    b.useEffect(() => {
      const j = ge.current;
      !j ||
        !(y === "text" || y === "tel" || y === "search" || y === "url" || y === "password") ||
        !wt ||
        j.setSelectionRange(a.length, wt.length);
    }, [A, a, y, wt]);
  const Fr = wt || a,
    jc = w ?? 1,
    zc = $ ?? 1 / 0,
    Wc = P ?? -1 / 0,
    th = re(
      ae.TextField,
      !!Fr && ae.hasValue,
      d && ae.disabled,
      f && ae.readOnly,
      k && ae.error,
      Ss && ae[kt("tone", Ss)],
      h && ae.multiline,
      A && !d && ae.focus,
      $n !== "inherit" && ae[$n],
      rr === "slim" && ae.slim
    ),
    ih = y === "currency" ? "text" : y,
    Il = y === "number" || y === "integer",
    nh = c.isValidElement(e) && e.type === yn,
    ah = e
      ? c.createElement(
          "div",
          { className: re(ae.Prefix, nh && ae.PrefixIcon), id: `${V}-Prefix`, ref: pa },
          c.createElement(Nt, { as: "span", variant: "bodyMd" }, e)
        )
      : null,
    Lc = t
      ? c.createElement(
          "div",
          { className: ae.Suffix, id: `${V}-Suffix`, ref: ks },
          c.createElement(Nt, { as: "span", variant: "bodyMd" }, t)
        )
      : null,
    rh = Gc ? c.createElement("div", { className: ae.Loading, id: `${V}-Loading`, ref: lo }, c.createElement(Wm, { size: "small" })) : null;
  let Hc = null;
  if (Yt) {
    const j = Fr.length,
      le = L
        ? vl.translate("Polaris.TextField.characterCountWithMaxLength", { count: j, limit: L })
        : vl.translate("Polaris.TextField.characterCount", { count: j }),
      si = re(ae.CharacterCount, h && ae.AlignFieldBottom),
      Fi = L ? `${j}/${L}` : j;
    Hc = c.createElement(
      "div",
      {
        id: `${V}-CharacterCounter`,
        className: si,
        "aria-label": le,
        "aria-live": A ? "polite" : "off",
        "aria-atomic": "true",
        onClick: Sl,
      },
      c.createElement(Nt, { as: "span", variant: "bodyMd" }, Fi)
    );
  }
  const oh =
      u && Fr !== ""
        ? c.createElement(
            "button",
            { type: "button", className: ae.ClearButton, onClick: bh, disabled: d },
            c.createElement(Nt, { as: "span", visuallyHidden: !0 }, vl.translate("Polaris.Common.clear")),
            c.createElement(yn, { source: Vm, tone: "base" })
          )
        : null,
    As = b.useCallback(
      (j, le = jc) => {
        if (oi == null && Ai == null) return;
        const si = (Sh) => (Sh.toString().split(".")[1] || []).length,
          Fi = a ? parseFloat(a) : 0;
        if (isNaN(Fi)) return;
        const fa = y === "integer" ? 0 : Math.max(si(Fi), si(le)),
          xs = Math.min(Number(zc), Math.max(Fi + j * le, Number(Wc)));
        Ai != null ? Ai(String(xs.toFixed(fa)), V) : oi != null && oi(String(xs.toFixed(fa)), V);
      },
      [V, zc, Wc, oi, Ai, jc, y, a]
    ),
    Td = b.useCallback(() => {
      clearTimeout(Ns.current);
    }, []),
    sh = b.useCallback(
      (j) => {
        let Fi = 200;
        const fa = () => {
          Fi > 50 && (Fi -= 10), j(0), (Ns.current = window.setTimeout(fa, Fi));
        };
        (Ns.current = window.setTimeout(fa, Fi)), document.addEventListener("mouseup", Td, { once: !0 });
      },
      [Td]
    ),
    lh =
      Il && w !== 0 && !d && !f
        ? c.createElement(C0, { onClick: Sl, onChange: As, onMouseDown: sh, onMouseUp: Td, ref: qo, onBlur: Xc })
        : null,
    dh = h && g ? { height: g, maxHeight: U } : null,
    uh = b.useCallback((j) => {
      I(j);
    }, []),
    ch =
      h && q
        ? c.createElement(U0, { contents: Fr || n, currentHeight: g, minimumLines: typeof h == "number" ? h : 1, onHeightChange: uh })
        : null,
    Fs = [];
  k && Fs.push(`${V}Error`), r && Fs.push(iy(V)), Yt && Fs.push(`${V}-CharacterCounter`);
  const ws = [];
  e && ws.push(`${V}-Prefix`), t && ws.push(`${V}-Suffix`), i && ws.push(`${V}-VerticalContent`), ws.unshift(ty(V));
  const ph = re(
      ae.Input,
      ai && ae[kt("Input-align", ai)],
      t && ae["Input-suffixed"],
      u && ae["Input-hasClearButton"],
      Ie && ae.monospaced,
      wt && ae.suggestion,
      bl && ae["Input-autoSize"]
    ),
    Qc = (j) => {
      if ((G(!0), Se && !wt)) {
        const le = Ar();
        le == null || le.select();
      }
      ro && ro(j);
    };
  Nm("wheel", fh, ge);
  function fh(j) {
    document.activeElement === j.target && Il && j.stopPropagation();
  }
  const Zc = b.createElement(h ? "textarea" : "input", {
      name: v,
      id: V,
      disabled: d,
      readOnly: f,
      role: F,
      autoFocus: p,
      value: Fr,
      placeholder: n,
      style: dh,
      autoComplete: C,
      className: ph,
      ref: h ? so : ge,
      min: P,
      max: $,
      step: w,
      minLength: z,
      maxLength: L,
      spellCheck: J,
      pattern: E,
      inputMode: K,
      type: ih,
      rows: G0(h),
      size: bl ? 1 : void 0,
      "aria-describedby": Fs.length ? Fs.join(" ") : void 0,
      "aria-labelledby": ws.join(" "),
      "aria-invalid": !!k,
      "aria-owns": Q,
      "aria-activedescendant": te,
      "aria-autocomplete": Ot,
      "aria-controls": oe,
      "aria-expanded": qe,
      "aria-required": ri,
      ...j0(h),
      onFocus: Qc,
      onBlur: Xc,
      onClick: Sl,
      onKeyPress: vh,
      onKeyDown: Ih,
      onChange: wt ? void 0 : Yc,
      onInput: wt ? Yc : void 0,
      "data-1p-ignore": C === "off" || void 0,
      "data-lpignore": C === "off" || void 0,
      "data-form-type": C === "off" ? "other" : void 0,
    }),
    mh = i ? c.createElement("div", { className: ae.VerticalContent, id: `${V}-VerticalContent`, ref: Nr, onClick: Sl }, i, Zc) : null,
    Jc = i ? mh : Zc,
    yh = c.createElement("div", { className: re(ae.Backdrop, T && ae["Backdrop-connectedLeft"], x && ae["Backdrop-connectedRight"]) }),
    gh = bl
      ? c.createElement(
          "div",
          { className: ae.InputAndSuffixWrapper },
          c.createElement(
            "div",
            { className: re(ae.AutoSizeWrapper, t && ae.AutoSizeWrapperWithSuffix), "data-auto-size-value": a || n },
            Jc
          ),
          Lc
        )
      : c.createElement(c.Fragment, null, Jc, Lc);
  return c.createElement(
    E0,
    { label: o, id: V, error: k, action: s, labelHidden: l, helpText: r, requiredIndicator: ri, disabled: d, readOnly: f },
    c.createElement(
      D0,
      { left: T, right: x },
      c.createElement("div", { className: th, onClick: hh, ref: ve }, ah, gh, Hc, rh, oh, lh, yh, ch)
    )
  );
  function Yc(j) {
    oi && oi(j.currentTarget.value, V);
  }
  function hh(j) {
    var Fi, fa, xs;
    const { target: le } = j,
      si = (Fi = ge == null ? void 0 : ge.current) == null ? void 0 : Fi.getAttribute("role");
    if (le === ge.current && si === "combobox") {
      (fa = ge.current) == null || fa.focus(), Qc(j);
      return;
    }
    Kc(le) || ip(le) || Md(le) || ep(le) || tp(le) || A || (xs = Ar()) == null || xs.focus();
  }
  function Sl(j) {
    var le;
    !ep(j.target) && !Md(j.target) && j.stopPropagation(),
      !(Kc(j.target) || ip(j.target) || Md(j.target) || tp(j.target) || A) && (G(!0), (le = Ar()) == null || le.focus());
  }
  function bh() {
    or && or(V);
  }
  function vh(j) {
    const { key: le, which: si } = j,
      Fi = /[\d.,eE+-]$/,
      fa = /[\deE+-]$/;
    !Il || si === Ja.Enter || (y === "number" && Fi.test(le)) || (y === "integer" && fa.test(le)) || j.preventDefault();
  }
  function Ih(j) {
    if (!Il) return;
    const { key: le, which: si } = j;
    y === "integer" && (le === "ArrowUp" || si === Ja.UpArrow) && (As(1), j.preventDefault()),
      y === "integer" && (le === "ArrowDown" || si === Ja.DownArrow) && (As(-1), j.preventDefault()),
      (si === Ja.Home || le === "Home") && P !== void 0 && (Ai != null ? Ai(String(P), V) : oi != null && oi(String(P), V)),
      (si === Ja.End || le === "End") && $ !== void 0 && (Ai != null ? Ai(String($), V) : oi != null && oi(String($), V)),
      (si === Ja.PageUp || le === "PageUp") && M !== void 0 && As(1, M),
      (si === Ja.PageDown || le === "PageDown") && M !== void 0 && As(-1, M);
  }
  function Xc(j) {
    var le;
    G(!1), !((le = ve.current) != null && le.contains(j == null ? void 0 : j.relatedTarget)) && oo && oo(j);
  }
  function Md(j) {
    const le = Ar();
    return j instanceof HTMLElement && le && (le.contains(j) || le.contains(document.activeElement));
  }
  function Kc(j) {
    return j instanceof Element && ((pa.current && pa.current.contains(j)) || (ks.current && ks.current.contains(j)));
  }
  function ep(j) {
    return j instanceof Element && qo.current && qo.current.contains(j);
  }
  function tp(j) {
    return j instanceof Element && lo.current && lo.current.contains(j);
  }
  function ip(j) {
    return j instanceof Element && Nr.current && (Nr.current.contains(j) || Nr.current.contains(document.activeElement));
  }
}
function G0(e) {
  if (e) return typeof e == "number" ? e : 1;
}
function j0(e) {
  if (e) return e || (typeof e == "number" && e > 0) ? { "aria-multiline": !0 } : void 0;
}
function z0(e, { id: t, active: i = !1, ariaHaspopup: n, activatorDisabled: a = !1 }) {
  a || (e.tabIndex = e.tabIndex || 0),
    e.setAttribute("aria-controls", t),
    e.setAttribute("aria-owns", t),
    e.setAttribute("aria-expanded", String(i)),
    e.setAttribute("data-state", i ? "open" : "closed"),
    n != null && e.setAttribute("aria-haspopup", String(n));
}
function fd(e, t, i) {
  return e == null ? null : oc(e, t) ? e : c.createElement(t, i, e);
}
const W0 = (e, t) => e === t;
function oc(e, t) {
  var o;
  if (e == null || !b.isValidElement(e) || typeof e.type == "string") return !1;
  const { type: i } = e,
    a = ((o = e.props) == null ? void 0 : o.__type__) || i;
  return (Array.isArray(t) ? t : [t]).some((s) => typeof a != "string" && W0(s, a));
}
function L0(e, t = () => !0) {
  return b.Children.toArray(e).filter((i) => b.isValidElement(i) && t(i));
}
function f5({ condition: e, wrapper: t, children: i }) {
  return e ? t(i) : i;
}
function m5({ condition: e, children: t }) {
  return e ? t : null;
}
var pt = {
  Popover: "Polaris-Popover",
  PopoverOverlay: "Polaris-Popover__PopoverOverlay",
  "PopoverOverlay-noAnimation": "Polaris-Popover__PopoverOverlay--noAnimation",
  "PopoverOverlay-entering": "Polaris-Popover__PopoverOverlay--entering",
  "PopoverOverlay-open": "Polaris-Popover__PopoverOverlay--open",
  measuring: "Polaris-Popover--measuring",
  "PopoverOverlay-exiting": "Polaris-Popover__PopoverOverlay--exiting",
  fullWidth: "Polaris-Popover--fullWidth",
  Content: "Polaris-Popover__Content",
  positionedAbove: "Polaris-Popover--positionedAbove",
  positionedCover: "Polaris-Popover--positionedCover",
  ContentContainer: "Polaris-Popover__ContentContainer",
  "Content-fullHeight": "Polaris-Popover__Content--fullHeight",
  "Content-fluidContent": "Polaris-Popover__Content--fluidContent",
  Pane: "Polaris-Popover__Pane",
  "Pane-fixed": "Polaris-Popover__Pane--fixed",
  "Pane-subdued": "Polaris-Popover__Pane--subdued",
  "Pane-captureOverscroll": "Polaris-Popover__Pane--captureOverscroll",
  Section: "Polaris-Popover__Section",
  FocusTracker: "Polaris-Popover__FocusTracker",
  "PopoverOverlay-hideOnPrint": "Polaris-Popover__PopoverOverlay--hideOnPrint",
};
function ay({ children: e }) {
  return c.createElement(
    "div",
    { className: pt.Section },
    c.createElement(Un, { paddingInlineStart: "300", paddingInlineEnd: "300", paddingBlockStart: "200", paddingBlockEnd: "150" }, e)
  );
}
function mu({ captureOverscroll: e = !1, fixed: t, sectioned: i, children: n, height: a, subdued: r, onScrolledToBottom: o }) {
  const s = re(pt.Pane, t && pt["Pane-fixed"], r && pt["Pane-subdued"], e && pt["Pane-captureOverscroll"]),
    l = i ? fd(n, ay, {}) : n,
    d = a ? { height: a, maxHeight: a, minHeight: a } : void 0;
  return t
    ? c.createElement("div", { style: d, className: s }, l)
    : c.createElement(Ks, { shadow: !0, className: s, style: d, onScrolledToBottom: o, scrollbarWidth: "thin" }, l);
}
let Ir;
(function (e) {
  (e[(e.Click = 0)] = "Click"),
    (e[(e.EscapeKeypress = 1)] = "EscapeKeypress"),
    (e[(e.FocusOut = 2)] = "FocusOut"),
    (e[(e.ScrollOut = 3)] = "ScrollOut");
})(Ir || (Ir = {}));
var An;
(function (e) {
  (e.Entering = "entering"), (e.Entered = "entered"), (e.Exiting = "exiting"), (e.Exited = "exited");
})(An || (An = {}));
class ry extends b.PureComponent {
  constructor(t) {
    super(t),
      (this.state = { transitionStatus: this.props.active ? An.Entering : An.Exited }),
      (this.contentNode = b.createRef()),
      (this.renderPopover = (i) => {
        const { measuring: n, desiredHeight: a, positioning: r } = i,
          {
            id: o,
            children: s,
            sectioned: l,
            fullWidth: d,
            fullHeight: u,
            fluidContent: f,
            hideOnPrint: p,
            autofocusTarget: m,
            captureOverscroll: h,
          } = this.props,
          k = r === "cover",
          x = re(
            pt.Popover,
            n && pt.measuring,
            (d || k) && pt.fullWidth,
            p && pt["PopoverOverlay-hideOnPrint"],
            r && pt[kt("positioned", r)]
          ),
          T = n ? void 0 : { height: a },
          y = re(pt.Content, u && pt["Content-fullHeight"], f && pt["Content-fluidContent"]);
        return c.createElement(
          "div",
          Object.assign({ className: x }, Fh.props),
          c.createElement(Xs, { event: "click", handler: this.handleClick }),
          c.createElement(Xs, { event: "touchstart", handler: this.handleClick }),
          c.createElement(B0, { keyCode: Ja.Escape, handler: this.handleEscape }),
          c.createElement("div", { className: pt.FocusTracker, tabIndex: 0, onFocus: this.handleFocusFirstItem }),
          c.createElement(
            "div",
            { className: pt.ContentContainer },
            c.createElement(
              "div",
              { id: o, tabIndex: m === "none" ? void 0 : -1, className: y, style: T, ref: this.contentNode },
              H0(s, { captureOverscroll: h, sectioned: l })
            )
          ),
          c.createElement("div", { className: pt.FocusTracker, tabIndex: 0, onFocus: this.handleFocusLastItem })
        );
      }),
      (this.handleClick = (i) => {
        const n = i.target,
          {
            contentNode: a,
            props: { activator: r, onClose: o, preventCloseOnChildOverlayClick: s },
          } = this,
          l = i.composedPath(),
          d = s ? Q0(l, this.context.container) : Tp(l, a),
          u = xp(r, n);
        d || u || this.state.transitionStatus !== An.Entered || o(Ir.Click);
      }),
      (this.handleScrollOut = () => {
        this.props.onClose(Ir.ScrollOut);
      }),
      (this.handleEscape = (i) => {
        const n = i.target,
          {
            contentNode: a,
            props: { activator: r },
          } = this,
          o = i.composedPath(),
          s = Tp(o, a),
          l = xp(r, n);
        (s || l) && this.props.onClose(Ir.EscapeKeypress);
      }),
      (this.handleFocusFirstItem = () => {
        this.props.onClose(Ir.FocusOut);
      }),
      (this.handleFocusLastItem = () => {
        this.props.onClose(Ir.FocusOut);
      }),
      (this.overlayRef = b.createRef());
  }
  forceUpdatePosition() {
    var t;
    (t = this.overlayRef.current) == null || t.forceUpdatePosition();
  }
  changeTransitionStatus(t, i) {
    this.setState({ transitionStatus: t }, i), this.contentNode.current && this.contentNode.current.getBoundingClientRect();
  }
  componentDidMount() {
    this.props.active && (this.focusContent(), this.changeTransitionStatus(An.Entered));
  }
  componentDidUpdate(t) {
    this.props.active &&
      !t.active &&
      (this.focusContent(),
      this.changeTransitionStatus(An.Entering, () => {
        this.clearTransitionTimeout(),
          (this.enteringTimer = window.setTimeout(() => {
            this.setState({ transitionStatus: An.Entered });
          }, parseInt(Ju.motion["motion-duration-100"], 10)));
      })),
      !this.props.active && t.active && (this.clearTransitionTimeout(), this.setState({ transitionStatus: An.Exited }));
  }
  componentWillUnmount() {
    this.clearTransitionTimeout();
  }
  render() {
    const {
        active: t,
        activator: i,
        fullWidth: n,
        preferredPosition: a = "below",
        preferredAlignment: r = "center",
        preferInputActivator: o = !0,
        fixed: s,
        zIndexOverride: l,
      } = this.props,
      { transitionStatus: d } = this.state;
    if (d === An.Exited && !t) return null;
    const u = re(
      pt.PopoverOverlay,
      d === An.Entering && pt["PopoverOverlay-entering"],
      d === An.Entered && pt["PopoverOverlay-open"],
      d === An.Exiting && pt["PopoverOverlay-exiting"],
      a === "cover" && pt["PopoverOverlay-noAnimation"]
    );
    return c.createElement(T0, {
      ref: this.overlayRef,
      fullWidth: n,
      active: t,
      activator: i,
      preferInputActivator: o,
      preferredPosition: a,
      preferredAlignment: r,
      render: this.renderPopover.bind(this),
      fixed: s,
      onScrollOut: this.handleScrollOut,
      classNames: u,
      zIndexOverride: l,
    });
  }
  clearTransitionTimeout() {
    this.enteringTimer && window.clearTimeout(this.enteringTimer);
  }
  focusContent() {
    const { autofocusTarget: t = "container" } = this.props;
    t === "none" ||
      this.contentNode == null ||
      requestAnimationFrame(() => {
        if (this.contentNode.current == null) return;
        const i = Gm(this.contentNode.current);
        i && t === "first-node" ? i.focus({ preventScroll: !1 }) : this.contentNode.current.focus({ preventScroll: !1 });
      });
  }
}
ry.contextType = ic;
function H0(e, t) {
  const i = b.Children.toArray(e);
  return oc(i[0], mu) ? i : fd(i, mu, t);
}
function xp(e, t) {
  if (e === t) return !0;
  let i = t.parentNode;
  for (; i != null; ) {
    if (i === e) return !0;
    i = i.parentNode;
  }
  return !1;
}
function Tp(e, t) {
  return t.current != null && e.includes(t.current);
}
function Q0(e, t) {
  return e.some((i) => i instanceof Node && (t == null ? void 0 : t.contains(i)));
}
const Z0 = b.forwardRef(function (
  {
    activatorWrapper: t = "div",
    children: i,
    onClose: n,
    activator: a,
    preventFocusOnClose: r,
    active: o,
    fixed: s,
    ariaHaspopup: l,
    preferInputActivator: d = !0,
    zIndexOverride: u,
    ...f
  },
  p
) {
  const [m, h] = b.useState(),
    k = b.useRef(null),
    x = b.useRef(null),
    T = t,
    y = b.useId();
  function v() {
    var M;
    (M = k.current) == null || M.forceUpdatePosition();
  }
  b.useImperativeHandle(p, () => ({ forceUpdatePosition: v }));
  const S = b.useCallback(() => {
      if (x.current == null) return;
      const C = Ms(x.current) || x.current,
        $ = "disabled" in C && !!C.disabled;
      z0(C, { id: y, active: o, ariaHaspopup: l, activatorDisabled: $ });
    }, [y, o, l]),
    F = (M) => {
      if ((n(M), !(x.current == null || r))) {
        if (M === Ir.FocusOut && m) {
          const C = Ms(m) || Ms(x.current) || x.current;
          Ip(C, Mp) || C.focus();
        } else if (M === Ir.EscapeKeypress && m) {
          const C = Ms(m) || Ms(x.current) || x.current;
          C ? C.focus() : Ip(C, Mp);
        }
      }
    };
  b.useEffect(() => {
    ((!m && x.current) || (m && x.current && !x.current.contains(m))) && h(x.current.firstElementChild), S();
  }, [m, S]),
    b.useEffect(() => {
      m && x.current && h(x.current.firstElementChild), S();
    }, [m, S]);
  const w = m
    ? c.createElement(
        h0,
        { idPrefix: "popover" },
        c.createElement(
          ry,
          Object.assign({ ref: k, id: y, activator: m, preferInputActivator: d, onClose: F, active: o, fixed: s, zIndexOverride: u }, f),
          i
        )
      )
    : null;
  return c.createElement(T, { ref: x }, b.Children.only(a), w);
});
function Mp(e) {
  let t = e.parentElement;
  for (; t; ) {
    if (t.matches(xh.selector)) return !1;
    t = t.parentElement;
  }
  return !0;
}
const y5 = Object.assign(Z0, { Pane: mu, Section: ay }),
  g5 = b.createContext(void 0),
  J0 = b.createContext(!1),
  h5 = b.createContext(!1);
var ma = {
    Checkbox: "Polaris-Checkbox",
    ChoiceLabel: "Polaris-Checkbox__ChoiceLabel",
    Backdrop: "Polaris-Checkbox__Backdrop",
    Input: "Polaris-Checkbox__Input",
    "Input-indeterminate": "Polaris-Checkbox__Input--indeterminate",
    Icon: "Polaris-Checkbox__Icon",
    animated: "Polaris-Checkbox--animated",
    toneMagic: "Polaris-Checkbox--toneMagic",
    hover: "Polaris-Checkbox--hover",
    error: "Polaris-Checkbox--error",
    checked: "Polaris-Checkbox--checked",
    pathAnimation: "Polaris-Checkbox--pathAnimation",
  },
  sr = {
    Choice: "Polaris-Choice",
    labelHidden: "Polaris-Choice--labelHidden",
    Label: "Polaris-Choice__Label",
    Control: "Polaris-Choice__Control",
    disabled: "Polaris-Choice--disabled",
    toneMagic: "Polaris-Choice--toneMagic",
    Descriptions: "Polaris-Choice__Descriptions",
    HelpText: "Polaris-Choice__HelpText",
  };
function Y0({
  id: e,
  label: t,
  disabled: i,
  error: n,
  children: a,
  labelHidden: r,
  helpText: o,
  onClick: s,
  labelClassName: l,
  fill: d,
  bleed: u,
  bleedBlockStart: f,
  bleedBlockEnd: p,
  bleedInlineStart: m,
  bleedInlineEnd: h,
  tone: k,
}) {
  const x = re(sr.Choice, r && sr.labelHidden, i && sr.disabled, k && sr[kt("tone", k)], l),
    T = {
      ...er("choice", "bleed-block-end", "space", p || u),
      ...er("choice", "bleed-block-start", "space", f || u),
      ...er("choice", "bleed-inline-start", "space", m || u),
      ...er("choice", "bleed-inline-end", "space", h || u),
      ...Object.fromEntries(Object.entries(Sm("choice", "fill", d)).map(([w, M]) => [w, M ? "100%" : "auto"])),
    },
    y = c.createElement(
      "label",
      { className: x, htmlFor: e, onClick: s, style: Ku(T) },
      c.createElement("span", { className: sr.Control }, a),
      c.createElement("span", { className: sr.Label }, c.createElement(Nt, { as: "span", variant: "bodyMd" }, t))
    ),
    v = o
      ? c.createElement("div", { className: sr.HelpText, id: oy(e) }, c.createElement(Nt, { as: "span", tone: i ? void 0 : "subdued" }, o))
      : null,
    S = n && typeof n != "boolean" && c.createElement("div", { className: sr.Error }, c.createElement(Km, { message: n, fieldID: e })),
    F = v || S ? c.createElement("div", { className: sr.Descriptions }, S, v) : null;
  return F ? c.createElement("div", null, y, F) : y;
}
function oy(e) {
  return `${e}HelpText`;
}
const b5 = b.forwardRef(function (
  {
    ariaControls: t,
    ariaDescribedBy: i,
    label: n,
    labelHidden: a,
    checked: r = !1,
    helpText: o,
    disabled: s,
    id: l,
    name: d,
    value: u,
    error: f,
    onChange: p,
    onFocus: m,
    onBlur: h,
    labelClassName: k,
    fill: x,
    bleed: T,
    bleedBlockStart: y,
    bleedBlockEnd: v,
    bleedInlineStart: S,
    bleedInlineEnd: F,
    tone: w,
  },
  M
) {
  const C = b.useRef(null),
    $ = b.useId(),
    L = l ?? $,
    U = b.useContext(J0);
  b.useImperativeHandle(M, () => ({
    focus: () => {
      C.current && C.current.focus();
    },
  }));
  const P = () => {
      h && h();
    },
    z = () => {
      p == null || C.current == null || s || (p(C.current.checked, L), C.current.focus());
    },
    E = [];
  f && typeof f != "boolean" && E.push(ey(L)), o && E.push(oy(L)), i && E.push(i);
  const K = E.length ? E.join(" ") : void 0,
    J = re(ma.Checkbox, f && ma.error),
    Q = r === "indeterminate",
    oe = !Q && !!r,
    qe = Q ? { indeterminate: "true", "aria-checked": "mixed" } : { "aria-checked": oe },
    te = c.createElement(
      "svg",
      { viewBox: "0 0 16 16", shapeRendering: "geometricPrecision", textRendering: "geometricPrecision" },
      c.createElement("path", {
        className: re(r && ma.checked),
        d: "M1.5,5.5L3.44655,8.22517C3.72862,8.62007,4.30578,8.64717,4.62362,8.28044L10.5,1.5",
        transform: "translate(2 2.980376)",
        opacity: "0",
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "2",
        strokeLinecap: "round",
        strokeLinejoin: "round",
        pathLength: "1",
      })
    ),
    Ot = re(ma.Input, Q && ma["Input-indeterminate"], w && ma[kt("tone", w)]),
    Yt = { helpText: o, error: f, bleed: T, bleedBlockStart: y, bleedBlockEnd: v, bleedInlineStart: S, bleedInlineEnd: F };
  return c.createElement(
    Y0,
    Object.assign({ id: L, label: n, labelHidden: a, disabled: s, labelClassName: re(ma.ChoiceLabel, k), fill: x, tone: w }, Yt),
    c.createElement(
      "span",
      { className: J },
      c.createElement(
        "input",
        Object.assign(
          {
            ref: C,
            id: L,
            name: d,
            value: u,
            type: "checkbox",
            checked: oe,
            disabled: s,
            className: Ot,
            onBlur: P,
            onChange: X0,
            onClick: z,
            onFocus: m,
            "aria-invalid": f != null,
            "aria-controls": t,
            "aria-describedby": K,
            role: U ? "presentation" : "checkbox",
          },
          qe
        )
      ),
      c.createElement("span", { className: ma.Backdrop, onClick: Op, onKeyUp: Op }),
      c.createElement("span", { className: re(ma.Icon, !Q && ma.animated) }, Q ? c.createElement(yn, { source: Um }) : te)
    )
  );
});
function X0() {}
function Op(e) {
  e.stopPropagation();
}
const K0 = b.createContext(!1);
var Ao = {
  Banner: "Polaris-Banner",
  keyFocused: "Polaris-Banner--keyFocused",
  withinContentContainer: "Polaris-Banner--withinContentContainer",
  withinPage: "Polaris-Banner--withinPage",
  DismissIcon: "Polaris-Banner__DismissIcon",
  "text-success-on-bg-fill": "Polaris-Banner--textSuccessOnBgFill",
  "text-success": "Polaris-Banner__text--success",
  "text-warning-on-bg-fill": "Polaris-Banner--textWarningOnBgFill",
  "text-warning": "Polaris-Banner__text--warning",
  "text-critical-on-bg-fill": "Polaris-Banner--textCriticalOnBgFill",
  "text-critical": "Polaris-Banner__text--critical",
  "text-info-on-bg-fill": "Polaris-Banner--textInfoOnBgFill",
  "text-info": "Polaris-Banner__text--info",
  "icon-secondary": "Polaris-Banner__icon--secondary",
};
const Dd = {
  success: {
    withinPage: { background: "bg-fill-success", text: "text-success-on-bg-fill", icon: "text-success-on-bg-fill" },
    withinContentContainer: { background: "bg-surface-success", text: "text-success", icon: "text-success" },
    icon: Em,
  },
  warning: {
    withinPage: { background: "bg-fill-warning", text: "text-warning-on-bg-fill", icon: "text-warning-on-bg-fill" },
    withinContentContainer: { background: "bg-surface-warning", text: "text-warning", icon: "text-warning" },
    icon: Pm,
  },
  critical: {
    withinPage: { background: "bg-fill-critical", text: "text-critical-on-bg-fill", icon: "text-critical-on-bg-fill" },
    withinContentContainer: { background: "bg-surface-critical", text: "text-critical", icon: "text-critical" },
    icon: Cm,
  },
  info: {
    withinPage: { background: "bg-fill-info", text: "text-info-on-bg-fill", icon: "text-info-on-bg-fill" },
    withinContentContainer: { background: "bg-surface-info", text: "text-info", icon: "text-info" },
    icon: Dm,
  },
};
function ev(e) {
  const t = b.useRef(null),
    [i, n] = b.useState(!1);
  return (
    b.useImperativeHandle(
      e,
      () => ({
        focus: () => {
          var s;
          (s = t.current) == null || s.focus(), n(!0);
        },
      }),
      []
    ),
    {
      wrapperRef: t,
      handleKeyUp: (s) => {
        s.target === t.current && n(!0);
      },
      handleBlur: () => n(!1),
      handleMouseUp: (s) => {
        s.currentTarget.blur(), n(!1);
      },
      shouldShowFocus: i,
    }
  );
}
var io = {
  ButtonGroup: "Polaris-ButtonGroup",
  Item: "Polaris-ButtonGroup__Item",
  "Item-plain": "Polaris-ButtonGroup__Item--plain",
  variantSegmented: "Polaris-ButtonGroup--variantSegmented",
  "Item-focused": "Polaris-ButtonGroup__Item--focused",
  fullWidth: "Polaris-ButtonGroup--fullWidth",
  extraTight: "Polaris-ButtonGroup--extraTight",
  tight: "Polaris-ButtonGroup--tight",
  loose: "Polaris-ButtonGroup--loose",
  noWrap: "Polaris-ButtonGroup--noWrap",
};
function tv({ button: e }) {
  const { value: t, setTrue: i, setFalse: n } = Hm(!1),
    a = re(io.Item, t && io["Item-focused"], e.props.variant === "plain" && io["Item-plain"]);
  return c.createElement("div", { className: a, onFocus: i, onBlur: n }, e);
}
function iv({ children: e, gap: t, variant: i, fullWidth: n, connectedTop: a, noWrap: r }) {
  const o = re(io.ButtonGroup, t && io[t], i && io[kt("variant", i)], n && io.fullWidth, r && io.noWrap),
    s = L0(e).map((l, d) => c.createElement(tv, { button: l, key: d }));
  return c.createElement(
    "div",
    {
      className: o,
      "data-buttongroup-variant": i,
      "data-buttongroup-connected-top": a,
      "data-buttongroup-full-width": n,
      "data-buttongroup-no-wrap": r,
    },
    s
  );
}
const v5 = b.forwardRef(function (t, i) {
  const { tone: n, stopAnnouncements: a } = t,
    r = b.useContext(km),
    { wrapperRef: o, handleKeyUp: s, handleBlur: l, handleMouseUp: d, shouldShowFocus: u } = ev(i),
    f = re(Ao.Banner, u && Ao.keyFocused, r ? Ao.withinContentContainer : Ao.withinPage);
  return c.createElement(
    K0.Provider,
    { value: !0 },
    c.createElement(
      "div",
      {
        className: f,
        tabIndex: 0,
        ref: o,
        role: n === "warning" || n === "critical" ? "alert" : "status",
        "aria-live": a ? "off" : "polite",
        onMouseUp: d,
        onKeyUp: s,
        onBlur: l,
      },
      c.createElement(nv, t)
    )
  );
});
function nv({ tone: e = "info", icon: t, hideIcon: i, onDismiss: n, action: a, secondaryAction: r, title: o, children: s }) {
  const l = Po(),
    d = b.useContext(km),
    u = !o && !d,
    f = Object.keys(Dd).includes(e) ? e : "info",
    p = Dd[f][d ? "withinContentContainer" : "withinPage"],
    m = {
      backgroundColor: p.background,
      textColor: p.text,
      bannerTitle: o ? c.createElement(Nt, { as: "h2", variant: "headingSm", breakWord: !0 }, o) : null,
      bannerIcon: i ? null : c.createElement("span", { className: Ao[p.icon] }, c.createElement(yn, { source: t ?? Dd[f].icon })),
      actionButtons:
        a || r
          ? c.createElement(
              iv,
              null,
              a && c.createElement(Pl, Object.assign({ onClick: a.onAction }, a), a.content),
              r && c.createElement(Pl, Object.assign({ onClick: r.onAction }, r), r.content)
            )
          : null,
      dismissButton: n
        ? c.createElement(Pl, {
            variant: "tertiary",
            icon: c.createElement("span", { className: Ao[u ? "icon-secondary" : p.icon] }, c.createElement(yn, { source: _m })),
            onClick: n,
            accessibilityLabel: l.translate("Polaris.Banner.dismissButton"),
          })
        : null,
    },
    h = s ? c.createElement(Nt, { as: "span", variant: "bodyMd" }, s) : null;
  return d ? c.createElement(ov, m, h) : u ? c.createElement(rv, m, h) : c.createElement(av, m, h);
}
function av({ backgroundColor: e, textColor: t, bannerTitle: i, bannerIcon: n, actionButtons: a, dismissButton: r, children: o }) {
  const { smUp: s } = tc(),
    l = o || a;
  return c.createElement(
    Un,
    { width: "100%" },
    c.createElement(
      Ro,
      { align: "space-between" },
      c.createElement(
        Un,
        {
          background: e,
          color: t,
          borderStartStartRadius: s ? "300" : void 0,
          borderStartEndRadius: s ? "300" : void 0,
          borderEndStartRadius: !l && s ? "300" : void 0,
          borderEndEndRadius: !l && s ? "300" : void 0,
          padding: "300",
        },
        c.createElement(
          Oo,
          { align: "space-between", blockAlign: "center", gap: "200", wrap: !1 },
          c.createElement(Oo, { gap: "100", wrap: !1 }, n, i),
          r
        )
      ),
      l &&
        c.createElement(
          Un,
          { padding: { xs: "300", md: "400" }, paddingBlockStart: "300" },
          c.createElement(Ro, { gap: "200" }, c.createElement("div", null, o), a)
        )
    )
  );
}
function rv({ backgroundColor: e, bannerIcon: t, actionButtons: i, dismissButton: n, children: a }) {
  const [r, o] = b.useState("center"),
    s = b.useRef(null),
    l = b.useRef(null),
    d = b.useRef(null),
    u = b.useCallback(() => {
      var m, h, k;
      const f = (m = s.current) == null ? void 0 : m.offsetHeight,
        p = ((h = l.current) == null ? void 0 : h.offsetHeight) || ((k = d.current) == null ? void 0 : k.offsetHeight);
      !f || !p || (f > p ? o("start") : o("center"));
    }, []);
  return (
    b.useEffect(() => u(), [u]),
    Nm("resize", u),
    c.createElement(
      Un,
      { width: "100%", padding: "300", borderRadius: "300" },
      c.createElement(
        Oo,
        { align: "space-between", blockAlign: r, wrap: !1 },
        c.createElement(
          Un,
          { width: "100%" },
          c.createElement(
            Oo,
            { gap: "200", wrap: !1, blockAlign: r },
            t ? c.createElement("div", { ref: l }, c.createElement(Un, { background: e, borderRadius: "200", padding: "100" }, t)) : null,
            c.createElement(Un, { ref: s, width: "100%" }, c.createElement(Ro, { gap: "200" }, c.createElement("div", null, a), i))
          )
        ),
        c.createElement("div", { ref: d, className: Ao.DismissIcon }, n)
      )
    )
  );
}
function ov({ backgroundColor: e, textColor: t, bannerTitle: i, bannerIcon: n, actionButtons: a, dismissButton: r, children: o }) {
  return c.createElement(
    Un,
    { width: "100%", background: e, padding: "200", borderRadius: "200", color: t },
    c.createElement(
      Oo,
      { align: "space-between", blockAlign: "start", wrap: !1, gap: "200" },
      c.createElement(
        Oo,
        { gap: "150", wrap: !1 },
        n,
        c.createElement(
          Un,
          { width: "100%" },
          c.createElement(Ro, { gap: "200" }, c.createElement(Ro, { gap: "050" }, i, c.createElement("div", null, o)), a)
        )
      ),
      r
    )
  );
}
var sv = typeof Element < "u",
  lv = typeof Map == "function",
  dv = typeof Set == "function",
  uv = typeof ArrayBuffer == "function" && !!ArrayBuffer.isView;
function El(e, t) {
  if (e === t) return !0;
  if (e && t && typeof e == "object" && typeof t == "object") {
    if (e.constructor !== t.constructor) return !1;
    var i, n, a;
    if (Array.isArray(e)) {
      if (((i = e.length), i != t.length)) return !1;
      for (n = i; n-- !== 0; ) if (!El(e[n], t[n])) return !1;
      return !0;
    }
    var r;
    if (lv && e instanceof Map && t instanceof Map) {
      if (e.size !== t.size) return !1;
      for (r = e.entries(); !(n = r.next()).done; ) if (!t.has(n.value[0])) return !1;
      for (r = e.entries(); !(n = r.next()).done; ) if (!El(n.value[1], t.get(n.value[0]))) return !1;
      return !0;
    }
    if (dv && e instanceof Set && t instanceof Set) {
      if (e.size !== t.size) return !1;
      for (r = e.entries(); !(n = r.next()).done; ) if (!t.has(n.value[0])) return !1;
      return !0;
    }
    if (uv && ArrayBuffer.isView(e) && ArrayBuffer.isView(t)) {
      if (((i = e.length), i != t.length)) return !1;
      for (n = i; n-- !== 0; ) if (e[n] !== t[n]) return !1;
      return !0;
    }
    if (e.constructor === RegExp) return e.source === t.source && e.flags === t.flags;
    if (e.valueOf !== Object.prototype.valueOf && typeof e.valueOf == "function" && typeof t.valueOf == "function")
      return e.valueOf() === t.valueOf();
    if (e.toString !== Object.prototype.toString && typeof e.toString == "function" && typeof t.toString == "function")
      return e.toString() === t.toString();
    if (((a = Object.keys(e)), (i = a.length), i !== Object.keys(t).length)) return !1;
    for (n = i; n-- !== 0; ) if (!Object.prototype.hasOwnProperty.call(t, a[n])) return !1;
    if (sv && e instanceof Element) return !1;
    for (n = i; n-- !== 0; )
      if (!((a[n] === "_owner" || a[n] === "__v" || a[n] === "__o") && e.$$typeof) && !El(e[a[n]], t[a[n]])) return !1;
    return !0;
  }
  return e !== e && t !== t;
}
var cv = function (t, i) {
  try {
    return El(t, i);
  } catch (n) {
    if ((n.message || "").match(/stack|recursion/i)) return console.warn("react-fast-compare cannot handle circular refs"), !1;
    throw n;
  }
};
const pv = Lu(cv);
function I5({
  acceptCharset: e,
  action: t,
  autoComplete: i,
  children: n,
  encType: a,
  implicitSubmit: r = !0,
  method: o = "post",
  name: s,
  noValidate: l,
  preventDefault: d = !0,
  target: u,
  onSubmit: f,
}) {
  const p = Po(),
    m = b.useCallback(
      (x) => {
        d && (x.preventDefault(), f(x));
      },
      [f, d]
    ),
    h = fv(i),
    k = r
      ? c.createElement(
          Nt,
          { as: "span", visuallyHidden: !0 },
          c.createElement("button", { type: "submit", "aria-hidden": "true", tabIndex: -1 }, p.translate("Polaris.Common.submit"))
        )
      : null;
  return c.createElement(
    "form",
    { acceptCharset: e, action: t, autoComplete: h, encType: a, method: o, name: s, noValidate: l, target: u, onSubmit: m },
    k,
    n
  );
}
function fv(e) {
  return e == null ? e : e ? "on" : "off";
}
var Ud = { Item: "Polaris-FormLayout__Item", grouped: "Polaris-FormLayout--grouped", condensed: "Polaris-FormLayout--condensed" };
function sy({ children: e, condensed: t = !1 }) {
  const i = re(Ud.Item, t ? Ud.condensed : Ud.grouped);
  return e ? c.createElement("div", { className: i }, e) : null;
}
function ly({ children: e, condensed: t, title: i, helpText: n }) {
  const a = b.useId();
  let r = null,
    o,
    s = null,
    l;
  n && ((o = `${a}HelpText`), (r = c.createElement(Un, { id: o, color: "text-secondary" }, n))),
    i && ((l = `${a}Title`), (s = c.createElement(Nt, { id: l, as: "p" }, i)));
  const d = b.Children.map(e, (u) => fd(u, sy, { condensed: t }));
  return c.createElement(
    Ro,
    { role: "group", gap: "200", "aria-labelledby": l, "aria-describedby": o },
    s,
    c.createElement(Oo, { gap: "300" }, d),
    r
  );
}
const mv = b.memo(function ({ children: t }) {
  return c.createElement(Ro, { gap: "400" }, b.Children.map(t, yv));
});
mv.Group = ly;
function yv(e, t) {
  return oc(e, ly) ? e : fd(e, sy, { key: t });
}
var vn = {
  Tag: "Polaris-Tag",
  disabled: "Polaris-Tag--disabled",
  clickable: "Polaris-Tag--clickable",
  linkable: "Polaris-Tag--linkable",
  removable: "Polaris-Tag--removable",
  Button: "Polaris-Tag__Button",
  Link: "Polaris-Tag__Link",
  segmented: "Polaris-Tag--segmented",
  Text: "Polaris-Tag__Text",
  sizeLarge: "Polaris-Tag--sizeLarge",
  overlay: "Polaris-Tag--overlay",
};
function S5({ children: e, disabled: t = !1, onClick: i, onRemove: n, accessibilityLabel: a, url: r, size: o }) {
  const s = Po(),
    l = n && r,
    d = re(
      vn.Tag,
      t && vn.disabled,
      i && vn.clickable,
      n && vn.removable,
      r && !t && vn.linkable,
      l && vn.segmented,
      o && vn[kt("size", o)]
    );
  let u = a;
  u || (u = typeof e == "string" ? e : void 0);
  const f = c.createElement(
    Nt,
    { as: "span", variant: "bodySm", truncate: !0 },
    c.createElement("span", { title: u, className: vn.Text }, e)
  );
  if (i) return c.createElement("button", { type: "button", disabled: t, className: d, onClick: i }, f);
  const p = s.translate("Polaris.Tag.ariaLabel", { children: u || "" }),
    m = n
      ? c.createElement(
          "button",
          { type: "button", "aria-label": p, className: re(vn.Button, l && vn.segmented), onClick: n, onMouseUp: rc, disabled: t },
          c.createElement(yn, { source: $m })
        )
      : null,
    h = r && !t ? c.createElement("a", { className: re(vn.Link, l && vn.segmented), href: r }, f) : f;
  return c.createElement(
    "span",
    { className: d, "aria-disabled": t },
    h,
    o === "large" && c.createElement("span", { className: vn.overlay }),
    m
  );
}
var Rp = { SkeletonBodyTextContainer: "Polaris-SkeletonBodyText__SkeletonBodyTextContainer", SkeletonBodyText: "Polaris-SkeletonBodyText" };
function k5({ lines: e = 3 }) {
  const t = [];
  for (let i = 0; i < e; i++) t.push(c.createElement("div", { className: Rp.SkeletonBodyText, key: i }));
  return c.createElement("div", { className: Rp.SkeletonBodyTextContainer }, t);
}
var qd = {
  Thumbnail: "Polaris-Thumbnail",
  sizeExtraSmall: "Polaris-Thumbnail--sizeExtraSmall",
  sizeSmall: "Polaris-Thumbnail--sizeSmall",
  sizeMedium: "Polaris-Thumbnail--sizeMedium",
  sizeLarge: "Polaris-Thumbnail--sizeLarge",
  transparent: "Polaris-Thumbnail--transparent",
};
function N5({ source: e, alt: t, size: i = "medium", transparent: n }) {
  const a = re(qd.Thumbnail, i && qd[kt("size", i)], n && qd.transparent),
    r = typeof e == "string" ? c.createElement(c0, { alt: t, source: e }) : c.createElement(yn, { accessibilityLabel: t, source: e });
  return c.createElement("span", { className: a }, r);
}
const A5 = Symbol.for("gadget/modelRelationships"),
  gv = (e) => e && "connection" in e && e.connection && "endpoint" in e.connection;
var sc = () => {},
  mn = sc;
function da(e) {
  return { tag: 0, 0: e };
}
function ul(e) {
  return { tag: 1, 0: e };
}
var hv = (e) => e;
function At(e) {
  return (t) => (i) => {
    var n = mn;
    t((a) => {
      a === 0 ? i(0) : a.tag === 0 ? ((n = a[0]), i(a)) : e(a[0]) ? i(a) : n(0);
    });
  };
}
function Bi(e) {
  return (t) => (i) =>
    t((n) => {
      n === 0 || n.tag === 0 ? i(n) : i(ul(e(n[0])));
    });
}
function el(e) {
  return (t) => (i) => {
    var n = [],
      a = mn,
      r = !1,
      o = !1;
    t((s) => {
      o ||
        (s === 0
          ? ((o = !0), n.length || i(0))
          : s.tag === 0
          ? (a = s[0])
          : ((r = !1),
            (function (d) {
              var u = mn;
              d((f) => {
                if (f === 0) {
                  if (n.length) {
                    var p = n.indexOf(u);
                    p > -1 && (n = n.slice()).splice(p, 1), n.length || (o ? i(0) : r || ((r = !0), a(0)));
                  }
                } else f.tag === 0 ? (n.push((u = f[0])), u(0)) : n.length && (i(f), u(0));
              });
            })(e(s[0])),
            r || ((r = !0), a(0))));
    }),
      i(
        da((s) => {
          if (s === 1) {
            o || ((o = !0), a(1));
            for (var l = 0, d = n, u = n.length; l < u; l++) d[l](1);
            n.length = 0;
          } else {
            !o && !r ? ((r = !0), a(0)) : (r = !1);
            for (var f = 0, p = n, m = n.length; f < m; f++) p[f](0);
          }
        })
      );
  };
}
function bv(e) {
  return el(hv)(e);
}
function us(e) {
  return bv(Sv(e));
}
function lc(e) {
  return (t) => (i) => {
    var n = !1;
    t((a) => {
      if (!n)
        if (a === 0) (n = !0), i(0), e();
        else if (a.tag === 0) {
          var r = a[0];
          i(
            da((o) => {
              o === 1 ? ((n = !0), r(1), e()) : r(o);
            })
          );
        } else i(a);
    });
  };
}
function tl(e) {
  return (t) => (i) => {
    var n = !1;
    t((a) => {
      if (!n)
        if (a === 0) (n = !0), i(0);
        else if (a.tag === 0) {
          var r = a[0];
          i(
            da((o) => {
              o === 1 && (n = !0), r(o);
            })
          );
        } else e(a[0]), i(a);
    });
  };
}
function Bp(e) {
  return (t) => (i) =>
    t((n) => {
      n === 0 ? i(0) : n.tag === 0 ? (i(n), e()) : i(n);
    });
}
function il(e) {
  var t = [],
    i = mn,
    n = !1;
  return (a) => {
    t.push(a),
      t.length === 1 &&
        e((r) => {
          if (r === 0) {
            for (var o = 0, s = t, l = t.length; o < l; o++) s[o](0);
            t.length = 0;
          } else if (r.tag === 0) i = r[0];
          else {
            n = !1;
            for (var d = 0, u = t, f = t.length; d < f; d++) u[d](r);
          }
        }),
      a(
        da((r) => {
          if (r === 1) {
            var o = t.indexOf(a);
            o > -1 && (t = t.slice()).splice(o, 1), t.length || i(1);
          } else n || ((n = !0), i(0));
        })
      );
  };
}
function Cp(e) {
  return (t) => (i) => {
    var n = mn,
      a = mn,
      r = !1,
      o = !1,
      s = !1,
      l = !1;
    t((d) => {
      l ||
        (d === 0
          ? ((l = !0), s || i(0))
          : d.tag === 0
          ? (n = d[0])
          : (s && (a(1), (a = mn)),
            r ? (r = !1) : ((r = !0), n(0)),
            (function (f) {
              (s = !0),
                f((p) => {
                  s &&
                    (p === 0
                      ? ((s = !1), l ? i(0) : r || ((r = !0), n(0)))
                      : p.tag === 0
                      ? ((o = !1), (a = p[0])(0))
                      : (i(p), o ? (o = !1) : a(0)));
                });
            })(e(d[0]))));
    }),
      i(
        da((d) => {
          d === 1 ? (l || ((l = !0), n(1)), s && ((s = !1), a(1))) : (!l && !r && ((r = !0), n(0)), s && !o && ((o = !0), a(0)));
        })
      );
  };
}
function cl(e) {
  return (t) => (i) => {
    var n = mn,
      a = !1,
      r = 0;
    t((o) => {
      a ||
        (o === 0
          ? ((a = !0), i(0))
          : o.tag === 0
          ? e <= 0
            ? ((a = !0), i(0), o[0](1))
            : (n = o[0])
          : r++ < e
          ? (i(o), !a && r >= e && ((a = !0), i(0), n(1)))
          : i(o));
    }),
      i(
        da((o) => {
          o === 1 && !a ? ((a = !0), n(1)) : o === 0 && !a && r < e && n(0);
        })
      );
  };
}
function dc(e) {
  return (t) => (i) => {
    var n = mn,
      a = mn,
      r = !1;
    t((o) => {
      r ||
        (o === 0
          ? ((r = !0), a(1), i(0))
          : o.tag === 0
          ? ((n = o[0]),
            e((s) => {
              s === 0 || (s.tag === 0 ? (a = s[0])(0) : ((r = !0), a(1), n(1), i(0)));
            }))
          : i(o));
    }),
      i(
        da((o) => {
          o === 1 && !r ? ((r = !0), n(1), a(1)) : r || n(0);
        })
      );
  };
}
function dy(e, t) {
  return (i) => (n) => {
    var a = mn,
      r = !1;
    i((o) => {
      r || (o === 0 ? ((r = !0), n(0)) : o.tag === 0 ? ((a = o[0]), n(o)) : e(o[0]) ? n(o) : ((r = !0), t && n(o), n(0), a(1)));
    });
  };
}
function vv(e) {
  return (t) => e()(t);
}
function uy(e) {
  return (t) => {
    var i = e[Symbol.asyncIterator](),
      n = !1,
      a = !1,
      r = !1,
      o;
    t(
      da(async (s) => {
        if (s === 1) (n = !0), i.return && i.return();
        else if (a) r = !0;
        else {
          for (r = a = !0; r && !n; )
            if ((o = await i.next()).done) (n = !0), i.return && (await i.return()), t(0);
            else
              try {
                (r = !1), t(ul(o.value));
              } catch (l) {
                if (i.throw) (n = !!(await i.throw(l)).done) && t(0);
                else throw l;
              }
          a = !1;
        }
      })
    );
  };
}
function Iv(e) {
  return e[Symbol.asyncIterator]
    ? uy(e)
    : (t) => {
        var i = e[Symbol.iterator](),
          n = !1,
          a = !1,
          r = !1,
          o;
        t(
          da((s) => {
            if (s === 1) (n = !0), i.return && i.return();
            else if (a) r = !0;
            else {
              for (r = a = !0; r && !n; )
                if ((o = i.next()).done) (n = !0), i.return && i.return(), t(0);
                else
                  try {
                    (r = !1), t(ul(o.value));
                  } catch (l) {
                    if (i.throw) (n = !!i.throw(l).done) && t(0);
                    else throw l;
                  }
              a = !1;
            }
          })
        );
      };
}
var Sv = Iv;
function zs(e) {
  return (t) => {
    var i = !1;
    t(
      da((n) => {
        n === 1 ? (i = !0) : i || ((i = !0), t(ul(e)), t(0));
      })
    );
  };
}
function uc(e) {
  return (t) => {
    var i = !1,
      n = e({
        next(a) {
          i || t(ul(a));
        },
        complete() {
          i || ((i = !0), t(0));
        },
      });
    t(
      da((a) => {
        a === 1 && !i && ((i = !0), n());
      })
    );
  };
}
function kv() {
  var e, t;
  return {
    source: il(uc((i) => ((e = i.next), (t = i.complete), sc))),
    next(i) {
      e && e(i);
    },
    complete() {
      t && t();
    },
  };
}
function Pp(e) {
  return uc(
    (t) => (
      e.then((i) => {
        Promise.resolve(i).then(() => {
          t.next(i), t.complete();
        });
      }),
      sc
    )
  );
}
function cs(e) {
  return (t) => {
    var i = mn,
      n = !1;
    return (
      t((a) => {
        a === 0 ? (n = !0) : a.tag === 0 ? (i = a[0])(0) : n || (e(a[0]), i(0));
      }),
      {
        unsubscribe() {
          n || ((n = !0), i(1));
        },
      }
    );
  };
}
function Nv(e) {
  cs((t) => {})(e);
}
var Vd = { done: !0 },
  Av = (e) => ({
    [Symbol.asyncIterator]() {
      var t = [],
        i = !1,
        n = mn,
        a;
      return (
        e((r) => {
          i ||
            (r === 0 ? (a && (a = a(Vd)), (i = !0)) : r.tag === 0 ? (n = r[0])(0) : a ? (a = a({ value: r[0], done: !1 })) : t.push(r[0]));
        }),
        {
          async next() {
            return i && !t.length
              ? Vd
              : (!i && t.length <= 1 && n(0), t.length ? { value: t.shift(), done: !1 } : new Promise((r) => (a = r)));
          },
          async return() {
            return i || (a = n(1)), (i = !0), Vd;
          },
        }
      );
    },
  });
function md(e) {
  return new Promise((t) => {
    var i = mn,
      n;
    e((a) => {
      a === 0 ? Promise.resolve(n).then(t) : a.tag === 0 ? (i = a[0])(0) : ((n = a[0]), i(0));
    });
  });
}
var Vn = (...e) => {
    for (var t = e[0], i = 1, n = e.length; i < n; i++) t = e[i](t);
    return t;
  },
  _s = {
    NAME: "Name",
    DOCUMENT: "Document",
    OPERATION_DEFINITION: "OperationDefinition",
    VARIABLE_DEFINITION: "VariableDefinition",
    SELECTION_SET: "SelectionSet",
    FIELD: "Field",
    ARGUMENT: "Argument",
    FRAGMENT_SPREAD: "FragmentSpread",
    INLINE_FRAGMENT: "InlineFragment",
    FRAGMENT_DEFINITION: "FragmentDefinition",
    VARIABLE: "Variable",
    INT: "IntValue",
    FLOAT: "FloatValue",
    STRING: "StringValue",
    BOOLEAN: "BooleanValue",
    NULL: "NullValue",
    ENUM: "EnumValue",
    LIST: "ListValue",
    OBJECT: "ObjectValue",
    OBJECT_FIELD: "ObjectField",
    DIRECTIVE: "Directive",
    NAMED_TYPE: "NamedType",
    LIST_TYPE: "ListType",
    NON_NULL_TYPE: "NonNullType",
  };
class nl extends Error {
  constructor(t, i, n, a, r, o, s) {
    super(t),
      (this.name = "GraphQLError"),
      (this.message = t),
      r && (this.path = r),
      i && (this.nodes = Array.isArray(i) ? i : [i]),
      n && (this.source = n),
      a && (this.positions = a),
      o && (this.originalError = o);
    var l = s;
    if (!l && o) {
      var d = o.extensions;
      d && typeof d == "object" && (l = d);
    }
    this.extensions = l || {};
  }
  toJSON() {
    return { ...this, message: this.message };
  }
  toString() {
    return this.message;
  }
  get [Symbol.toStringTag]() {
    return "GraphQLError";
  }
}
var Ce, ne;
function Ft(e) {
  return new nl(`Syntax Error: Unexpected token at ${ne} in ${e}`);
}
function wn(e) {
  if (((e.lastIndex = ne), e.test(Ce))) return Ce.slice(ne, (ne = e.lastIndex));
}
var xl = / +(?=[^\s])/y;
function Fv(e) {
  for (
    var t = e.split(`
`),
      i = "",
      n = 0,
      a = 0,
      r = t.length - 1,
      o = 0;
    o < t.length;
    o++
  )
    (xl.lastIndex = 0), xl.test(t[o]) && (o && (!n || xl.lastIndex < n) && (n = xl.lastIndex), (a = a || o), (r = o));
  for (var s = a; s <= r; s++)
    s !== a &&
      (i += `
`),
      (i += t[s].slice(n).replace(/\\"""/g, '"""'));
  return i;
}
function de() {
  for (
    var e = 0 | Ce.charCodeAt(ne++);
    e === 9 || e === 10 || e === 13 || e === 32 || e === 35 || e === 44 || e === 65279;
    e = 0 | Ce.charCodeAt(ne++)
  )
    if (e === 35) for (; (e = Ce.charCodeAt(ne++)) !== 10 && e !== 13; );
  ne--;
}
var cy = /[_A-Za-z]\w*/y;
function ir() {
  var e;
  if ((e = wn(cy))) return { kind: "Name", value: e };
}
var wv = /(?:null|true|false)/y,
  py = /\$[_A-Za-z]\w*/y,
  xv = /-?\d+/y,
  Tv = /(?:\.\d+)?[eE][+-]?\d+|\.\d+/y,
  Mv = /\\/g,
  Ov = /"""(?:"""|(?:[\s\S]*?[^\\])""")/y,
  Rv = /"(?:"|[^\r\n]*?[^\\]")/y;
function Wl(e) {
  var t, i;
  if ((i = wn(wv))) t = i === "null" ? { kind: "NullValue" } : { kind: "BooleanValue", value: i === "true" };
  else if (!e && (i = wn(py))) t = { kind: "Variable", name: { kind: "Name", value: i.slice(1) } };
  else if ((i = wn(xv))) {
    var n = i;
    (i = wn(Tv)) ? (t = { kind: "FloatValue", value: n + i }) : (t = { kind: "IntValue", value: n });
  } else if ((i = wn(cy))) t = { kind: "EnumValue", value: i };
  else if ((i = wn(Ov))) t = { kind: "StringValue", value: Fv(i.slice(3, -3)), block: !0 };
  else if ((i = wn(Rv))) t = { kind: "StringValue", value: Mv.test(i) ? JSON.parse(i) : i.slice(1, -1), block: !1 };
  else if (
    (t =
      (function (r) {
        var o;
        if (Ce.charCodeAt(ne) === 91) {
          ne++, de();
          for (var s = []; (o = Wl(r)); ) s.push(o);
          if (Ce.charCodeAt(ne++) !== 93) throw Ft("ListValue");
          return de(), { kind: "ListValue", values: s };
        }
      })(e) ||
      (function (r) {
        if (Ce.charCodeAt(ne) === 123) {
          ne++, de();
          for (var o = [], s; (s = ir()); ) {
            if ((de(), Ce.charCodeAt(ne++) !== 58)) throw Ft("ObjectField");
            de();
            var l = Wl(r);
            if (!l) throw Ft("ObjectField");
            o.push({ kind: "ObjectField", name: s, value: l });
          }
          if (Ce.charCodeAt(ne++) !== 125) throw Ft("ObjectValue");
          return de(), { kind: "ObjectValue", fields: o };
        }
      })(e))
  )
    return t;
  return de(), t;
}
function fy(e) {
  var t = [];
  if ((de(), Ce.charCodeAt(ne) === 40)) {
    ne++, de();
    for (var i; (i = ir()); ) {
      if ((de(), Ce.charCodeAt(ne++) !== 58)) throw Ft("Argument");
      de();
      var n = Wl(e);
      if (!n) throw Ft("Argument");
      t.push({ kind: "Argument", name: i, value: n });
    }
    if (!t.length || Ce.charCodeAt(ne++) !== 41) throw Ft("Argument");
    de();
  }
  return t;
}
function ps(e) {
  var t = [];
  for (de(); Ce.charCodeAt(ne) === 64; ) {
    ne++;
    var i = ir();
    if (!i) throw Ft("Directive");
    de(), t.push({ kind: "Directive", name: i, arguments: fy(e) });
  }
  return t;
}
function Bv() {
  var e = ir();
  if (e) {
    de();
    var t;
    if (Ce.charCodeAt(ne) === 58) {
      if ((ne++, de(), (t = e), !(e = ir()))) throw Ft("Field");
      de();
    }
    return { kind: "Field", alias: t, name: e, arguments: fy(!1), directives: ps(!1), selectionSet: yd() };
  }
}
function my() {
  var e;
  if ((de(), Ce.charCodeAt(ne) === 91)) {
    ne++, de();
    var t = my();
    if (!t || Ce.charCodeAt(ne++) !== 93) throw Ft("ListType");
    e = { kind: "ListType", type: t };
  } else if ((e = ir())) e = { kind: "NamedType", name: e };
  else throw Ft("NamedType");
  return de(), Ce.charCodeAt(ne) === 33 ? (ne++, de(), { kind: "NonNullType", type: e }) : e;
}
var Cv = /on/y;
function yy() {
  if (wn(Cv)) {
    de();
    var e = ir();
    if (!e) throw Ft("NamedType");
    return de(), { kind: "NamedType", name: e };
  }
}
var Pv = /\.\.\./y;
function Ev() {
  if (wn(Pv)) {
    de();
    var e = ne,
      t;
    if ((t = ir()) && t.value !== "on") return { kind: "FragmentSpread", name: t, directives: ps(!1) };
    ne = e;
    var i = yy(),
      n = ps(!1),
      a = yd();
    if (!a) throw Ft("InlineFragment");
    return { kind: "InlineFragment", typeCondition: i, directives: n, selectionSet: a };
  }
}
function yd() {
  var e;
  if ((de(), Ce.charCodeAt(ne) === 123)) {
    ne++, de();
    for (var t = []; (e = Ev() || Bv()); ) t.push(e);
    if (!t.length || Ce.charCodeAt(ne++) !== 125) throw Ft("SelectionSet");
    return de(), { kind: "SelectionSet", selections: t };
  }
}
var Dv = /fragment/y;
function Uv() {
  if (wn(Dv)) {
    de();
    var e = ir();
    if (!e) throw Ft("FragmentDefinition");
    de();
    var t = yy();
    if (!t) throw Ft("FragmentDefinition");
    var i = ps(!1),
      n = yd();
    if (!n) throw Ft("FragmentDefinition");
    return { kind: "FragmentDefinition", name: e, typeCondition: t, directives: i, selectionSet: n };
  }
}
var qv = /(?:query|mutation|subscription)/y;
function Vv() {
  var e,
    t,
    i = [],
    n = [];
  (e = wn(qv)) &&
    (de(),
    (t = ir()),
    (i = (function () {
      var o,
        s = [];
      if ((de(), Ce.charCodeAt(ne) === 40)) {
        for (ne++, de(); (o = wn(py)); ) {
          if ((de(), Ce.charCodeAt(ne++) !== 58)) throw Ft("VariableDefinition");
          var l = my(),
            d = void 0;
          if (Ce.charCodeAt(ne) === 61 && (ne++, de(), !(d = Wl(!0)))) throw Ft("VariableDefinition");
          de(),
            s.push({
              kind: "VariableDefinition",
              variable: { kind: "Variable", name: { kind: "Name", value: o.slice(1) } },
              type: l,
              defaultValue: d,
              directives: ps(!0),
            });
        }
        if (Ce.charCodeAt(ne++) !== 41) throw Ft("VariableDefinition");
        de();
      }
      return s;
    })()),
    (n = ps(!1)));
  var a = yd();
  if (a) return { kind: "OperationDefinition", operation: e || "query", name: t, variableDefinitions: i, directives: n, selectionSet: a };
}
function _v(e, t) {
  return (
    (Ce = typeof e.body == "string" ? e.body : e),
    (ne = 0),
    (function () {
      var n;
      de();
      for (var a = []; (n = Uv() || Vv()); ) a.push(n);
      return { kind: "Document", definitions: a };
    })()
  );
}
function $v(e) {
  return JSON.stringify(e);
}
function Gv(e) {
  return (
    `"""
` +
    e.replace(/"""/g, '\\"""') +
    `
"""`
  );
}
var Mn = (e) => !(!e || !e.length),
  Si = {
    OperationDefinition(e) {
      if (e.operation === "query" && !e.name && !Mn(e.variableDefinitions) && !Mn(e.directives)) return Si.SelectionSet(e.selectionSet);
      var t = e.operation;
      return (
        e.name && (t += " " + e.name.value),
        Mn(e.variableDefinitions) && (e.name || (t += " "), (t += "(" + e.variableDefinitions.map(Si.VariableDefinition).join(", ") + ")")),
        Mn(e.directives) && (t += " " + e.directives.map(Si.Directive).join(" ")),
        t + " " + Si.SelectionSet(e.selectionSet)
      );
    },
    VariableDefinition(e) {
      var t = Si.Variable(e.variable) + ": " + En(e.type);
      return (
        e.defaultValue && (t += " = " + En(e.defaultValue)), Mn(e.directives) && (t += " " + e.directives.map(Si.Directive).join(" ")), t
      );
    },
    Field(e) {
      var t = (e.alias ? e.alias.value + ": " : "") + e.name.value;
      if (Mn(e.arguments)) {
        var i = e.arguments.map(Si.Argument),
          n = t + "(" + i.join(", ") + ")";
        t =
          n.length > 80
            ? t +
              `(
  ` +
              i
                .join(
                  `
`
                )
                .replace(
                  /\n/g,
                  `
  `
                ) +
              `
)`
            : n;
      }
      return (
        Mn(e.directives) && (t += " " + e.directives.map(Si.Directive).join(" ")),
        e.selectionSet ? t + " " + Si.SelectionSet(e.selectionSet) : t
      );
    },
    StringValue: (e) => (e.block ? Gv(e.value) : $v(e.value)),
    BooleanValue: (e) => "" + e.value,
    NullValue: (e) => "null",
    IntValue: (e) => e.value,
    FloatValue: (e) => e.value,
    EnumValue: (e) => e.value,
    Name: (e) => e.value,
    Variable: (e) => "$" + e.name.value,
    ListValue: (e) => "[" + e.values.map(En).join(", ") + "]",
    ObjectValue: (e) => "{" + e.fields.map(Si.ObjectField).join(", ") + "}",
    ObjectField: (e) => e.name.value + ": " + En(e.value),
    Document: (e) =>
      Mn(e.definitions)
        ? e.definitions.map(En).join(`

`)
        : "",
    SelectionSet: (e) =>
      `{
  ` +
      e.selections
        .map(En)
        .join(
          `
`
        )
        .replace(
          /\n/g,
          `
  `
        ) +
      `
}`,
    Argument: (e) => e.name.value + ": " + En(e.value),
    FragmentSpread(e) {
      var t = "..." + e.name.value;
      return Mn(e.directives) && (t += " " + e.directives.map(Si.Directive).join(" ")), t;
    },
    InlineFragment(e) {
      var t = "...";
      return (
        e.typeCondition && (t += " on " + e.typeCondition.name.value),
        Mn(e.directives) && (t += " " + e.directives.map(Si.Directive).join(" ")),
        t + " " + En(e.selectionSet)
      );
    },
    FragmentDefinition(e) {
      var t = "fragment " + e.name.value;
      return (
        (t += " on " + e.typeCondition.name.value),
        Mn(e.directives) && (t += " " + e.directives.map(Si.Directive).join(" ")),
        t + " " + En(e.selectionSet)
      );
    },
    Directive(e) {
      var t = "@" + e.name.value;
      return Mn(e.arguments) && (t += "(" + e.arguments.map(Si.Argument).join(", ") + ")"), t;
    },
    NamedType: (e) => e.name.value,
    ListType: (e) => "[" + En(e.type) + "]",
    NonNullType: (e) => En(e.type) + "!",
  };
function En(e) {
  return Si[e.kind] ? Si[e.kind](e) : "";
}
var jv = (e) =>
  e && e.message && (e.extensions || e.name === "GraphQLError")
    ? e
    : typeof e == "object" && e.message
    ? new nl(e.message, e.nodes, e.source, e.positions, e.path, e, e.extensions || {})
    : new nl(e);
class pl extends Error {
  constructor(t) {
    var i = (t.graphQLErrors || []).map(jv),
      n = ((a, r) => {
        var o = "";
        if (a) return `[Network] ${a.message}`;
        if (r)
          for (var s of r)
            o &&
              (o += `
`),
              (o += `[GraphQL] ${s.message}`);
        return o;
      })(t.networkError, i);
    super(n),
      (this.name = "CombinedError"),
      (this.message = n),
      (this.graphQLErrors = i),
      (this.networkError = t.networkError),
      (this.response = t.response);
  }
  toString() {
    return this.message;
  }
}
var yu = (e, t) => {
    for (var i = 0 | (t || 5381), n = 0, a = 0 | e.length; n < a; n++) i = (i << 5) + i + e.charCodeAt(n);
    return i;
  },
  xo = new Set(),
  Ep = new WeakMap(),
  ts = (e) => {
    if (e === null || xo.has(e)) return "null";
    if (typeof e != "object") return JSON.stringify(e) || "";
    if (e.toJSON) return ts(e.toJSON());
    if (Array.isArray(e)) {
      var t = "[";
      for (var i of e) t.length > 1 && (t += ","), (t += ts(i) || "null");
      return (t += "]");
    } else if ((Hl !== fs && e instanceof Hl) || (Ql !== fs && e instanceof Ql)) return "null";
    var n = Object.keys(e).sort();
    if (!n.length && e.constructor && e.constructor !== Object) {
      var a = Ep.get(e) || Math.random().toString(36).slice(2);
      return Ep.set(e, a), ts({ __key: a });
    }
    xo.add(e);
    var r = "{";
    for (var o of n) {
      var s = ts(e[o]);
      s && (r.length > 1 && (r += ","), (r += ts(o) + ":" + s));
    }
    return xo.delete(e), (r += "}");
  },
  gu = (e, t, i) => {
    if (!(i == null || typeof i != "object" || i.toJSON || xo.has(i)))
      if (Array.isArray(i)) for (var n = 0, a = i.length; n < a; n++) gu(e, `${t}.${n}`, i[n]);
      else if (i instanceof Hl || i instanceof Ql) e.set(t, i);
      else {
        xo.add(i);
        for (var r of Object.keys(i)) gu(e, `${t}.${r}`, i[r]);
      }
  },
  Ll = (e) => (xo.clear(), ts(e));
class fs {}
var Hl = typeof File < "u" ? File : fs,
  Ql = typeof Blob < "u" ? Blob : fs,
  zv = /("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g,
  Wv = /(?:#[^\n\r]+)?(?:[\r\n]+|$)/g,
  Lv = (e, t) =>
    t % 2 == 0
      ? e.replace(
          Wv,
          `
`
        )
      : e,
  Dp = (e) => e.split(zv).map(Lv).join("").trim(),
  Up = new Map(),
  Dl = new Map(),
  cc = (e) => {
    var t;
    return (
      typeof e == "string"
        ? (t = Dp(e))
        : e.loc && Dl.get(e.__key) === e
        ? (t = e.loc.source.body)
        : ((t = Up.get(e) || Dp(En(e))), Up.set(e, t)),
      typeof e != "string" &&
        !e.loc &&
        (e.loc = { start: 0, end: t.length, source: { body: t, name: "gql", locationOffset: { line: 1, column: 1 } } }),
      t
    );
  },
  qp = (e) => {
    var t = yu(cc(e));
    if (e.definitions) {
      var i = hy(e);
      i &&
        (t = yu(
          `
# ${i}`,
          t
        ));
    }
    return t;
  },
  gy = (e) => {
    var t, i;
    return (
      typeof e == "string" ? ((t = qp(e)), (i = Dl.get(t) || _v(e))) : ((t = e.__key || qp(e)), (i = Dl.get(t) || e)),
      i.loc || cc(i),
      (i.__key = t),
      Dl.set(t, i),
      i
    );
  },
  Ws = (e, t, i) => {
    var n = t || {},
      a = gy(e),
      r = Ll(n),
      o = a.__key;
    return r !== "{}" && (o = yu(r, o)), { key: o, query: a, variables: n, extensions: i };
  },
  hy = (e) => {
    for (var t of e.definitions) if (t.kind === _s.OPERATION_DEFINITION) return t.name ? t.name.value : void 0;
  },
  hu = (e, t, i) => {
    if (!("data" in t) && !("errors" in t)) throw new Error("No Content");
    var n = e.kind === "subscription";
    return {
      operation: e,
      data: t.data,
      error: Array.isArray(t.errors) ? new pl({ graphQLErrors: t.errors, response: i }) : void 0,
      extensions: t.extensions ? { ...t.extensions } : void 0,
      hasNext: t.hasNext == null ? n : t.hasNext,
      stale: !1,
    };
  },
  bu = (e, t) => {
    if (typeof e == "object" && e != null && (!e.constructor || e.constructor === Object || Array.isArray(e))) {
      e = Array.isArray(e) ? [...e] : { ...e };
      for (var i of Object.keys(t)) e[i] = bu(e[i], t[i]);
      return e;
    }
    return t;
  },
  vu = (e, t, i) => {
    var n = e.error ? e.error.graphQLErrors : [],
      a = !!e.extensions || !!t.extensions,
      r = { ...e.extensions, ...t.extensions },
      o = t.incremental;
    "path" in t && (o = [t]);
    var s = { data: e.data };
    if (o)
      for (var l of o) {
        Array.isArray(l.errors) && n.push(...l.errors), l.extensions && (Object.assign(r, l.extensions), (a = !0));
        for (var d = "data", u = s, f = 0, p = l.path.length; f < p; d = l.path[f++])
          u = u[d] = Array.isArray(u[d]) ? [...u[d]] : { ...u[d] };
        if (l.items) for (var m = +d >= 0 ? d : 0, h = 0, k = l.items.length; h < k; h++) u[m + h] = bu(u[m + h], l.items[h]);
        else l.data !== void 0 && (u[d] = bu(u[d], l.data));
      }
    else (s.data = t.data || e.data), (n = t.errors || n);
    return {
      operation: e.operation,
      data: s.data,
      error: n.length ? new pl({ graphQLErrors: n, response: i }) : void 0,
      extensions: a ? r : void 0,
      hasNext: t.hasNext != null ? t.hasNext : e.hasNext,
      stale: !1,
    };
  },
  by = (e, t, i) => ({
    operation: e,
    data: void 0,
    error: new pl({ networkError: t, response: i }),
    extensions: void 0,
    hasNext: !1,
    stale: !1,
  });
function vy(e) {
  return {
    query: e.extensions && e.extensions.persistedQuery && !e.extensions.persistedQuery.miss ? void 0 : cc(e.query),
    operationName: hy(e.query),
    variables: e.variables || void 0,
    extensions: e.extensions,
  };
}
var Hv = (e, t) => {
    var i = e.kind === "query" && e.context.preferGetMethod;
    if (!i || !t) return e.context.url;
    var n = new URL(e.context.url);
    for (var a in t) {
      var r = t[a];
      r && n.searchParams.set(a, typeof r == "object" ? Ll(r) : r);
    }
    var o = n.toString();
    return o.length > 2047 && i !== "force" ? ((e.context.preferGetMethod = !1), e.context.url) : o;
  },
  Qv = (e, t) => {
    if (t && !(e.kind === "query" && e.context.preferGetMethod)) {
      var i = Ll(t),
        n = ((s) => {
          var l = new Map();
          return (Hl !== fs || Ql !== fs) && (xo.clear(), gu(l, "variables", s)), l;
        })(t.variables);
      if (n.size) {
        var a = new FormData();
        a.append("operations", i), a.append("map", Ll({ ...[...n.keys()].map((s) => [s]) }));
        var r = 0;
        for (var o of n.values()) a.append("" + r++, o);
        return a;
      }
      return i;
    }
  },
  Zv = (e, t) => {
    var i = {
        accept:
          e.kind === "subscription"
            ? "text/event-stream, multipart/mixed"
            : "application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed",
      },
      n = (typeof e.context.fetchOptions == "function" ? e.context.fetchOptions() : e.context.fetchOptions) || {};
    if (n.headers) for (var a in n.headers) i[a.toLowerCase()] = n.headers[a];
    var r = Qv(e, t);
    return (
      typeof r == "string" && !i["content-type"] && (i["content-type"] = "application/json"),
      { ...n, method: r ? "POST" : "GET", body: r, headers: i }
    );
  },
  Jv = typeof TextDecoder < "u" ? new TextDecoder() : null,
  Yv = /boundary="?([^=";]+)"?/i,
  Xv = /data: ?([^\n]+)/,
  Vp = (e) => (e.constructor.name === "Buffer" ? e.toString() : Jv.decode(e));
async function* _p(e) {
  if (e.body[Symbol.asyncIterator]) for await (var t of e.body) yield Vp(t);
  else {
    var i = e.body.getReader(),
      n;
    try {
      for (; !(n = await i.read()).done; ) yield Vp(n.value);
    } finally {
      i.cancel();
    }
  }
}
async function* $p(e, t) {
  var i = "",
    n;
  for await (var a of e) for (i += a; (n = i.indexOf(t)) > -1; ) yield i.slice(0, n), (i = i.slice(n + t.length));
}
async function* Kv(e, t, i) {
  var n = !0,
    a = null,
    r;
  try {
    yield await Promise.resolve();
    var o = (r = await (e.context.fetch || fetch)(t, i)).headers.get("Content-Type") || "",
      s;
    if (/multipart\/mixed/i.test(o))
      s = (async function* (u, f) {
        var p = u.match(Yv),
          m = "--" + (p ? p[1] : "-"),
          h = !0,
          k;
        for await (var x of $p(
          _p(f),
          `\r
` + m
        )) {
          if (h) {
            h = !1;
            var T = x.indexOf(m);
            if (T > -1) x = x.slice(T + m.length);
            else continue;
          }
          try {
            yield (k = JSON.parse(
              x.slice(
                x.indexOf(`\r
\r
`) + 4
              )
            ));
          } catch (y) {
            if (!k) throw y;
          }
          if (k && k.hasNext === !1) break;
        }
        k && k.hasNext !== !1 && (yield { hasNext: !1 });
      })(o, r);
    else if (/text\/event-stream/i.test(o))
      s = (async function* (u) {
        var f;
        for await (var p of $p(
          _p(u),
          `

`
        )) {
          var m = p.match(Xv);
          if (m) {
            var h = m[1];
            try {
              yield (f = JSON.parse(h));
            } catch (k) {
              if (!f) throw k;
            }
            if (f && f.hasNext === !1) break;
          }
        }
        f && f.hasNext !== !1 && (yield { hasNext: !1 });
      })(r);
    else if (!/text\//i.test(o))
      s = (async function* (u) {
        yield JSON.parse(await u.text());
      })(r);
    else throw new Error(await r.text());
    for await (var l of s) (a = a ? vu(a, l, r) : hu(e, l, r)), (n = !1), yield a, (n = !0);
    a || (yield (a = hu(e, {}, r)));
  } catch (d) {
    if (!n) throw d;
    yield by(e, r && (r.status < 200 || r.status >= 300) && r.statusText ? new Error(r.statusText) : d, r);
  }
}
function e1(e, t, i) {
  var n;
  return (
    typeof AbortController < "u" && (i.signal = (n = new AbortController()).signal),
    lc(() => {
      n && n.abort();
    })(At((a) => !!a)(uy(Kv(e, t, i))))
  );
}
var Iu = (e, t) => {
    if (Array.isArray(e)) for (var i of e) Iu(i, t);
    else if (typeof e == "object" && e !== null) for (var n in e) n === "__typename" && typeof e[n] == "string" ? t.add(e[n]) : Iu(e[n], t);
    return t;
  },
  Su = (e) => {
    var t = !1;
    if ("definitions" in e) {
      var i = [];
      for (var n of e.definitions) {
        var a = Su(n);
        (t = t || a !== n), i.push(a);
      }
      if (t) return { ...e, definitions: i };
    } else if ("selectionSet" in e) {
      var r = [],
        o = e.kind === _s.OPERATION_DEFINITION;
      if (e.selectionSet) {
        for (var s of e.selectionSet.selections || []) {
          o = o || (s.kind === _s.FIELD && s.name.value === "__typename" && !s.alias);
          var l = Su(s);
          (t = t || l !== s), r.push(l);
        }
        if ((o || ((t = !0), r.push({ kind: _s.FIELD, name: { kind: _s.NAME, value: "__typename" } })), t))
          return { ...e, selectionSet: { ...e.selectionSet, selections: r } };
      }
    }
    return e;
  },
  Gp = new Map(),
  t1 = (e) => {
    var t = gy(e),
      i = Gp.get(t.__key);
    return i || (Gp.set(t.__key, (i = Su(t))), Object.defineProperty(i, "__key", { value: t.__key, enumerable: !1 })), i;
  },
  ku = (e, t) => {
    if (!e || typeof e != "object") return e;
    if (Array.isArray(e)) return e.map((a) => ku(a));
    if (e && typeof e == "object" && (t || "__typename" in e)) {
      var i = {};
      for (var n in e)
        n === "__typename" ? Object.defineProperty(i, "__typename", { enumerable: !1, value: e.__typename }) : (i[n] = ku(e[n]));
      return i;
    } else return e;
  };
function jp(e) {
  var t = (i) => e(i);
  return (
    (t.toPromise = () => md(cl(1)(At((i) => !i.stale && !i.hasNext)(t)))),
    (t.then = (i, n) => t.toPromise().then(i, n)),
    (t.subscribe = (i) => cs(i)(t)),
    t
  );
}
function al(e, t, i) {
  return { ...t, kind: e, context: t.context ? { ...t.context, ...i } : i || t.context };
}
var i1 = () => {},
  _d = ({ kind: e }) => e !== "mutation" && e !== "query",
  n1 = ({ forward: e, client: t, dispatchDebug: i }) => {
    var n = new Map(),
      a = new Map(),
      r = (s) => {
        var l = al(s.kind, s);
        return (l.query = t1(s.query)), l;
      },
      o = (s) =>
        s.kind === "query" && s.context.requestPolicy !== "network-only" && (s.context.requestPolicy === "cache-only" || n.has(s.key));
    return (s) => {
      var l = Bi((u) => {
          var f = n.get(u.key),
            p = f;
          return u.context.requestPolicy === "cache-and-network" && ((p.stale = !0), zp(t, u)), p;
        })(At((u) => !_d(u) && o(u))(s)),
        d = tl((u) => {
          var { operation: f } = u;
          if (f) {
            var p = f.context.additionalTypenames || [];
            if (
              (u.operation.kind !== "subscription" && (p = ((w) => [...Iu(w, new Set())])(u.data).concat(p)),
              u.operation.kind === "mutation" || u.operation.kind === "subscription")
            ) {
              for (var m = new Set(), h = 0; h < p.length; h++) {
                var k = p[h],
                  x = a.get(k);
                x || a.set(k, (x = new Set()));
                for (var T of x.values()) m.add(T);
                x.clear();
              }
              for (var y of m.values()) n.has(y) && ((f = n.get(y).operation), n.delete(y), zp(t, f));
            } else if (f.kind === "query" && u.data) {
              n.set(f.key, u);
              for (var v = 0; v < p.length; v++) {
                var S = p[v],
                  F = a.get(S);
                F || a.set(S, (F = new Set())), F.add(f.key);
              }
            }
          }
        })(
          e(
            At((u) => u.kind !== "query" || u.context.requestPolicy !== "cache-only")(
              Bi((u) => u)(us([Bi(r)(At((u) => !_d(u) && !o(u))(s)), At((u) => _d(u))(s)]))
            )
          )
        );
      return us([l, d]);
    };
  },
  zp = (e, t) => e.reexecuteOperation(al(t.kind, t, { requestPolicy: "network-only" })),
  $d =
    ({ forwardSubscription: e, enableAllOperations: t, isSubscriptionOperation: i }) =>
    ({ client: n, forward: a }) => {
      var r = i || ((o) => o.kind === "subscription" || (!!t && (o.kind === "query" || o.kind === "mutation")));
      return (o) => {
        var s = el((d) => {
            var { key: u } = d,
              f = At((p) => p.kind === "teardown" && p.key === u)(o);
            return dc(f)(
              ((p) => {
                var m = e(vy(p), p);
                return uc(({ next: h, complete: k }) => {
                  var x = !1,
                    T,
                    y;
                  return (
                    Promise.resolve().then(() => {
                      x ||
                        (T = m.subscribe({
                          next(v) {
                            h((y = y ? vu(y, v) : hu(p, v)));
                          },
                          error(v) {
                            h(by(p, v));
                          },
                          complete() {
                            x ||
                              ((x = !0),
                              p.kind === "subscription" && n.reexecuteOperation(al("teardown", p, p.context)),
                              y && y.hasNext && h(vu(y, { hasNext: !1 })),
                              k());
                          },
                        }));
                    }),
                    () => {
                      (x = !0), T && T.unsubscribe();
                    }
                  );
                });
              })(d)
            );
          })(At((d) => d.kind !== "teardown" && r(d))(o)),
          l = a(At((d) => d.kind === "teardown" || !r(d))(o));
        return us([s, l]);
      };
    },
  a1 =
    ({ forward: e, dispatchDebug: t }) =>
    (i) => {
      var n = el((r) => {
          var o = vy(r),
            s = Hv(r, o),
            l = Zv(r, o),
            d = dc(At((u) => u.kind === "teardown" && u.key === r.key)(i))(e1(r, s, l));
          return d;
        })(At((r) => r.kind !== "teardown" && (r.kind !== "subscription" || !!r.context.fetchSubscriptions))(i)),
        a = e(At((r) => r.kind === "teardown" || (r.kind === "subscription" && !r.context.fetchSubscriptions))(i));
      return us([n, a]);
    },
  r1 =
    (e) =>
    ({ client: t, forward: i, dispatchDebug: n }) =>
      e.reduceRight(
        (a, r) =>
          r({
            client: t,
            forward(o) {
              return il(a(il(o)));
            },
            dispatchDebug(o) {},
          }),
        i
      ),
  Iy =
    ({ onOperation: e, onResult: t, onError: i }) =>
    ({ forward: n }) =>
    (a) =>
      el((r) => {
        i && r.error && i(r.error, r.operation);
        var o = (t && t(r)) || r;
        return "then" in o ? Pp(o) : zs(o);
      })(
        n(
          el((r) => {
            var o = (e && e(r)) || r;
            return "then" in o ? Pp(o) : zs(o);
          })(a)
        )
      ),
  o1 =
    ({ dispatchDebug: e }) =>
    (t) =>
      At((i) => !1)(t),
  Wp = function e(t) {
    var i = 0,
      n = new Map(),
      a = new Map(),
      r = new Set(),
      o = [],
      s = {
        url: t.url,
        fetchSubscriptions: t.fetchSubscriptions,
        fetchOptions: t.fetchOptions,
        fetch: t.fetch,
        preferGetMethod: !!t.preferGetMethod,
        requestPolicy: t.requestPolicy || "cache-first",
      },
      l = kv();
    function d(y) {
      (y.kind === "mutation" || y.kind === "teardown" || !r.has(y.key)) &&
        (y.kind === "teardown" ? r.delete(y.key) : y.kind !== "mutation" && r.add(y.key), l.next(y));
    }
    var u = !1;
    function f(y) {
      if ((y && d(y), !u)) {
        for (u = !0; u && (y = o.shift()); ) d(y);
        u = !1;
      }
    }
    var p = (y) => {
        var v = dc(At((S) => S.kind === "teardown" && S.key === y.key)(l.source))(
          At(
            (S) =>
              S.operation.kind === y.kind &&
              S.operation.key === y.key &&
              (!S.operation.context._instance || S.operation.context._instance === y.context._instance)
          )(T)
        );
        return (
          y.kind !== "query"
            ? (v = dy((S) => !!S.hasNext, !0)(v))
            : (v = Cp((S) => {
                var F = zs(S);
                return S.stale || S.hasNext ? F : us([F, Bi(() => ((S.stale = !0), S))(cl(1)(At((w) => w.key === y.key)(l.source)))]);
              })(v)),
          y.kind !== "mutation"
            ? (v = lc(() => {
                r.delete(y.key), n.delete(y.key), a.delete(y.key), (u = !1);
                for (var S = o.length - 1; S >= 0; S--) o[S].key === y.key && o.splice(S, 1);
                d(al("teardown", y, y.context));
              })(
                tl((S) => {
                  if (S.stale) {
                    for (var F of o)
                      if (F.key === S.operation.key) {
                        r.delete(F.key);
                        break;
                      }
                  } else S.hasNext || r.delete(y.key);
                  n.set(y.key, S);
                })(v)
              ))
            : (v = Bp(() => {
                d(y);
              })(v)),
          t.maskTypename && (v = Bi((S) => ({ ...S, data: ku(S.data, !0) }))(v)),
          il(v)
        );
      },
      m = this instanceof e ? this : Object.create(e.prototype),
      h = Object.assign(m, {
        suspense: !!t.suspense,
        operations$: l.source,
        reexecuteOperation(y) {
          y.kind === "teardown" ? f(y) : (y.kind === "mutation" || a.has(y.key)) && (o.push(y), Promise.resolve().then(f));
        },
        createRequestOperation(y, v, S) {
          return (
            S || (S = {}),
            al(y, v, {
              _instance: y === "mutation" ? (i = (i + 1) | 0) : void 0,
              ...s,
              ...S,
              requestPolicy: S.requestPolicy || s.requestPolicy,
              suspense: S.suspense || (S.suspense !== !1 && h.suspense),
            })
          );
        },
        executeRequestOperation(y) {
          return y.kind === "mutation"
            ? jp(p(y))
            : jp(
                vv(() => {
                  var v = a.get(y.key);
                  v || a.set(y.key, (v = p(y))),
                    (v = Bp(() => {
                      f(y);
                    })(v));
                  var S = n.get(y.key);
                  return y.kind === "query" && S && (S.stale || S.hasNext) ? Cp(zs)(us([v, At((F) => F === n.get(y.key))(zs(S))])) : v;
                })
              );
        },
        executeQuery(y, v) {
          var S = h.createRequestOperation("query", y, v);
          return h.executeRequestOperation(S);
        },
        executeSubscription(y, v) {
          var S = h.createRequestOperation("subscription", y, v);
          return h.executeRequestOperation(S);
        },
        executeMutation(y, v) {
          var S = h.createRequestOperation("mutation", y, v);
          return h.executeRequestOperation(S);
        },
        readQuery(y, v, S) {
          var F = null;
          return (
            cs((w) => {
              F = w;
            })(h.query(y, v, S)).unsubscribe(),
            F
          );
        },
        query: (y, v, S) => h.executeQuery(Ws(y, v), S),
        subscription: (y, v, S) => h.executeSubscription(Ws(y, v), S),
        mutation: (y, v, S) => h.executeMutation(Ws(y, v), S),
      }),
      k = i1,
      x = r1(t.exchanges),
      T = il(x({ client: h, dispatchDebug: k, forward: o1({ dispatchDebug: k }) })(l.source));
    return Nv(T), h;
  };
const Nu = (e) =>
    Object.entries(e)
      .flatMap(([t, i]) => {
        if (typeof i == "boolean") return i ? t : !1;
        if (i instanceof pc) {
          let n = "";
          const a = Object.entries(i.args)
            .filter(([r, o]) => o != null)
            .map(([r, o]) => {
              var s;
              return `${r}: ${o instanceof fc ? `$${(s = o.name) !== null && s !== void 0 ? s : r}` : JSON.stringify(o)}`;
            });
          return a.length > 0 && (n = `(${a.join(", ")})`), i.subselection ? [`${t}${n} {`, ...Nu(i.subselection), "}"] : `${t}${n}`;
        } else return [`${t} {`, ...Nu(i), "}"];
      })
      .filter((t) => !!t)
      .map((t) => "  " + t),
  Zl = (e) => {
    const t = {},
      i = (n) => {
        let a = 1;
        if (t[n]) {
          for (; t[`${n}${a}`]; ) a++;
          return `${n}${a}`;
        }
        return n;
      };
    return (
      Object.entries(e).forEach(([n, a]) => {
        a instanceof pc
          ? (Object.entries(a.args).forEach(([r, o]) => {
              var s;
              o instanceof fc && (t[(s = o.name) !== null && s !== void 0 ? s : i(r)] = o);
            }),
            a.subselection && Object.assign(t, Zl(a.subselection)))
          : typeof a == "object" && a !== null && Object.assign(t, Zl(a));
      }),
      t
    );
  },
  s1 = (e) => {
    const t = Zl(e.fields);
    return Object.keys(t).length === 0
      ? ""
      : `(${Object.entries(t)
          .map(([n, a]) => `$${n}: ${a.type}`)
          .join(", ")})`;
  };
class pc {
  constructor(t, i) {
    Object.defineProperty(this, "args", { enumerable: !0, configurable: !0, writable: !0, value: t }),
      Object.defineProperty(this, "subselection", { enumerable: !0, configurable: !0, writable: !0, value: i });
  }
}
class fc {
  constructor(t, i, n) {
    Object.defineProperty(this, "type", { enumerable: !0, configurable: !0, writable: !0, value: t }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: i }),
      Object.defineProperty(this, "value", { enumerable: !0, configurable: !0, writable: !0, value: n });
  }
  present() {
    return this.value != null;
  }
}
const Jt = (e, t) => new pc(e, t),
  fe = (e) => new fc(e.type + (e.required ? "!" : ""), e.name, e.value),
  Sy = (e) => {
    var t;
    const i = s1(e),
      n = e.directives && e.directives.length > 0 ? ` ${e.directives.join(" ")}` : "";
    return `${e.type} ${(t = e.name) !== null && t !== void 0 ? t : ""}${i}${n} {
${Nu(e.fields).join(`
`)}
}`;
  },
  ni = (e) => {
    const t = Zl(e.fields);
    return { query: Sy(e), variables: Object.entries(t ?? {}).reduce((i, [n, a]) => (typeof a.value < "u" && (i[n] = a.value), i), {}) };
  },
  l1 = {
    DateTime(e) {
      return new Date(e);
    },
  };
class d1 {
  constructor(t) {
    Object.defineProperty(this, "plan", { enumerable: !0, configurable: !0, writable: !0, value: t });
  }
  apply(t) {
    return Array.isArray(t) ? t.map((i) => this.hydrateObject(i)) : this.hydrateObject(t);
  }
  hydrateObject(t) {
    const i = { ...t };
    for (const [n, a] of Object.entries(this.plan)) {
      const r = i[n];
      r != null && (i[n] = l1[a](r));
    }
    return i;
  }
}
function pn(e) {
  if (typeof e != "object") return e;
  var t,
    i,
    n = Object.prototype.toString.call(e);
  if (n === "[object Object]") {
    if (e.constructor !== Object && typeof e.constructor == "function") {
      i = new e.constructor();
      for (t in e) e.hasOwnProperty(t) && i[t] !== e[t] && (i[t] = pn(e[t]));
    } else {
      i = {};
      for (t in e)
        t === "__proto__"
          ? Object.defineProperty(i, t, { value: pn(e[t]), configurable: !0, enumerable: !0, writable: !0 })
          : (i[t] = pn(e[t]));
    }
    return i;
  }
  if (n === "[object Array]") {
    for (t = e.length, i = Array(t); t--; ) i[t] = pn(e[t]);
    return i;
  }
  return n === "[object Set]"
    ? ((i = new Set()),
      e.forEach(function (a) {
        i.add(pn(a));
      }),
      i)
    : n === "[object Map]"
    ? ((i = new Map()),
      e.forEach(function (a, r) {
        i.set(pn(r), pn(a));
      }),
      i)
    : n === "[object Date]"
    ? new Date(+e)
    : n === "[object RegExp]"
    ? ((i = new RegExp(e.source, e.flags)), (i.lastIndex = e.lastIndex), i)
    : n === "[object DataView]"
    ? new e.constructor(pn(e.buffer))
    : n === "[object ArrayBuffer]"
    ? e.slice(0)
    : n.slice(-6) === "Array]"
    ? new e.constructor(e)
    : e;
}
var ky, Ny, Ay, Fy, wy, Mi;
(function (e) {
  (e[(e.SinceLoaded = 0)] = "SinceLoaded"), (e[(e.SinceLastPersisted = 1)] = "SinceLastPersisted");
})(Mi || (Mi = {}));
const Qt = Symbol.for("g/fields"),
  Xr = Symbol.for("g/if"),
  Kr = Symbol.for("g/pf"),
  eo = Symbol.for("g/fk"),
  $s = Symbol.for("g/t");
class u1 {
  constructor(t) {
    var i, n;
    Object.defineProperty(this, ky, { enumerable: !0, configurable: !0, writable: !0, value: {} }),
      Object.defineProperty(this, Ny, { enumerable: !0, configurable: !0, writable: !0, value: {} }),
      Object.defineProperty(this, Ay, { enumerable: !0, configurable: !0, writable: !0, value: {} }),
      Object.defineProperty(this, Fy, { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, wy, { enumerable: !0, configurable: !0, writable: !0, value: !1 }),
      Object.defineProperty(this, "empty", { enumerable: !0, configurable: !0, writable: !0, value: !1 }),
      (this[Xr] = (i = pn(t)) !== null && i !== void 0 ? i : {}),
      (this[Kr] = (n = pn(t)) !== null && n !== void 0 ? n : {}),
      Object.assign(this[Qt], t),
      !t || Object.keys(t).length === 0 ? ((this.empty = !0), (this[eo] = new Set())) : (this[eo] = new Set(Object.keys(this[Qt])));
    const a = this,
      r = {
        get: (o, s) => {
          if (s in a || typeof s == "symbol") {
            let l = a[s];
            return typeof l == "function" && (l = l.bind(a)), l;
          } else if (s in o) return o[s];
        },
        set: (o, s, l) => (a.trackKey(s), (o[s.toString()] = l), !0),
      };
    return new Proxy(this[Qt], r);
  }
  trackKey(t) {
    const i = t.toString();
    this[eo].add(i);
  }
  hasValueChanged(t, i) {
    if ((t instanceof Date && typeof i == "string") || (i instanceof Date && typeof t == "string")) {
      const n = t instanceof Date ? t : new Date(t),
        a = i instanceof Date ? i : new Date(i);
      return !isNaN(n.getTime()) && !isNaN(a.getTime()) ? n.getTime() !== a.getTime() : !0;
    }
    return !jd(t, i);
  }
  hasChanges(t = Mi.SinceLoaded) {
    if (this[$s]) return !0;
    const i = t == Mi.SinceLoaded ? this[Xr] : this[Kr];
    return [...this[eo]].some((n) => this.hasValueChanged(this[Qt][n], i[n]));
  }
  isEmpty() {
    return this.empty;
  }
  getField(t) {
    return this[Qt][t];
  }
  setField(t, i) {
    return this.trackKey(t), (this[Qt][t] = i);
  }
  changes(t, i = Mi.SinceLoaded) {
    const a = (typeof t == "string" ? i : t || i) == Mi.SinceLoaded ? this[Xr] : this[Kr];
    if (t && typeof t == "string") {
      const r = a[t],
        o = this[Qt][t],
        s = this.hasValueChanged(o, r);
      return s ? { changed: s, current: o, previous: r } : { changed: s };
    } else {
      const r = {};
      for (const o of this[eo]) jd(a[o], this[Qt][o]) || (r[o] = { current: this[Qt][o], previous: a[o] });
      return r;
    }
  }
  toChangedJSON(t = Mi.SinceLoaded) {
    const i = t == Mi.SinceLoaded ? this[Xr] : this[Kr],
      n = {};
    for (const a of this[eo]) jd(i[a], this[Qt][a]) || (n[a] = this[Qt][a]);
    return n;
  }
  changed(t, i = Mi.SinceLoaded) {
    return t && typeof t == "string" ? this.changes(t, i).changed : this.hasChanges(t === void 0 ? i : t);
  }
  flushChanges(t = Mi.SinceLoaded) {
    t == Mi.SinceLoaded ? (this[Xr] = pn(this[Qt])) : t == Mi.SinceLastPersisted && (this[Kr] = pn(this[Qt])), (this[$s] = !1);
  }
  revertChanges(t = Mi.SinceLoaded) {
    let i;
    t == Mi.SinceLoaded ? (i = Object.keys(this[Xr])) : (i = Object.keys(this[Kr]));
    for (const n of this[eo]) i.includes(n) || delete this[Qt][n];
    t == Mi.SinceLoaded ? Object.assign(this[Qt], pn(this[Xr])) : Object.assign(this[Qt], pn(this[Kr])), (this[$s] = !1);
  }
  toJSON() {
    return xu({ ...this[Qt] });
  }
  touch() {
    this[$s] = !0;
  }
}
(ky = Qt), (Ny = Xr), (Ay = Kr), (Fy = eo), (wy = $s);
const xy = u1;
class Ty extends Error {
  constructor() {
    super(...arguments),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: "GGT_INTERNAL_ERROR" }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "InternalError" }),
      Object.defineProperty(this, "statusCode", { enumerable: !0, configurable: !0, writable: !0, value: 500 }),
      Object.defineProperty(this, "causedByClient", { enumerable: !0, configurable: !0, writable: !0, value: !1 });
  }
}
class Au extends Error {
  constructor() {
    super(...arguments),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: "GGT_CLIENT_ERROR" }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "ClientError" }),
      Object.defineProperty(this, "statusCode", { enumerable: !0, configurable: !0, writable: !0, value: 500 }),
      Object.defineProperty(this, "causedByClient", { enumerable: !0, configurable: !0, writable: !0, value: !0 });
  }
}
class gd extends Error {
  constructor(t, i) {
    super(t.startsWith("GGT_") ? t : `${i}: ${t}`),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: i });
  }
}
class Lp extends Error {
  constructor(t) {
    let i;
    Fu(t)
      ? (i = `GraphQL websocket closed unexpectedly by the server with error code ${t.code} and reason "${t.reason}"`)
      : (i = "GraphQL websocket closed unexpectedly by the server"),
      super(i),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: "GGT_UNKNOWN" }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "UnexpectedCloseError" }),
      Object.defineProperty(this, "statusCode", { enumerable: !0, configurable: !0, writable: !0, value: 500 }),
      Object.defineProperty(this, "causedByClient", { enumerable: !0, configurable: !0, writable: !0, value: !1 }),
      Object.defineProperty(this, "event", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      (this.event = t);
  }
}
class c1 extends Error {
  constructor() {
    super(...arguments),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: "GGT_WEBSOCKET_CONNECTION_TIMEOUT" }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "WebsocketConnectionTimeoutError" }),
      Object.defineProperty(this, "statusCode", { enumerable: !0, configurable: !0, writable: !0, value: 500 }),
      Object.defineProperty(this, "causedByClient", { enumerable: !0, configurable: !0, writable: !0, value: !1 });
  }
}
class p1 extends Error {
  constructor() {
    super(...arguments),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: "GGT_TOO_MANY_REQUESTS" }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "TooManyRequestsError" }),
      Object.defineProperty(this, "statusCode", { enumerable: !0, configurable: !0, writable: !0, value: 429 }),
      Object.defineProperty(this, "causedByClient", { enumerable: !0, configurable: !0, writable: !0, value: !1 });
  }
}
class f1 extends Error {
  constructor(t, i, n, a) {
    const r = i.slice(0, 3),
      o = i.length > 3 ? `, and ${i.length - 3} more error${i.length > 4 ? "s" : ""} need${i.length > 4 ? "" : "s"} to be corrected` : "";
    super(
      t ??
        `GGT_INVALID_RECORD: ${n ?? "Record"} is invalid and can't be saved. ${r
          .map(({ apiIdentifier: s, message: l }) => `${s} ${l}`)
          .join(", ")}${o}.`
    ),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: "GGT_INVALID_RECORD" }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "InvalidRecordError" }),
      Object.defineProperty(this, "statusCode", { enumerable: !0, configurable: !0, writable: !0, value: 422 }),
      Object.defineProperty(this, "causedByClient", { enumerable: !0, configurable: !0, writable: !0, value: !0 }),
      Object.defineProperty(this, "validationErrors", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "modelApiIdentifier", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "record", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      (this.validationErrors = i),
      (this.modelApiIdentifier = n),
      (this.record = a);
  }
}
class My extends Error {
  constructor() {
    super(...arguments),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: "GGT_NON_UNIQUE_DATA" }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "NonUniqueDataError" }),
      Object.defineProperty(this, "statusCode", { enumerable: !0, configurable: !0, writable: !0, value: 417 }),
      Object.defineProperty(this, "causedByClient", { enumerable: !0, configurable: !0, writable: !0, value: !1 });
  }
}
class mc extends Error {
  constructor() {
    super(...arguments),
      Object.defineProperty(this, "code", { enumerable: !0, configurable: !0, writable: !0, value: "GGT_RECORD_NOT_FOUND" }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "RecordNotFoundError" }),
      Object.defineProperty(this, "statusCode", { enumerable: !0, configurable: !0, writable: !0, value: 404 }),
      Object.defineProperty(this, "causedByClient", { enumerable: !0, configurable: !0, writable: !0, value: !1 });
  }
}
class m1 extends Error {
  constructor(t, i) {
    super(t.length > 1 ? "Multiple errors occurred" : t[0].message),
      Object.defineProperty(this, "errors", { enumerable: !0, configurable: !0, writable: !0, value: t }),
      Object.defineProperty(this, "results", { enumerable: !0, configurable: !0, writable: !0, value: i }),
      Object.defineProperty(this, "name", { enumerable: !0, configurable: !0, writable: !0, value: "ErrorGroup" });
  }
  get code() {
    return `GGT_ERROR_GROUP(${this.errors
      .slice(0, 10)
      .map((t) => {
        var i;
        return (i = t.code) !== null && i !== void 0 ? i : "GGT_UNKNOWN";
      })
      .join(",")})`;
  }
  get statusCode() {
    return Math.max(
      ...this.errors.map((t) => {
        var i;
        return (i = t.statusCode) !== null && i !== void 0 ? i : 500;
      })
    );
  }
}
function mt(e, t) {
  if (!e) throw new Error("assertion error" + (t ? `: ${t}` : ""));
  return e;
}
const ms = (e, t) => {
    const i = t.length;
    let n = 0;
    for (; e != null && n < i; ) e = e[t[n++]];
    return n && n == i ? e : void 0;
  },
  Fu = (e) => (e == null ? void 0 : e.type) == "close",
  ua = (e, t) => (typeof e != "string" ? "" : fl(e, t)),
  Hp = (e) => {
    const t = e == null ? "" : String(e);
    return t.charAt(0).toUpperCase() + t.slice(1);
  },
  fl = (e, t = !0) => {
    let i = "" + e;
    return (
      t ? (i = i.replace(/^[a-z\d]*/, (n) => Hp(n))) : (i = i.replace(new RegExp("^(?:(?=\\b|[A-Z_])|\\w)"), (n) => n.toLowerCase())),
      (i = i.replace(/(?:_|(\/))([a-z\d]*)/gi, (n, a, r, o, s) => (a || (a = ""), "" + a + Hp(r)))),
      i
    );
  },
  yc = (e, t) => [...(Array.isArray(t) ? t : t ? [t] : []), e].map((a) => fl(a)).join(""),
  Oy = (e, t) => `${yc(e, t)}Sort`,
  gc = (e, t) => `${yc(e, t)}Filter`,
  y1 = (e, t, i) =>
    new My(`More than one record found for ${e}.${t} = ${i}. Please confirm your unique validation is not reporting an error.`),
  g1 = (e, t) => {
    if (e.fetching) return;
    const i = ms(e.data, t);
    if (i === void 0) return new Ty(`Internal Error: Gadget API didn't return expected data. Nothing found in response at ${t.join(".")}`);
    if (i === null) return new mc(`Record Not Found Error: Gadget API returned no data at ${t.join(".")}`);
  },
  qn = (e, t, i = !1) => {
    var n;
    if (e.error)
      throw (
        (e.error instanceof pl &&
          !((n = e.error.networkError) === null || n === void 0) &&
          n.length &&
          (e.error.message = e.error.networkError.map((s) => "[Network] " + s.message).join(`
`)),
        e.error)
      );
    const a = ms(e.data, t),
      r = ms(a, ["edges"]),
      o = r ?? a;
    if (a === void 0) throw new Ty(`Internal Error: Gadget API didn't return expected data. Nothing found in response at ${t.join(".")}`);
    if (a === null || (i && Array.isArray(o) && o.length === 0))
      throw new mc(`Record Not Found Error: Gadget API returned no data at ${t.join(".")}`);
    return a;
  },
  Ls = (e, t) => {
    var i;
    if (e.error)
      throw (
        (e.error instanceof pl &&
          !((i = e.error.networkError) === null || i === void 0) &&
          i.length &&
          (e.error.message = e.error.networkError.map((a) => "[Network] " + a.message).join(`
`)),
        e.error)
      );
    const n = ms(e.data, t);
    return n ?? null;
  },
  hc = (e) => {
    var t;
    return e.code == "GGT_INVALID_RECORD"
      ? new f1(e.message, e.validationErrors, (t = e.model) === null || t === void 0 ? void 0 : t.apiIdentifier, e.record)
      : e.code == "GGT_UNKNOWN" && e.message.includes("duplicate key value violates unique constraint")
      ? new My(e.message)
      : new gd(e.message, e.code);
  },
  br = (e, t) => {
    const i = qn(e, t);
    return Ry(i);
  },
  Ry = (e) => {
    if (!e.success) {
      const t = e.errors && e.errors[0];
      throw t ? hc(t) : new gd("Gadget API operation not successful.", "GGT_UNKNOWN");
    }
    return e;
  },
  By = (e) => {
    var t, i, n, a;
    if (!((i = (t = e.data) === null || t === void 0 ? void 0 : t.gadgetMeta) === null || i === void 0) && i.hydrations)
      return new d1((a = (n = e.data) === null || n === void 0 ? void 0 : n.gadgetMeta) === null || a === void 0 ? void 0 : a.hydrations);
  },
  Fo = (e, t) => {
    const i = By(e);
    return i && (t = i.apply(t)), new xy(t);
  },
  bc = (e, t) => {
    const i = By(e);
    return i && (t = i.apply(t)), t == null ? void 0 : t.map((n) => new xy(n));
  },
  rl = (e, t) => {
    const i = t.edges.map((n) => n.node);
    return bc(e, i);
  },
  wu = "[object Object]",
  Qp = "[object String]",
  xu = (e) => {
    if ((e != null && typeof e.toJSON == "function" && (e = e.toJSON()), e !== void 0)) {
      if (e === null) return null;
      if (typeof e == "boolean" || typeof e == "string") return e;
      if (typeof e == "number") return Number.isFinite(e) ? e : null;
      if (typeof e == "object") {
        if (Array.isArray(e)) {
          const t = [];
          for (let i = 0; i < e.length; i++) {
            const n = e[i];
            t[i] = n === void 0 ? null : xu(n);
          }
          return t;
        }
        if (Object.prototype.toString.call(e) === "[object Error]") return {};
        if (Object.prototype.toString.call(e) === wu) {
          const t = {};
          for (const i of Object.keys(e)) {
            const n = xu(e[i]);
            n !== void 0 && (t[i] = n);
          }
          return t;
        }
      }
    }
  },
  Gd = "gstk",
  Zp = (e) => {
    try {
      const t = window[e];
      return t.setItem(Gd, Gd), t.removeItem(Gd), !0;
    } catch {
      return !1;
    }
  },
  Jp = Object.prototype.toString,
  Yp = Object.getPrototypeOf,
  Xp = Object.getOwnPropertySymbols ? (e) => Object.keys(e).concat(Object.getOwnPropertySymbols(e)) : Object.keys,
  Gs = (e, t, i) => {
    if (e === t) return !0;
    if (e == null || t == null) return !1;
    if (i.indexOf(e) > -1 && i.indexOf(t) > -1) return !0;
    const n = Jp.call(e),
      a = Jp.call(t);
    let r, o, s;
    if ((i.push(e, t), n == wu && a == Qp && "_link" in e && Object.keys(e).length == 1)) return e._link === t;
    if (a == wu && n == Qp && "_link" in t && Object.keys(t).length == 1) return t._link === e;
    if (
      n != a ||
      ((r = Xp(e)),
      (o = Xp(t)),
      r.length != o.length ||
        r.some(function (l) {
          return !Gs(e[l], t[l], i);
        }))
    )
      return !1;
    switch (n.slice(8, -1)) {
      case "Symbol":
        return e.valueOf() == t.valueOf();
      case "Date":
      case "Number":
        return +e == +t || (+e != +e && +t != +t);
      case "RegExp":
      case "Function":
      case "String":
      case "Boolean":
        return "" + e == "" + t;
      case "Set":
      case "Map": {
        (r = e.entries()), (o = t.entries());
        do if (((s = r.next()), !Gs(s.value, o.next().value, i))) return !1;
        while (!s.done);
        return !0;
      }
      case "ArrayBuffer":
        (e = new Uint8Array(e)), (t = new Uint8Array(t));
      case "DataView":
        (e = new Uint8Array(e.buffer)), (t = new Uint8Array(t.buffer));
      case "Float32Array":
      case "Float64Array":
      case "Int8Array":
      case "Int16Array":
      case "Int32Array":
      case "Uint8Array":
      case "Uint16Array":
      case "Uint32Array":
      case "Uint8ClampedArray":
      case "Arguments":
      case "Array":
        if (e.length != t.length) return !1;
        for (s = 0; s < e.length; s++) if (!(!(s in e) && !(s in t)) && (s in e != s in t || !Gs(e[s], t[s], i))) return !1;
        return !0;
      case "Object":
        return Gs(Yp(e), Yp(t), i);
      default:
        return !1;
    }
  },
  jd = (e, t) => Gs(e, t, []),
  Cy = (e, t) => {
    var i, n, a;
    if ((t ?? (t = {}), !("hasAmbiguousIdentifier" in e) && !("acceptsModelInput" in e))) return t;
    if (
      e.hasAmbiguousIdentifier &&
      Object.keys(t).some((s) => {
        var l;
        return s !== "id" && !(!((l = e.paramOnlyVariables) === null || l === void 0) && l.includes(s)) && s !== e.modelApiIdentifier;
      })
    )
      throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
    let r;
    const o = (i = e.operatesWithRecordIdentity) !== null && i !== void 0 ? i : !0;
    if ((n = e.acceptsModelInput) !== null && n !== void 0 ? n : e.hasCreateOrUpdateEffect)
      if (e.modelApiIdentifier in t && typeof t[e.modelApiIdentifier] == "object" && t[e.modelApiIdentifier] != null) r = t;
      else {
        r = { [e.modelApiIdentifier]: {} };
        for (const [s, l] of Object.entries(t))
          !((a = e.paramOnlyVariables) === null || a === void 0) && a.includes(s)
            ? (r[s] = l)
            : s == "id" && o
            ? (r.id = l)
            : (r[e.modelApiIdentifier][s] = l);
      }
    else r = t;
    return r;
  },
  h1 = (e, t = {}) => {
    var i;
    return e.variables.ids
      ? Array.isArray(t)
        ? { ids: t }
        : t
      : { inputs: ((i = Array.isArray(t) ? t : t.inputs) !== null && i !== void 0 ? i : []).map((a) => Cy(e, a)) };
  },
  b1 = (e, t) => {
    const i = {};
    for (const [n, a] of Object.entries(e)) i[n] = { ...a, value: t[n] };
    return i;
  },
  kr = (e, t) => (t && e.unshift(...(Array.isArray(t) ? t : [t])), e),
  nr = (e, t) => {
    const i = t ? [...(Array.isArray(t) ? t : [t]), e].join(".") : e;
    return { gadgetMeta: { hydrations: Jt({ modelName: i }) } };
  };
function hn(e, t) {
  if (!e) return t;
  if ((Array.isArray(e) || (e = [e]), e)) for (let i = e.length - 1; i >= 0; i--) t = { [e[i]]: t };
  return t;
}
const ao = {
  errors: {
    message: !0,
    code: !0,
    "... on InvalidRecordError": { model: { apiIdentifier: !0 }, validationErrors: { message: !0, apiIdentifier: !0 } },
  },
};
class ys extends Array {
  constructor() {
    super(...arguments),
      Object.defineProperty(this, "modelManager", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "pagination", { enumerable: !0, configurable: !0, writable: !0, value: void 0 });
  }
  static boot(t, i, n) {
    const a = new ys();
    return a.push(...i), (a.modelManager = t), (a.pagination = n), Object.freeze(a), a;
  }
  static get [Symbol.species]() {
    return Array;
  }
  firstOrThrow() {
    if (!this[0]) throw new gd("No records found.", "GGT_RECORD_NOT_FOUND");
    return this[0];
  }
  toJSON() {
    return this.map((t) => t.toJSON());
  }
  get hasNextPage() {
    return this.pagination.pageInfo.hasNextPage;
  }
  get hasPreviousPage() {
    return this.pagination.pageInfo.hasPreviousPage;
  }
  get startCursor() {
    return this.pagination.pageInfo.startCursor;
  }
  get endCursor() {
    return this.pagination.pageInfo.endCursor;
  }
  async nextPage() {
    var t;
    if (!this.hasNextPage) throw new Au("Cannot request next page because there isn't one, should check 'hasNextPage' to see if it exists");
    const { first: i, last: n, before: a, ...r } = (t = this.pagination.options) !== null && t !== void 0 ? t : {};
    return await this.modelManager.findMany({ ...r, after: this.pagination.pageInfo.endCursor, first: i || n });
  }
  async previousPage() {
    var t;
    if (!this.hasPreviousPage)
      throw new Au("Cannot request previous page because there isn't one, should check 'hasPreviousPage' to see if it exists");
    const { first: i, last: n, after: a, ...r } = (t = this.pagination.options) !== null && t !== void 0 ? t : {};
    return await this.modelManager.findMany({ ...r, before: this.pagination.pageInfo.startCursor, last: n || i });
  }
}
const Jl = (e, t = !1) => {
    const i = { ...e };
    return t && (i.__typename = !0), i;
  },
  hd = (e) => {
    if (e != null && e.live) return ["@live"];
  },
  vc = (e, t, i, n, a, r) => {
    const o = {};
    typeof t < "u" && (o.id = fe({ type: "GadgetID!", value: t }));
    let s = { [e]: Jt(o, Jl((a == null ? void 0 : a.select) || i, !0)) };
    return (s = hn(r, s)), ni({ type: "query", name: e, fields: { ...s, ...nr(n, r) }, directives: hd(a) });
  },
  Ic = (e, t, i, n, a, r, o) => Bo(e, n, a, { ...r, first: 2, filter: { [t]: { equals: i } } }, o),
  Bo = (e, t, i, n, a) => {
    let r = {
      [e]: Jt(
        {
          after: fe({ value: n == null ? void 0 : n.after, type: "String" }),
          first: fe({ value: n == null ? void 0 : n.first, type: "Int" }),
          before: fe({ value: n == null ? void 0 : n.before, type: "String" }),
          last: fe({ value: n == null ? void 0 : n.last, type: "Int" }),
          sort: n != null && n.sort ? fe({ value: n.sort, type: `[${Oy(i, a)}!]` }) : void 0,
          filter: n != null && n.filter ? fe({ value: n.filter, type: `[${gc(i, a)}!]` }) : void 0,
          search: n != null && n.search ? fe({ value: n.search, type: "String" }) : void 0,
        },
        {
          pageInfo: { hasNextPage: !0, hasPreviousPage: !0, startCursor: !0, endCursor: !0 },
          edges: { cursor: !0, node: Jl((n == null ? void 0 : n.select) || t, !0) },
        }
      ),
    };
    return a && (r = hn(a, r)), ni({ type: "query", name: e, fields: { ...r, ...nr(i, a) }, directives: hd(n) });
  },
  Sc = (e) => Object.fromEntries(Object.entries(e).map(([t, i]) => [t, fe(i)])),
  kc = (e, t, i, n, a = 0) => {
    const r = a == 0 ? { success: !0, ...ao } : {};
    if (n && typeof n != "boolean")
      for (const [o, s] of Object.entries(n))
        "select" in s ? (r[o] = Jl(t, !0)) : (r[o] = { __typename: o.includes("... on"), ...kc(e, t, i, s.hasReturnType, a + 1) });
    else n ? (r[i && a == 0 ? "results" : "result"] = !0) : t && (r[e] = Jl(t, !0));
    return r;
  },
  ol = (e, t, i, n, a, r, o, s, l) => {
    const d = (r == null ? void 0 : r.select) || t;
    let u = { [e]: Jt(Sc(a), kc(n, d, s, l)) };
    u = hn(o, u);
    const f = { type: "mutation", name: e, fields: { ...u, ...nr(i, o) }, directives: hd(r) };
    return ni(f);
  },
  v1 = (e, t, i) => {
    let n = {},
      a = t.operationName,
      r;
    switch (
      (t.isBulk && (a = t.operationName.replace(/^bulk/, "").replace(/s$/, "")),
      t.operationReturnType ? (r = `${t.operationReturnType}Result`) : (r = `${fl(a)}Result`),
      t.type)
    ) {
      case "action": {
        const s = (i == null ? void 0 : i.select) || t.defaultSelection;
        n = { [`... on ${r}`]: kc(t.modelApiIdentifier, s, t.isBulk, t.hasReturnType) };
        break;
      }
      case "globalAction":
        n = { [`... on ${r}`]: Py() };
    }
    const o = {
      type: "subscription",
      name: ua(a) + "BackgroundResult",
      fields: { backgroundAction: Jt({ id: fe({ value: e, type: "String!" }) }, { id: !0, outcome: !0, result: { ...n } }) },
    };
    return ni(o);
  },
  Py = () => ({ success: !0, ...ao, result: !0 }),
  Nc = (e, t, i, n) => {
    let a = { [e]: Jt(Sc(t), Py()) };
    return (a = hn(i, a)), ni({ type: "mutation", name: e, fields: a, directives: hd(n) });
  },
  I1 = (e) => {
    if (!e) return null;
    const t = { ...e };
    typeof t.retries == "number" && (t.retries = { retryCount: t.retries }),
      typeof t.queue == "string" && (t.queue = { name: t.queue }),
      t.startAt instanceof Date && (t.startAt = t.startAt.toISOString());
    for (const i of Object.keys(t)) ["id", "retries", "queue", "priority", "startAt"].includes(i) || delete t[i];
    return t;
  },
  S1 = (e, t, i, n, a) => {
    let r = {
      [e]: Jt(
        { ...Sc(t), backgroundOptions: fe({ type: "EnqueueBackgroundActionOptions", value: I1(n) }) },
        { success: !0, errors: { message: !0, code: !0 }, [a ? "backgroundActions" : "backgroundAction"]: { id: !0 } }
      ),
    };
    return (r = hn(i, r)), ni({ type: "mutation", name: "enqueue" + fl(e), fields: { background: r } });
  },
  k1 = (e, t) => ({
    [Symbol.asyncIterator]() {
      const i = e[Symbol.asyncIterator]();
      return {
        async next() {
          const { done: n, value: a } = await i.next();
          return { done: n, value: typeof a < "u" ? t(a) : void 0 };
        },
        async return(n) {
          var a;
          return await ((a = i.return) === null || a === void 0 ? void 0 : a.call(i, n));
        },
      };
    },
  });
function Ac(e, t, i) {
  return i != null && i.live
    ? k1(Av(e), t)
    : Vn(
        e,
        At((a) => !a.stale && !a.hasNext),
        cl(1),
        md
      ).then((a) => t(a));
}
const ye = (e, t, i, n, a, r, o = !0, s) => {
    const l = vc(t, i, n, a, r, s),
      d = e.connection.currentClient.query(l.query, l.variables);
    return Ac(
      d,
      (u) => {
        const f = o ? qn : Ls,
          p = kr([t], s),
          m = f(u, p);
        return Fo(u, m);
      },
      r
    );
  },
  Ni = (e, t, i, n, a, r, o, s = !0, l) => {
    const d = Ic(t, i, n, a, r, o, l),
      u = kr([t], l),
      f = e.connection.currentClient.query(d.query, d.variables);
    return Ac(
      f,
      (p) => {
        const m = qn(p, u),
          h = rl(p, m);
        if (h.length > 1) throw y1(r, i, n);
        const k = h[0];
        if (!k && s) throw new mc(`${r} record with ${i}=${n} not found`);
        return k ?? null;
      },
      o
    );
  },
  se = (e, t, i, n, a, r, o) => {
    const s = Bo(t, i, n, a, o),
      l = e.connection.currentClient.query(s.query, s.variables),
      d = kr([t], o);
    return Ac(
      l,
      (u) => {
        let f;
        r === !1 ? (f = Ls(u, d)) : (f = qn(u, d, r));
        const p = rl(u, f);
        return ys.boot(e, p, { options: a, pageInfo: f.pageInfo });
      },
      a
    );
  },
  H = async (e, t, i, n, a, r, o, s, l, d) => {
    const u = ol(t, i, n, a, o, s, l, r, d),
      f = await e.connection.currentClient.mutation(u.query, u.variables).toPromise(),
      p = kr([t], l);
    if (r) {
      const m = ms(f.data, p),
        h = N1(i, f, m, a, d);
      if (m.errors) {
        const k = m.errors.map((x) => hc(x));
        throw new m1(k, h);
      }
      return h;
    } else {
      const m = br(f, p);
      return bd(i, f, m, a, d);
    }
  },
  N1 = (e, t, i, n, a) => {
    if (e != null)
      return a
        ? typeof a == "boolean"
          ? i.results
          : Object.entries(a).flatMap(([r, o]) => {
              const s = i[r];
              return Array.isArray(s)
                ? s.map((l) => {
                    const d = "hasReturnType" in o ? Ey(l, o.hasReturnType) : !1;
                    return d ? bd(e, t, l, n, d) : Fo(t, l);
                  })
                : [];
            })
        : bc(t, i[n]);
  },
  bd = (e, t, i, n, a) => {
    if (e != null)
      if (a) {
        if (typeof a == "boolean") return i.result;
        {
          const r = Ey(i, a);
          return bd(e, t, i, n, r);
        }
      } else return Fo(t, i[n]);
  },
  Ey = (e, t) => {
    if (typeof t == "boolean") return t;
    const i = t[`... on ${e.__typename}`];
    return i && "hasReturnType" in i ? i.hasReturnType : !1;
  },
  gs = async (e, t, i, n) => {
    const a = Nc(t, i, n),
      r = await e.currentClient.mutation(a.query, a.variables).toPromise(),
      o = kr([t], n);
    return br(r, o).result;
  };
async function ar(e, t, i, n = {}) {
  const a = t.isBulk ? h1(t, i) : Cy(t, i),
    r = b1(t.variables, a),
    o = S1(t.operationName, r, t.namespace, n, t.isBulk),
    s = await e.currentClient.mutation(o.query, o.variables, n).toPromise(),
    l = ["background", ...kr([t.operationName], t.namespace)];
  try {
    const d = br(s, l);
    return t.isBulk ? d.backgroundActions.map((u) => new Tn(e, t, u.id)) : new Tn(e, t, d.backgroundAction.id);
  } catch (d) {
    if ("code" in d && d.code == "GGT_DUPLICATE_BACKGROUND_ACTION_ID" && n != null && n.id && n.onDuplicateID == "ignore")
      return new Tn(e, t, n.id);
    throw d;
  }
}
const A1 = async (e, t, i, n) => {
  const a = v1(t, i, n),
    r = e.currentClient.subscription(a.query, a.variables),
    o = await Vn(
      r,
      At((l) => {
        var d, u;
        return (
          l.error ||
          ((u = (d = l.data) === null || d === void 0 ? void 0 : d.backgroundAction) === null || u === void 0 ? void 0 : u.outcome)
        );
      }),
      cl(1),
      md
    ),
    s = qn(o, ["backgroundAction"]);
  switch ((Ry(s.result), i.type)) {
    case "action": {
      s.result = bd(i.defaultSelection, o.data, s.result, i.isBulk ? i.modelApiIdentifier : i.modelSelectionField, i.hasReturnType);
      break;
    }
    case "globalAction": {
      s.result = s.result.result;
      break;
    }
  }
  return s;
};
class Tn {
  constructor(t, i, n) {
    Object.defineProperty(this, "connection", { enumerable: !0, configurable: !0, writable: !0, value: t }),
      Object.defineProperty(this, "action", { enumerable: !0, configurable: !0, writable: !0, value: i }),
      Object.defineProperty(this, "id", { enumerable: !0, configurable: !0, writable: !0, value: n });
  }
  async result(t) {
    return (await A1(this.connection, this.id, this.action, t)).result;
  }
}
var Hs;
(function (e) {
  (e.Durable = "Durable"), (e.Session = "session"), (e.Temporary = "temporary");
})(Hs || (Hs = {}));
function un(e) {
  return e === null ? "null" : Array.isArray(e) ? "array" : typeof e;
}
function ko(e) {
  return un(e) === "object";
}
function F1(e) {
  return Array.isArray(e) && e.length > 0 && e.every((t) => "message" in t);
}
function Kp(e, t) {
  return e.length < 124 ? e : t;
}
const w1 = "graphql-transport-ws";
var Oi;
(function (e) {
  (e[(e.InternalServerError = 4500)] = "InternalServerError"),
    (e[(e.InternalClientError = 4005)] = "InternalClientError"),
    (e[(e.BadRequest = 4400)] = "BadRequest"),
    (e[(e.BadResponse = 4004)] = "BadResponse"),
    (e[(e.Unauthorized = 4401)] = "Unauthorized"),
    (e[(e.Forbidden = 4403)] = "Forbidden"),
    (e[(e.SubprotocolNotAcceptable = 4406)] = "SubprotocolNotAcceptable"),
    (e[(e.ConnectionInitialisationTimeout = 4408)] = "ConnectionInitialisationTimeout"),
    (e[(e.ConnectionAcknowledgementTimeout = 4504)] = "ConnectionAcknowledgementTimeout"),
    (e[(e.SubscriberAlreadyExists = 4409)] = "SubscriberAlreadyExists"),
    (e[(e.TooManyInitialisationRequests = 4429)] = "TooManyInitialisationRequests");
})(Oi || (Oi = {}));
var ft;
(function (e) {
  (e.ConnectionInit = "connection_init"),
    (e.ConnectionAck = "connection_ack"),
    (e.Ping = "ping"),
    (e.Pong = "pong"),
    (e.Subscribe = "subscribe"),
    (e.Next = "next"),
    (e.Error = "error"),
    (e.Complete = "complete");
})(ft || (ft = {}));
function Dy(e) {
  if (!ko(e)) throw new Error(`Message is expected to be an object, but got ${un(e)}`);
  if (!e.type) throw new Error("Message is missing the 'type' property");
  if (typeof e.type != "string") throw new Error(`Message is expects the 'type' property to be a string, but got ${un(e.type)}`);
  switch (e.type) {
    case ft.ConnectionInit:
    case ft.ConnectionAck:
    case ft.Ping:
    case ft.Pong: {
      if (e.payload != null && !ko(e.payload))
        throw new Error(`"${e.type}" message expects the 'payload' property to be an object or nullish or missing, but got "${e.payload}"`);
      break;
    }
    case ft.Subscribe: {
      if (typeof e.id != "string") throw new Error(`"${e.type}" message expects the 'id' property to be a string, but got ${un(e.id)}`);
      if (!e.id) throw new Error(`"${e.type}" message requires a non-empty 'id' property`);
      if (!ko(e.payload)) throw new Error(`"${e.type}" message expects the 'payload' property to be an object, but got ${un(e.payload)}`);
      if (typeof e.payload.query != "string")
        throw new Error(`"${e.type}" message payload expects the 'query' property to be a string, but got ${un(e.payload.query)}`);
      if (e.payload.variables != null && !ko(e.payload.variables))
        throw new Error(
          `"${e.type}" message payload expects the 'variables' property to be a an object or nullish or missing, but got ${un(
            e.payload.variables
          )}`
        );
      if (e.payload.operationName != null && un(e.payload.operationName) !== "string")
        throw new Error(
          `"${e.type}" message payload expects the 'operationName' property to be a string or nullish or missing, but got ${un(
            e.payload.operationName
          )}`
        );
      if (e.payload.extensions != null && !ko(e.payload.extensions))
        throw new Error(
          `"${e.type}" message payload expects the 'extensions' property to be a an object or nullish or missing, but got ${un(
            e.payload.extensions
          )}`
        );
      break;
    }
    case ft.Next: {
      if (typeof e.id != "string") throw new Error(`"${e.type}" message expects the 'id' property to be a string, but got ${un(e.id)}`);
      if (!e.id) throw new Error(`"${e.type}" message requires a non-empty 'id' property`);
      if (!ko(e.payload)) throw new Error(`"${e.type}" message expects the 'payload' property to be an object, but got ${un(e.payload)}`);
      break;
    }
    case ft.Error: {
      if (typeof e.id != "string") throw new Error(`"${e.type}" message expects the 'id' property to be a string, but got ${un(e.id)}`);
      if (!e.id) throw new Error(`"${e.type}" message requires a non-empty 'id' property`);
      if (!F1(e.payload))
        throw new Error(
          `"${e.type}" message expects the 'payload' property to be an array of GraphQL errors, but got ${JSON.stringify(e.payload)}`
        );
      break;
    }
    case ft.Complete: {
      if (typeof e.id != "string") throw new Error(`"${e.type}" message expects the 'id' property to be a string, but got ${un(e.id)}`);
      if (!e.id) throw new Error(`"${e.type}" message requires a non-empty 'id' property`);
      break;
    }
    default:
      throw new Error(`Invalid message 'type' property "${e.type}"`);
  }
  return e;
}
function x1(e, t) {
  return Dy(typeof e == "string" ? JSON.parse(e, t) : e);
}
function Rs(e, t) {
  return Dy(e), JSON.stringify(e, t);
}
function T1(e) {
  const {
    url: t,
    connectionParams: i,
    lazy: n = !0,
    onNonLazyError: a = console.error,
    lazyCloseTimeout: r = 0,
    keepAlive: o = 0,
    disablePong: s,
    connectionAckWaitTimeout: l = 0,
    retryAttempts: d = 5,
    retryWait: u = async function (K) {
      let J = 1e3;
      for (let Q = 0; Q < K; Q++) J *= 2;
      await new Promise((Q) => setTimeout(Q, J + Math.floor(Math.random() * (3e3 - 300) + 300)));
    },
    shouldRetry: f = Tl,
    isFatalConnectionProblem: p,
    on: m,
    webSocketImpl: h,
    generateID: k = function () {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (K) => {
        const J = (Math.random() * 16) | 0;
        return (K == "x" ? J : (J & 3) | 8).toString(16);
      });
    },
    jsonMessageReplacer: x,
    jsonMessageReviver: T,
  } = e;
  let y;
  if (h) {
    if (!O1(h)) throw new Error("Invalid WebSocket implementation provided");
    y = h;
  } else
    typeof WebSocket < "u"
      ? (y = WebSocket)
      : typeof global < "u"
      ? (y = global.WebSocket || global.MozWebSocket)
      : typeof window < "u" && (y = window.WebSocket || window.MozWebSocket);
  if (!y)
    throw new Error(
      "WebSocket implementation missing; on Node you can `import WebSocket from 'ws';` and pass `webSocketImpl: WebSocket` to `createClient`"
    );
  const v = y,
    S = (() => {
      const E = (() => {
          const J = {};
          return {
            on(Q, oe) {
              return (
                (J[Q] = oe),
                () => {
                  delete J[Q];
                }
              );
            },
            emit(Q) {
              var oe;
              "id" in Q && ((oe = J[Q.id]) === null || oe === void 0 || oe.call(J, Q));
            },
          };
        })(),
        K = {
          connecting: m != null && m.connecting ? [m.connecting] : [],
          opened: m != null && m.opened ? [m.opened] : [],
          connected: m != null && m.connected ? [m.connected] : [],
          ping: m != null && m.ping ? [m.ping] : [],
          pong: m != null && m.pong ? [m.pong] : [],
          message: m != null && m.message ? [E.emit, m.message] : [E.emit],
          closed: m != null && m.closed ? [m.closed] : [],
          error: m != null && m.error ? [m.error] : [],
        };
      return {
        onMessage: E.on,
        on(J, Q) {
          const oe = K[J];
          return (
            oe.push(Q),
            () => {
              oe.splice(oe.indexOf(Q), 1);
            }
          );
        },
        emit(J, ...Q) {
          for (const oe of [...K[J]]) oe(...Q);
        },
      };
    })();
  function F(E) {
    const K = [
      S.on("error", (J) => {
        K.forEach((Q) => Q()), E(J);
      }),
      S.on("closed", (J) => {
        K.forEach((Q) => Q()), E(J);
      }),
    ];
  }
  let w,
    M = 0,
    C,
    $ = !1,
    L = 0,
    U = !1;
  async function P() {
    clearTimeout(C);
    const [E, K] = await (w ??
      (w = new Promise((oe, qe) =>
        (async () => {
          if ($) {
            if ((await u(L), !M)) return (w = void 0), qe({ code: 1e3, reason: "All Subscriptions Gone" });
            L++;
          }
          S.emit("connecting");
          const te = new v(typeof t == "function" ? await t() : t, w1);
          let Ot, Yt;
          function ai() {
            isFinite(o) &&
              o > 0 &&
              (clearTimeout(Yt),
              (Yt = setTimeout(() => {
                te.readyState === v.OPEN && (te.send(Rs({ type: ft.Ping })), S.emit("ping", !1, void 0));
              }, o)));
          }
          F((Ie) => {
            (w = void 0),
              clearTimeout(Ot),
              clearTimeout(Yt),
              qe(Ie),
              Tl(Ie) && Ie.code === 4499 && (te.close(4499, "Terminated"), (te.onerror = null), (te.onclose = null));
          }),
            (te.onerror = (Ie) => S.emit("error", Ie)),
            (te.onclose = (Ie) => S.emit("closed", Ie)),
            (te.onopen = async () => {
              try {
                S.emit("opened", te);
                const Ie = typeof i == "function" ? await i() : i;
                if (te.readyState !== v.OPEN) return;
                te.send(Rs(Ie ? { type: ft.ConnectionInit, payload: Ie } : { type: ft.ConnectionInit }, x)),
                  isFinite(l) &&
                    l > 0 &&
                    (Ot = setTimeout(() => {
                      te.close(Oi.ConnectionAcknowledgementTimeout, "Connection acknowledgement timeout");
                    }, l)),
                  ai();
              } catch (Ie) {
                S.emit("error", Ie),
                  te.close(Oi.InternalClientError, Kp(Ie instanceof Error ? Ie.message : new Error(Ie).message, "Internal client error"));
              }
            });
          let ri = !1;
          te.onmessage = ({ data: Ie }) => {
            try {
              const Se = x1(Ie, T);
              if ((S.emit("message", Se), Se.type === "ping" || Se.type === "pong")) {
                S.emit(Se.type, !0, Se.payload),
                  Se.type === "pong"
                    ? ai()
                    : s ||
                      (te.send(Rs(Se.payload ? { type: ft.Pong, payload: Se.payload } : { type: ft.Pong })),
                      S.emit("pong", !1, Se.payload));
                return;
              }
              if (ri) return;
              if (Se.type !== ft.ConnectionAck) throw new Error(`First message cannot be of type ${Se.type}`);
              clearTimeout(Ot), (ri = !0), S.emit("connected", te, Se.payload), ($ = !1), (L = 0), oe([te, new Promise((wt, $n) => F($n))]);
            } catch (Se) {
              (te.onmessage = null),
                S.emit("error", Se),
                te.close(Oi.BadResponse, Kp(Se instanceof Error ? Se.message : new Error(Se).message, "Bad response"));
            }
          };
        })()
      )));
    E.readyState === v.CLOSING && (await K);
    let J = () => {};
    const Q = new Promise((oe) => (J = oe));
    return [
      E,
      J,
      Promise.race([
        Q.then(() => {
          if (!M) {
            const oe = () => E.close(1e3, "Normal Closure");
            isFinite(r) && r > 0
              ? (C = setTimeout(() => {
                  E.readyState === v.OPEN && oe();
                }, r))
              : oe();
          }
        }),
        K,
      ]),
    ];
  }
  function z(E) {
    if (
      Tl(E) &&
      (M1(E.code) ||
        [
          Oi.InternalServerError,
          Oi.InternalClientError,
          Oi.BadRequest,
          Oi.BadResponse,
          Oi.Unauthorized,
          Oi.SubprotocolNotAcceptable,
          Oi.SubscriberAlreadyExists,
          Oi.TooManyInitialisationRequests,
        ].includes(E.code))
    )
      throw E;
    if (U) return !1;
    if (Tl(E) && E.code === 1e3) return M > 0;
    if (!d || L >= d || !f(E) || (p != null && p(E))) throw E;
    return ($ = !0);
  }
  return (
    n ||
      (async () => {
        for (M++; ; )
          try {
            const [, , E] = await P();
            await E;
          } catch (E) {
            try {
              if (!z(E)) return;
            } catch (K) {
              return a == null ? void 0 : a(K);
            }
          }
      })(),
    {
      on: S.on,
      subscribe(E, K) {
        const J = k(E);
        let Q = !1,
          oe = !1,
          qe = () => {
            M--, (Q = !0);
          };
        return (
          (async () => {
            for (M++; ; )
              try {
                const [te, Ot, Yt] = await P();
                if (Q) return Ot();
                const ai = S.onMessage(J, (ri) => {
                  switch (ri.type) {
                    case ft.Next: {
                      K.next(ri.payload);
                      return;
                    }
                    case ft.Error: {
                      (oe = !0), (Q = !0), K.error(ri.payload), qe();
                      return;
                    }
                    case ft.Complete: {
                      (Q = !0), qe();
                      return;
                    }
                  }
                });
                te.send(Rs({ id: J, type: ft.Subscribe, payload: E }, x)),
                  (qe = () => {
                    !Q && te.readyState === v.OPEN && te.send(Rs({ id: J, type: ft.Complete }, x)), M--, (Q = !0), Ot();
                  }),
                  await Yt.finally(ai);
                return;
              } catch (te) {
                if (!z(te)) return;
              }
          })()
            .then(() => {
              oe || K.complete();
            })
            .catch((te) => {
              K.error(te);
            }),
          () => {
            Q || qe();
          }
        );
      },
      async dispose() {
        if (((U = !0), w)) {
          const [E] = await w;
          E.close(1e3, "Normal Closure");
        }
      },
      terminate() {
        w && S.emit("closed", { code: 4499, reason: "Terminated", wasClean: !1 });
      },
    }
  );
}
function Tl(e) {
  return ko(e) && "code" in e && "reason" in e;
}
function M1(e) {
  return [1e3, 1001, 1006, 1005, 1012, 1013, 1013].includes(e) ? !1 : e >= 1e3 && e <= 1999;
}
function O1(e) {
  return typeof e == "function" && "constructor" in e && "CLOSED" in e && "CLOSING" in e && "CONNECTING" in e && "OPEN" in e;
}
var is = null;
typeof WebSocket < "u"
  ? (is = WebSocket)
  : typeof MozWebSocket < "u"
  ? (is = MozWebSocket)
  : typeof global < "u"
  ? (is = global.WebSocket || global.MozWebSocket)
  : typeof window < "u"
  ? (is = window.WebSocket || window.MozWebSocket)
  : typeof self < "u" && (is = self.WebSocket || self.MozWebSocket);
const R1 = is;
class Uy extends Error {}
class B1 {
  constructor(t, i) {
    Object.defineProperty(this, "client", { enumerable: !0, configurable: !0, writable: !0, value: t }),
      Object.defineProperty(this, "subscriptionClient", { enumerable: !0, configurable: !0, writable: !0, value: i }),
      Object.defineProperty(this, "open", { enumerable: !0, configurable: !0, writable: !0, value: !1 });
  }
  close() {
    this.open && this.rollback().catch(() => null), this.subscriptionClient.dispose();
  }
  async rollback() {
    throw (
      (qn(await this.client.mutation("mutation RollbackTransaction { internal { rollbackTransaction }}", {}).toPromise(), [
        "internal",
        "rollbackTransaction",
      ]),
      (this.open = !1),
      new Uy("Transaction rolled back."))
    );
  }
  async start() {
    qn(await this.client.mutation("mutation StartTransaction { internal { startTransaction }}", {}).toPromise(), [
      "internal",
      "startTransaction",
    ]),
      (this.open = !0);
  }
  async commit() {
    qn(await this.client.mutation("mutation CommitTransaction { internal { commitTransaction }}", {}).toPromise(), [
      "internal",
      "commitTransaction",
    ]),
      (this.open = !1);
  }
}
class C1 {
  constructor() {
    Object.defineProperty(this, "values", { enumerable: !0, configurable: !0, writable: !0, value: {} });
  }
  getItem(t) {
    return this.values[t] || null;
  }
  setItem(t, i) {
    this.values[t] = i;
  }
}
const P1 = (e) => {
    const t = [...e.definitions].reverse().find((i) => i.kind == "OperationDefinition");
    if (t) return t.name ? t.name.value : t.selectionSet.selections.find((n) => n.kind == "Field").name.value;
  },
  ef = Iy({
    onOperation: (e) => {
      var t, i;
      ((t = (i = e.context).operationName) !== null && t !== void 0) || (i.operationName = P1(e.query) || "unknown");
    },
  }),
  qy = (e, t) => {
    const [i, n] = e.split("?"),
      a = new URLSearchParams(n);
    for (const [r, o] of Object.entries(t)) a.set(r, o);
    return `${i}?${a.toString()}`;
  },
  E1 = Iy({
    onOperation: (e) => {
      if (e.context.url && e.context.operationName)
        try {
          e.context.url = qy(e.context.url, { operation: e.context.operationName });
        } catch {}
    },
  });
var Tu;
(function (e) {
  e[(e.TooManyRequests = 4294)] = "TooManyRequests";
})(Tu || (Tu = {}));
const D1 = 2,
  U1 = 4800,
  q1 = 1e4,
  V1 = [Oi.ConnectionAcknowledgementTimeout, Oi.ConnectionInitialisationTimeout],
  tf = Symbol.for("gadget/connection"),
  _1 = "token",
  $1 = typeof btoa < "u" ? btoa : (e) => Buffer.from(e).toString("base64");
var ue;
(function (e) {
  (e.BrowserSession = "browser-session"),
    (e.APIKey = "api-key"),
    (e.Internal = "internal"),
    (e.InternalAuthToken = "internal-auth-token"),
    (e.Anonymous = "anonymous"),
    (e.Custom = "custom");
})(ue || (ue = {}));
const Ml = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : void 0;
class ca {
  constructor(t) {
    var i, n, a, r, o, s;
    if (
      (Object.defineProperty(this, "options", { enumerable: !0, configurable: !0, writable: !0, value: t }),
      Object.defineProperty(this, "endpoint", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "subscriptionClientOptions", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "websocketsEndpoint", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "websocketImplementation", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "_fetchImplementation", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "environment", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "exchanges", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "baseClient", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "baseSubscriptionClient", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "currentTransaction", { enumerable: !0, configurable: !0, writable: !0, value: null }),
      Object.defineProperty(this, "authenticationMode", { enumerable: !0, configurable: !0, writable: !0, value: ue.Anonymous }),
      Object.defineProperty(this, "sessionTokenStore", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "requestPolicy", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "createSubscriptionClient", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "transaction", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: async (l, d) => {
          let u, f;
          if ((d ? ((u = d), (f = l)) : ((u = l), (f = {})), this.currentTransaction)) return await u(this.currentTransaction);
          let p = null,
            m;
          try {
            p = await this.waitForOpenedConnection({
              isFatalConnectionProblem(x) {
                return console.warn("Transport error encountered during transaction processing", x), !0;
              },
              connectionAckWaitTimeout: U1,
              ...f,
              lazy: !1,
              lazyCloseTimeout: 1e5,
              retryAttempts: 0,
            });
            const h = new Wp({
              url: "/-",
              requestPolicy: "network-only",
              exchanges: [
                ...this.exchanges.beforeAll,
                ef,
                ...this.exchanges.beforeAsync,
                $d({
                  forwardSubscription(x) {
                    const T = { ...x, query: x.query || "" };
                    return { subscribe: (y) => ({ unsubscribe: p.subscribe(T, y) }) };
                  },
                  enableAllOperations: !0,
                }),
                ...this.exchanges.afterAll,
              ],
            });
            (h[tf] = this), (m = new B1(h, p)), (this.currentTransaction = m), await m.start();
            const k = await u(m);
            return await m.commit(), k;
          } catch (h) {
            try {
              m != null && m.open && (await m.rollback());
            } catch (k) {
              k instanceof Uy ||
                console.warn("Encountered another error while rolling back a Gadget transaction that errored. The other error:", k);
            }
            throw Fu(h) ? new Lp(h) : h;
          } finally {
            await (p == null ? void 0 : p.dispose()), (this.currentTransaction = null);
          }
        },
      }),
      Object.defineProperty(this, "fetch", {
        enumerable: !0,
        configurable: !0,
        writable: !0,
        value: async (l, d = {}) => {
          var u;
          if (
            ((l = G1(l, (u = this.options.baseRouteURL) !== null && u !== void 0 ? u : this.options.endpoint)), this.isGadgetRequest(l))
          ) {
            const p = await this.requestHeaders();
            (d.headers = { ...p, ...d.headers }),
              this.authenticationMode == ue.Custom && (await this.options.authenticationMode.custom.processFetch(l, d));
          }
          const f = await this._fetchImplementation(l, d);
          if (this.authenticationMode == ue.BrowserSession) {
            const p = f.headers.get("x-set-authorization"),
              m = p != null && p.startsWith("Session ") ? p.replace("Session ", "") : null;
            m && this.sessionTokenStore.setItem(this.sessionStorageKey, m);
          }
          return f;
        },
      }),
      !t.endpoint)
    )
      throw new Error("Must provide an `endpoint` option for a GadgetConnection to connect to");
    (this.endpoint = t.endpoint),
      t.fetchImplementation
        ? (this._fetchImplementation = t.fetchImplementation)
        : typeof Ml < "u" && Ml.fetch
        ? (this._fetchImplementation = Ml.fetch.bind(Ml))
        : (this._fetchImplementation = async (...l) => {
            let d = await np(
              () => import("./browser-ponyfill-c432ded9.js").then((u) => u.b),
              ["./browser-ponyfill-c432ded9.js", "./index-c6dae603.js"],
              import.meta.url
            );
            return d.default && (d = d.default), await d(...l);
          }),
      (this.websocketImplementation =
        (n = (i = t.websocketImplementation) !== null && i !== void 0 ? i : globalThis == null ? void 0 : globalThis.WebSocket) !== null &&
        n !== void 0
          ? n
          : R1),
      (this.websocketsEndpoint = (a = t.websocketsEndpoint) !== null && a !== void 0 ? a : t.endpoint + "/batch"),
      (this.websocketsEndpoint = this.websocketsEndpoint.replace(/^http/, "ws")),
      (this.environment = (r = t.environment) !== null && r !== void 0 ? r : "Development"),
      (this.requestPolicy = (o = t.requestPolicy) !== null && o !== void 0 ? o : "cache-and-network"),
      (this.exchanges = { beforeAll: [], beforeAsync: [], afterAll: [], ...t.exchanges }),
      (this.createSubscriptionClient = (s = t.createSubscriptionClient) !== null && s !== void 0 ? s : T1),
      this.setAuthenticationMode(t.authenticationMode),
      (this.baseClient = this.newBaseClient());
  }
  get sessionStorageKey() {
    return `${_1}-${this.endpoint}`;
  }
  get currentClient() {
    var t;
    return ((t = this.currentTransaction) === null || t === void 0 ? void 0 : t.client) || this.baseClient;
  }
  set fetchImplementation(t) {
    (this._fetchImplementation = t), this.resetClients();
  }
  setAuthenticationMode(t) {
    var i;
    t &&
      (t.browserSession
        ? this.enableSessionMode(t.browserSession)
        : t.internal
        ? (this.authenticationMode = ue.Internal)
        : t.internalAuthToken
        ? (this.authenticationMode = ue.InternalAuthToken)
        : t.apiKey
        ? (this.authenticationMode = ue.APIKey)
        : t.custom && (this.authenticationMode = ue.Custom),
      (this.options.authenticationMode = t)),
      ((i = this.authenticationMode) !== null && i !== void 0) || (this.authenticationMode = ue.Anonymous);
  }
  enableSessionMode(t) {
    this.authenticationMode = ue.BrowserSession;
    const i = !t || typeof t == "boolean" ? Hs.Durable : t.storageType;
    let n;
    i == Hs.Durable && Zp("localStorage")
      ? (n = window.localStorage)
      : i == Hs.Session && Zp("sessionStorage")
      ? (n = window.sessionStorage)
      : (n = new C1()),
      t !== null && typeof t == "object" && "initialToken" in t && t.initialToken && n.setItem(this.sessionStorageKey, t.initialToken),
      (this.sessionTokenStore = n),
      this.resetClients();
  }
  close() {
    this.baseSubscriptionClient && this.disposeClient(this.baseSubscriptionClient),
      this.currentTransaction && this.currentTransaction.close();
  }
  isGadgetRequest(t) {
    let i;
    if ((typeof t == "string" ? (i = t) : typeof t == "object" && "url" in t ? (i = t.url) : (i = String(t)), Mu(this.options.endpoint)))
      return !!Mu(i);
    const n = new URL(this.options.endpoint).host;
    return i.includes(n);
  }
  resetClients() {
    if (this.currentTransaction) throw new Error("Can't reset clients while a transaction is open");
    this.baseSubscriptionClient && this.disposeClient(this.baseSubscriptionClient),
      this.baseClient && (this.baseClient = this.newBaseClient());
  }
  newBaseClient() {
    const t = [...this.exchanges.beforeAll, ef, E1];
    typeof window < "u" && t.push(n1),
      t.push(
        ...this.exchanges.beforeAsync,
        $d({
          forwardSubscription: (a) => ({
            subscribe: (r) => {
              const o = { ...a, query: a.query || "" };
              return { unsubscribe: this.getBaseSubscriptionClient().subscribe(o, r) };
            },
          }),
        }),
        $d({
          isSubscriptionOperation: (a) => a.query.definitions.some((r) => nf(r)),
          forwardSubscription: (a) => ({
            subscribe: (r) => {
              let o;
              const s = np(() => import("./index-89e040af.js"), [], import.meta.url)
                .then(({ applyAsyncIterableIteratorToSink: l, applyLiveQueryJSONDiffPatch: d, makeAsyncIterableIteratorFromSink: u }) => {
                  const f = { ...a, query: a.query || "" };
                  return (o = l(d(u((p) => this.getBaseSubscriptionClient().subscribe(f, p))), r)), o;
                })
                .catch((l) => r.error(l));
              return {
                unsubscribe: () => {
                  o
                    ? o()
                    : s.then((l) => {
                        l && l();
                      });
                },
              };
            },
          }),
        }),
        a1,
        ...this.exchanges.afterAll
      );
    const i = new Wp({ url: this.endpoint, fetch: this.fetch, exchanges: t, requestPolicy: this.requestPolicy });
    i[tf] = this;
    const n = i.reexecuteOperation.bind(i);
    return (
      (i.reexecuteOperation = (a) => {
        a.query.definitions.some(nf) || n(a);
      }),
      i
    );
  }
  newSubscriptionClient(t) {
    if (!this.websocketImplementation)
      throw new Error(
        "Can't use this GadgetClient for this subscription-based operation as there's no global WebSocket implementation available. Please pass one as the `websocketImplementation` option to the GadgetClient constructor."
      );
    let i = this.websocketsEndpoint;
    return (
      t != null && t.urlParams && (i = qy(i, t.urlParams)),
      this.createSubscriptionClient({
        url: i,
        webSocketImpl: this.websocketImplementation,
        connectionParams: async () => {
          var n, a, r, o;
          const s = { environment: this.environment, auth: { type: this.authenticationMode } };
          if (this.authenticationMode == ue.APIKey) s.auth.key = this.options.authenticationMode.apiKey;
          else if (this.authenticationMode == ue.Internal || this.authenticationMode == ue.InternalAuthToken) {
            const l =
              this.authenticationMode == ue.Internal
                ? this.options.authenticationMode.internal.authToken
                : this.options.authenticationMode.internalAuthToken;
            (s.auth.token = l),
              this.authenticationMode == ue.Internal &&
                this.options.authenticationMode.internal.actAsSession &&
                ((s.auth.actAsInternalSession = !0),
                (s.auth.internalSessionId = await ((a = (n = this.options.authenticationMode.internal).getSessionId) === null ||
                a === void 0
                  ? void 0
                  : a.call(n))));
          } else
            this.authenticationMode == ue.BrowserSession
              ? (s.auth.sessionToken = this.sessionTokenStore.getItem(this.sessionStorageKey))
              : this.authenticationMode == ue.Custom &&
                (await ((o = (r = this.options.authenticationMode) === null || r === void 0 ? void 0 : r.custom) === null || o === void 0
                  ? void 0
                  : o.processTransactionConnectionParams(s)));
          return s;
        },
        onNonLazyError: () => {},
        on: {
          connected: (n, a) => {
            var r, o, s, l, d, u;
            if (this.authenticationMode == ue.BrowserSession && a != null && a.sessionToken) {
              const f = (r = this.options.authenticationMode) === null || r === void 0 ? void 0 : r.browserSession;
              (f !== null && typeof f == "object" ? f.initialToken : null) ||
                this.sessionTokenStore.setItem(this.sessionStorageKey, a.sessionToken);
            }
            (l =
              (s = (o = this.subscriptionClientOptions) === null || o === void 0 ? void 0 : o.on) === null || s === void 0
                ? void 0
                : s.connected) === null ||
              l === void 0 ||
              l.call(s, n, a),
              (u = (d = t == null ? void 0 : t.on) === null || d === void 0 ? void 0 : d.connected) === null ||
                u === void 0 ||
                u.call(d, n, a);
          },
        },
        ...this.subscriptionClientOptions,
        ...t,
      })
    );
  }
  async requestHeaders() {
    var t, i, n;
    const a = {};
    if (this.authenticationMode == ue.Internal || this.authenticationMode == ue.InternalAuthToken) {
      const r =
        this.authenticationMode == ue.Internal
          ? this.options.authenticationMode.internal.authToken
          : this.options.authenticationMode.internalAuthToken;
      if (
        ((a.authorization = "Basic " + $1("gadget-internal:" + r)),
        this.authenticationMode == ue.Internal && this.options.authenticationMode.internal.actAsSession)
      ) {
        a["x-gadget-act-as-internal-session"] = "true";
        const o = await ((i = (t = this.options.authenticationMode.internal).getSessionId) === null || i === void 0 ? void 0 : i.call(t));
        o && (a["x-gadget-internal-session-id"] = o);
      }
    } else if (this.authenticationMode == ue.APIKey)
      a.authorization = `Bearer ${(n = this.options.authenticationMode) === null || n === void 0 ? void 0 : n.apiKey}`;
    else if (this.authenticationMode == ue.BrowserSession) {
      const r = this.sessionTokenStore.getItem(this.sessionStorageKey);
      r && (a.authorization = `Session ${r}`);
    }
    return (a["x-gadget-environment"] = this.environment), a;
  }
  async waitForOpenedConnection(t) {
    let i = this.newSubscriptionClient(t),
      n = [],
      a = t.connectionAttempts || D1;
    const r = t.connectionGlobalTimeoutMs || q1,
      o = () => {
        n.forEach((s) => s()), (n = []);
      };
    return await new Promise((s, l) => {
      const d = setTimeout(() => {
          this.disposeClient(i), f(new c1("Timeout opening websocket connection to Gadget API"));
        }, r),
        u = (h) => {
          if (Fu(h)) {
            if (h.code == Tu.TooManyRequests) return o(), f(new p1(h.reason));
            if (V1.includes(h.code) && a > 0) {
              (a -= 1), this.disposeClient(i), (i = this.newSubscriptionClient(t)), m();
              return;
            }
          }
          clearTimeout(d), l(new Lp(h));
        },
        f = (h) => {
          clearTimeout(d), l(h);
        },
        p = () => {
          clearTimeout(d), s(i);
        },
        m = () => {
          o(), n.push(i.on("connected", p)), n.push(i.on("closed", u)), n.push(i.on("error", f));
        };
      m();
    }).finally(o);
  }
  disposeClient(t) {
    const i = t.dispose();
    i && i.catch((n) => console.error(`Error closing SubscriptionClient: ${n.message}`));
  }
  getBaseSubscriptionClient() {
    return (
      this.baseSubscriptionClient || (this.baseSubscriptionClient = this.newSubscriptionClient({ lazy: !0 })), this.baseSubscriptionClient
    );
  }
}
Object.defineProperty(ca, "version", { enumerable: !0, configurable: !0, writable: !0, value: "0.15.38" });
function G1(e, t) {
  if (typeof e != "string") return e;
  if (Mu(e))
    try {
      return String(new URL(e, t));
    } catch {
      return e;
    }
  return e;
}
function Mu(e) {
  return e.startsWith("/") && !e.startsWith("//");
}
const j1 = (e) => {
    var t;
    return e.kind !== "OperationDefinition" || e.operation !== "query"
      ? null
      : (t = e.directives) === null || t === void 0
      ? void 0
      : t.find((i) => i.name.value === "live");
  },
  nf = (e) => !!j1(e),
  z1 = (e, t, i, n) => {
    const a = ua(e);
    return ni({
      type: "query",
      name: `InternalFind${a}`,
      fields: {
        internal: hn(i, { [e]: Jt({ id: fe({ value: t, type: "GadgetID!" }), select: fe({ value: Fc(n), type: "[String!]" }) }) }),
        ...nr(e, i),
      },
    });
  },
  Vy = (e, t, i) => ({
    search: i != null && i.search ? fe({ value: i == null ? void 0 : i.search, type: "String" }) : void 0,
    sort: i != null && i.sort ? fe({ value: i == null ? void 0 : i.sort, type: `[${Oy(e, t)}!]` }) : void 0,
    filter: i != null && i.filter ? fe({ value: i == null ? void 0 : i.filter, type: `[${gc(e, t)}!]` }) : void 0,
    select: i != null && i.select ? fe({ value: Fc(i == null ? void 0 : i.select), type: "[String!]" }) : void 0,
  }),
  W1 = (e, t, i) => {
    const n = ua(e),
      a = Vy(n, t, i);
    return ni({
      type: "query",
      name: `InternalFindFirst${n}`,
      fields: {
        internal: hn(t, { [`list${n}`]: Jt({ ...a, first: fe({ value: 1, type: "Int" }) }, { edges: { node: !0 } }) }),
        ...nr(e, t),
      },
    });
  },
  L1 = (e, t, i) => {
    const n = ua(e),
      a = Vy(n, t, i);
    return ni({
      type: "query",
      name: `InternalFindMany${n}`,
      fields: {
        internal: hn(t, {
          [`list${n}`]: Jt(
            {
              ...a,
              after: i != null && i.after ? fe({ value: i.after, type: "String" }) : void 0,
              before: i != null && i.before ? fe({ value: i == null ? void 0 : i.before, type: "String" }) : void 0,
              first: i != null && i.first ? fe({ value: i == null ? void 0 : i.first, type: "Int" }) : void 0,
              last: i != null && i.last ? fe({ value: i == null ? void 0 : i.last, type: "Int" }) : void 0,
            },
            { pageInfo: { hasNextPage: !0, hasPreviousPage: !0, startCursor: !0, endCursor: !0 }, edges: { cursor: !0, node: !0 } }
          ),
        }),
        ...nr(e, t),
      },
    });
  },
  vd = (e, t) => `Internal${yc(e, t)}Input`,
  H1 = (e, t, i) => {
    const n = ua(e);
    return ni({
      type: "mutation",
      name: `InternalCreate${n}`,
      fields: {
        internal: hn(t, { [`create${n}`]: Jt({ [e]: fe({ value: i, type: vd(e, t) }) }, { success: !0, ...ao, [e]: !0 }) }),
        ...nr(e, t),
      },
    });
  },
  Q1 = (e, t, i, n) => {
    const a = ua(t);
    return ni({
      type: "mutation",
      name: `InternalBulkCreate${a}`,
      fields: {
        internal: hn(i, { [`bulkCreate${a}`]: Jt({ [t]: fe({ value: n, type: `[${vd(e, i)}]!` }) }, { success: !0, ...ao, [t]: !0 }) }),
        ...nr(e, i),
      },
    });
  },
  Z1 = (e, t, i, n) => {
    const a = ua(e);
    return ni({
      type: "mutation",
      name: `InternalUpdate${a}`,
      fields: {
        internal: hn(t, {
          [`update${a}`]: Jt(
            { id: fe({ value: i, type: "GadgetID!" }), [e]: fe({ value: n, type: vd(e, t) }) },
            { success: !0, ...ao, [e]: !0 }
          ),
        }),
        ...nr(e, t),
      },
    });
  },
  J1 = (e, t, i, n) => {
    const a = ua(e);
    return ni({
      type: "mutation",
      name: `InternalUpsert${a}`,
      fields: {
        internal: hn(t, {
          [`upsert${a}`]: Jt(
            { on: fe({ value: i, type: "[String!]" }), [e]: fe({ value: n, type: vd(e, t) }) },
            { success: !0, ...ao, [e]: !0 }
          ),
        }),
        ...nr(e, t),
      },
    });
  },
  Y1 = (e, t, i) => {
    const n = ua(e);
    return ni({
      type: "mutation",
      name: `InternalDelete${n}`,
      fields: { internal: hn(t, { [`delete${n}`]: Jt({ id: fe({ value: i, type: "GadgetID!" }) }, { success: !0, ...ao }) }) },
    });
  },
  X1 = (e, t, i) => {
    const n = ua(e);
    return ni({
      type: "mutation",
      name: `InternalDeleteMany${n}`,
      fields: {
        internal: hn(t, {
          [`deleteMany${n}`]: Jt(
            {
              search: i != null && i.search ? fe({ value: i == null ? void 0 : i.search, type: "String" }) : void 0,
              filter: i != null && i.filter ? fe({ value: i == null ? void 0 : i.filter, type: `[${gc(e, t)}!]` }) : void 0,
            },
            { success: !0, ...ao }
          ),
        }),
      },
    });
  };
class B {
  constructor(t, i, n) {
    Object.defineProperty(this, "apiIdentifier", { enumerable: !0, configurable: !0, writable: !0, value: t }),
      Object.defineProperty(this, "connection", { enumerable: !0, configurable: !0, writable: !0, value: i }),
      Object.defineProperty(this, "options", { enumerable: !0, configurable: !0, writable: !0, value: n }),
      Object.defineProperty(this, "capitalizedApiIdentifier", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      Object.defineProperty(this, "namespace", { enumerable: !0, configurable: !0, writable: !0, value: void 0 }),
      (this.capitalizedApiIdentifier = fl(t)),
      (this.namespace = (n == null ? void 0 : n.namespace) || []);
  }
  validateRecord(t) {
    return !this.options || !this.options.hasAmbiguousIdentifiers ? !0 : Object.keys(t).every((n) => n === this.apiIdentifier);
  }
  getRecordFromData(t, i) {
    let n = t;
    if (!this.validateRecord(t))
      throw new gd(
        `Invalid arguments found in variables. Did you mean to use ${i}({ ${this.apiIdentifier}: { ... } })?`,
        "GGT_INVALID_RECORD_DATA"
      );
    return this.apiIdentifier in t && (n = n[this.apiIdentifier]), n;
  }
  async findOne(t, i, n = !0) {
    const a = z1(this.apiIdentifier, t, this.namespace, Fc(i == null ? void 0 : i.select)),
      r = await this.connection.currentClient.query(a.query, a.variables).toPromise(),
      s = (n ? qn : Ls)(r, this.dataPath(this.apiIdentifier));
    return Fo(r, s);
  }
  async maybeFindOne(t, i) {
    const n = await this.findOne(t, i, !1);
    return n.isEmpty() ? null : n;
  }
  async findMany(t) {
    const i = L1(this.apiIdentifier, this.namespace, t),
      n = await this.connection.currentClient.query(i.query, i.variables).toPromise(),
      a = Ls(n, this.dataPath(`list${this.capitalizedApiIdentifier}`)),
      r = rl(n, a);
    return ys.boot(this, r, { options: t, pageInfo: a.pageInfo });
  }
  async findFirst(t, i = !0) {
    const n = W1(this.apiIdentifier, this.namespace, t),
      a = await this.connection.currentClient.query(n.query, n.variables).toPromise(),
      r = this.dataPath(`list${this.capitalizedApiIdentifier}`);
    let o;
    i === !1 ? (o = Ls(a, r)) : (o = qn(a, r, i));
    const s = rl(a, o);
    return ys.boot(this, s, { options: t, pageInfo: o.pageInfo })[0];
  }
  async maybeFindFirst(t) {
    return await this.findFirst(t, !1);
  }
  async create(t) {
    const i = H1(this.apiIdentifier, this.namespace, this.getRecordFromData(t, "create")),
      n = await this.connection.currentClient.mutation(i.query, i.variables).toPromise(),
      a = br(n, this.dataPath(`create${this.capitalizedApiIdentifier}`));
    return Fo(n, a[this.apiIdentifier]);
  }
  async bulkCreate(t) {
    var i;
    if (!(!((i = this.options) === null || i === void 0) && i.pluralApiIdentifier))
      throw new Au("Cannot perform bulkCreate without a pluralApiIdentifier");
    const n = ua(this.options.pluralApiIdentifier),
      a = Q1(this.apiIdentifier, this.options.pluralApiIdentifier, this.namespace, t),
      r = await this.connection.currentClient.mutation(a.query, a.variables).toPromise(),
      o = br(r, this.dataPath(`bulkCreate${n}`));
    return bc(r, o[this.options.pluralApiIdentifier]);
  }
  async update(t, i) {
    mt(t, "Can't update a record without an ID passed");
    const n = Z1(this.apiIdentifier, this.namespace, t, this.getRecordFromData(i, "update")),
      a = await this.connection.currentClient.mutation(n.query, n.variables).toPromise(),
      r = br(a, this.dataPath(`update${this.capitalizedApiIdentifier}`));
    return Fo(a, r[this.apiIdentifier]);
  }
  async upsert(t) {
    const { on: i, ...n } = t;
    i && mt(i.length > 0, "Must specify at least one field to upsert on");
    const a = J1(this.apiIdentifier, this.namespace, i, this.getRecordFromData(n, "upsert")),
      r = await this.connection.currentClient.mutation(a.query, a.variables).toPromise(),
      o = br(r, this.dataPath(`upsert${this.capitalizedApiIdentifier}`));
    return Fo(r, o[this.apiIdentifier]);
  }
  async delete(t) {
    mt(t, "Can't delete a record without an ID");
    const i = Y1(this.apiIdentifier, this.namespace, t),
      n = await this.connection.currentClient.mutation(i.query, i.variables).toPromise();
    br(n, this.dataPath(`delete${this.capitalizedApiIdentifier}`));
  }
  async deleteMany(t) {
    const i = X1(this.apiIdentifier, this.namespace, t),
      n = await this.connection.currentClient.mutation(i.query, i.variables).toPromise();
    br(n, this.dataPath(`deleteMany${this.capitalizedApiIdentifier}`));
  }
  dataPath(t) {
    return ["internal", ...kr([t], this.namespace)];
  }
}
function Fc(e) {
  if (!e) return;
  if (Array.isArray(e)) return e;
  const t = [];
  for (const [i, n] of Object.entries(e)) n && t.push(i);
  return t;
}
var _y = {},
  Id = b.createContext(_y),
  K1 = Id.Provider;
Id.Consumer;
Id.displayName = "UrqlContext";
var $y = () => {
    var e = b.useContext(Id);
    if (e === _y && !1) var t;
    return e;
  },
  Ou = { fetching: !1, stale: !1, error: void 0, data: void 0, extensions: void 0, operation: void 0 },
  eI = (e, t) => e === t || !(!e || !t || e.key !== t.key),
  zd = (e, t) => {
    var i = { ...e, ...t, data: t.data !== void 0 || t.error ? t.data : e.data, fetching: !!t.fetching, stale: !!t.stale };
    return ((n, a) => {
      for (var r in n) if (!(r in a)) return !0;
      for (var o in a) if (o === "operation" ? !eI(n[o], a[o]) : n[o] !== a[o]) return !0;
      return !1;
    })(e, i)
      ? i
      : e;
  },
  tI = (e, t) => {
    for (var i = 0, n = t.length; i < n; i++) if (e[i] !== t[i]) return !0;
    return !1;
  };
function Yl(e, t) {
  e(t);
}
function iI(e) {
  var t = b.useRef(!0),
    i = $y(),
    [n, a] = b.useState(Ou),
    r = b.useCallback(
      (o, s) => (
        Yl(a, { ...Ou, fetching: !0 }),
        md(
          cl(1)(
            At((l) => !l.hasNext)(
              tl((l) => {
                t.current &&
                  Yl(a, { fetching: !1, stale: l.stale, data: l.data, error: l.error, extensions: l.extensions, operation: l.operation });
              })(i.executeMutation(Ws(e, o), s || {}))
            )
          )
        )
      ),
      [i, e, a]
    );
  return (
    b.useEffect(
      () => (
        (t.current = !0),
        () => {
          t.current = !1;
        }
      ),
      []
    ),
    [n, r]
  );
}
function nI(e, t) {
  var i = b.useRef(void 0);
  return b.useMemo(() => {
    var n = Ws(e, t);
    return i.current !== void 0 && i.current.key === n.key ? i.current : ((i.current = n), n);
  }, [e, t]);
}
var aI = (e) => {
    if (!e._react) {
      var t = new Set(),
        i = new Map();
      e.operations$ &&
        cs((n) => {
          n.kind === "teardown" && t.has(n.key) && (t.delete(n.key), i.delete(n.key));
        })(e.operations$),
        (e._react = {
          get: (n) => i.get(n),
          set(n, a) {
            t.delete(n), i.set(n, a);
          },
          dispose(n) {
            t.add(n);
          },
        });
    }
    return e._react;
  },
  rI = (e, t) => e.suspense && (!t || t.suspense !== !1);
function oI(e) {
  var t = $y(),
    i = aI(t),
    n = rI(t, e.context),
    a = nI(e.query, e.variables),
    r = b.useMemo(() => {
      if (e.pause) return null;
      var p = t.executeQuery(a, { requestPolicy: e.requestPolicy, ...e.context });
      return n
        ? tl((m) => {
            i.set(a.key, m);
          })(p)
        : p;
    }, [i, t, a, n, e.pause, e.requestPolicy, e.context]),
    o = b.useCallback(
      (p, m) => {
        if (!p) return { fetching: !1 };
        var h = i.get(a.key);
        if (h) {
          if (m && h != null && "then" in h) throw h;
        } else {
          var k,
            x = cs((y) => {
              (h = y), k && k(h);
            })(dy(() => (m && !k) || !h)(p));
          if (h == null && m) {
            var T = new Promise((y) => {
              k = y;
            });
            throw (i.set(a.key, T), T);
          } else x.unsubscribe();
        }
        return h || { fetching: !0 };
      },
      [i, a]
    ),
    s = [t, a, e.requestPolicy, e.context, e.pause],
    [l, d] = b.useState(() => [r, zd(Ou, o(r, n)), s]),
    u = l[1];
  r !== l[0] && tI(l[2], s) && d([r, (u = zd(l[1], o(r, n))), s]),
    b.useEffect(() => {
      var p = l[0],
        m = l[2][1],
        h = !1,
        k = (T) => {
          (h = !0),
            Yl(d, (y) => {
              var v = zd(y[1], T);
              return y[1] !== v ? [y[0], v, y[2]] : y;
            });
        };
      if (p) {
        var x = cs(k)(
          lc(() => {
            k({ fetching: !1 });
          })(p)
        );
        return (
          h || k({ fetching: !0 }),
          () => {
            i.dispose(m.key), x.unsubscribe();
          }
        );
      } else k({ fetching: !1 });
    }, [i, l[0], l[2][1]]);
  var f = b.useCallback(
    (p) => {
      var m = { requestPolicy: e.requestPolicy, ...e.context, ...p };
      Yl(d, (h) => [
        n
          ? tl((k) => {
              i.set(a.key, k);
            })(t.executeQuery(a, m))
          : t.executeQuery(a, m),
        h[1],
        s,
      ]);
    },
    [t, i, a, n, o, e.requestPolicy, e.context]
  );
  return [u, f];
}
const Sd = c.createContext(void 0),
  Gy = c.createContext(void 0),
  sI = "/",
  lI = "signOut",
  dI = "/";
function uI(e) {
  let t, i;
  if ("api" in e) {
    if (!gv(e.api))
      throw new Error(
        "Invalid Gadget API client passed to <Provider /> component -- please pass an instance of your generated client, like <Provider api={api} />!"
      );
    (t = e.api), (i = e.api.connection.currentClient);
  } else if (e.value) i = e.value;
  else
    throw new Error(
      "No Gadget API client passed to <Provider /> component -- please pass an instance of your generated client, like <Provider api={api} />!"
    );
  i.suspense = !0;
  let n = sI,
    a = lI,
    r = dI;
  if ("auth" in e) {
    const { auth: o } = e;
    o != null && o.signInPath && (n = o.signInPath),
      o != null && o.signOutActionApiIdentifier && (a = o.signOutActionApiIdentifier),
      o != null && o.redirectOnSuccessfulSignInPath && (r = o.redirectOnSuccessfulSignInPath);
  }
  return c.createElement(
    Sd.Provider,
    { value: i },
    c.createElement(
      Gy.Provider,
      {
        value: { api: t, navigate: e.navigate, auth: { signInPath: n, signOutActionApiIdentifier: a, redirectOnSuccessfulSignInPath: r } },
      },
      c.createElement(K1, { value: i }, e.children)
    )
  );
}
const jy = () => {
  const e = b.useContext(Gy),
    t = b.useContext(Sd);
  if (!e || !e.api)
    throw t
      ? new Error(`useApi hook called in context with deprecated <Provider/> convention. Please ensure you are wrapping this hook with the <Provider/> component from @gadgetinc/react and passing it an instance of your api client, like <Provider api={api} />.

        The <Provider /> component is currently being passed a value, like <Provider value={api.connection.currentClient}/>. Please update this to <Provider api={api} />.`)
      : new Error(`useApi hook called in context where no Gadget API client is available. Please ensure you are wrapping this hook with the <Provider/> component from @gadgetinc/react.

      Possible remedies:
       - ensuring you have the <Provider/> component wrapped around your hook invocation
       - ensuring you are passing an api client instance to the provider, usually <Provider api={api}>
       - ensuring your @gadget-client/<your-app> package and your @gadgetinc/react package are up to date`);
  return e.api;
};
uI.__docgenInfo = {
  description: `Provider wrapper component that passes an api client instance to the other hooks.

This component is __required__ as a wrapper around any React components using the other hooks in this library, like \`useFindMany\` or \`useAction\`.

Pass an instance of your app's api client to the \`api\` prop.

@example
<Provider api={api}>
  <MyApp />
</Provider>

@example the Provider accepts the deprecated form of passing an urql client object right in -- this is deprecated and will be removed in a future version. Instead, just pass the whole api instance.
<Provider value={api.connection.currentClient}>
  <MyApp />
</Provider>

@example the Provider accepts option sign in and sign out paths.
<Provider api={api} signInPath="/auth/signin" signOutActionApiIdentifier="signOut">
  <MyApp />
</Provider>`,
  methods: [],
  displayName: "Provider",
};
var ml = (e) => e.type === "checkbox",
  ns = (e) => e instanceof Date,
  Ri = (e) => e == null;
const zy = (e) => typeof e == "object";
var Mt = (e) => !Ri(e) && !Array.isArray(e) && zy(e) && !ns(e),
  Wy = (e) => (Mt(e) && e.target ? (ml(e.target) ? e.target.checked : e.target.value) : e),
  cI = (e) => e.substring(0, e.search(/\.\d+(\.|$)/)) || e,
  Ly = (e, t) => e.has(cI(t)),
  pI = (e) => {
    const t = e.constructor && e.constructor.prototype;
    return Mt(t) && t.hasOwnProperty("isPrototypeOf");
  },
  wc = typeof window < "u" && typeof window.HTMLElement < "u" && typeof document < "u";
function ki(e) {
  let t;
  const i = Array.isArray(e);
  if (e instanceof Date) t = new Date(e);
  else if (e instanceof Set) t = new Set(e);
  else if (!(wc && (e instanceof Blob || e instanceof FileList)) && (i || Mt(e)))
    if (((t = i ? [] : {}), !i && !pI(e))) t = e;
    else for (const n in e) e.hasOwnProperty(n) && (t[n] = ki(e[n]));
  else return e;
  return t;
}
var vs = (e) => (Array.isArray(e) ? e.filter(Boolean) : []),
  we = (e) => e === void 0,
  D = (e, t, i) => {
    if (!t || !Mt(e)) return i;
    const n = vs(t.split(/[,[\].]+?/)).reduce((a, r) => (Ri(a) ? a : a[r]), e);
    return we(n) || n === e ? (we(e[t]) ? i : e[t]) : n;
  },
  Xa = (e) => typeof e == "boolean";
const Xl = { BLUR: "blur", FOCUS_OUT: "focusout", CHANGE: "change" },
  Dn = { onBlur: "onBlur", onChange: "onChange", onSubmit: "onSubmit", onTouched: "onTouched", all: "all" },
  lr = {
    max: "max",
    min: "min",
    maxLength: "maxLength",
    minLength: "minLength",
    pattern: "pattern",
    required: "required",
    validate: "validate",
  },
  Hy = c.createContext(null),
  yl = () => c.useContext(Hy),
  F5 = (e) => {
    const { children: t, ...i } = e;
    return c.createElement(Hy.Provider, { value: i }, t);
  };
var Qy = (e, t, i, n = !0) => {
    const a = { defaultValues: t._defaultValues };
    for (const r in e)
      Object.defineProperty(a, r, {
        get: () => {
          const o = r;
          return t._proxyFormState[o] !== Dn.all && (t._proxyFormState[o] = !n || Dn.all), i && (i[o] = !0), e[o];
        },
      });
    return a;
  },
  Fn = (e) => Mt(e) && !Object.keys(e).length,
  Zy = (e, t, i, n) => {
    i(e);
    const { name: a, ...r } = e;
    return Fn(r) || Object.keys(r).length >= Object.keys(t).length || Object.keys(r).find((o) => t[o] === (!n || Dn.all));
  },
  xn = (e) => (Array.isArray(e) ? e : [e]),
  Jy = (e, t, i) => !e || !t || e === t || xn(e).some((n) => n && (i ? n === t : n.startsWith(t) || t.startsWith(n)));
function kd(e) {
  const t = c.useRef(e);
  (t.current = e),
    c.useEffect(() => {
      const i = !e.disabled && t.current.subject && t.current.subject.subscribe({ next: t.current.next });
      return () => {
        i && i.unsubscribe();
      };
    }, [e.disabled]);
}
function fI(e) {
  const t = yl(),
    { control: i = t.control, disabled: n, name: a, exact: r } = e || {},
    [o, s] = c.useState(i._formState),
    l = c.useRef(!0),
    d = c.useRef({ isDirty: !1, isLoading: !1, dirtyFields: !1, touchedFields: !1, isValidating: !1, isValid: !1, errors: !1 }),
    u = c.useRef(a);
  return (
    (u.current = a),
    kd({
      disabled: n,
      next: (f) => l.current && Jy(u.current, f.name, r) && Zy(f, d.current, i._updateFormState) && s({ ...i._formState, ...f }),
      subject: i._subjects.state,
    }),
    c.useEffect(
      () => (
        (l.current = !0),
        d.current.isValid && i._updateValid(!0),
        () => {
          l.current = !1;
        }
      ),
      [i]
    ),
    Qy(o, i, d.current, !1)
  );
}
var tr = (e) => typeof e == "string",
  Yy = (e, t, i, n, a) =>
    tr(e)
      ? (n && t.watch.add(e), D(i, e, a))
      : Array.isArray(e)
      ? e.map((r) => (n && t.watch.add(r), D(i, r)))
      : (n && (t.watchAll = !0), i);
function mI(e) {
  const t = yl(),
    { control: i = t.control, name: n, defaultValue: a, disabled: r, exact: o } = e || {},
    s = c.useRef(n);
  (s.current = n),
    kd({
      disabled: r,
      subject: i._subjects.values,
      next: (u) => {
        Jy(s.current, u.name, o) && d(ki(Yy(s.current, i._names, u.values || i._formValues, !1, a)));
      },
    });
  const [l, d] = c.useState(i._getWatch(n, a));
  return c.useEffect(() => i._removeUnmounted()), l;
}
var xc = (e) => /^\w*$/.test(e),
  Xy = (e) => vs(e.replace(/["|']|\]/g, "").split(/\.|\[/));
function Ae(e, t, i) {
  let n = -1;
  const a = xc(t) ? [t] : Xy(t),
    r = a.length,
    o = r - 1;
  for (; ++n < r; ) {
    const s = a[n];
    let l = i;
    if (n !== o) {
      const d = e[s];
      l = Mt(d) || Array.isArray(d) ? d : isNaN(+a[n + 1]) ? {} : [];
    }
    (e[s] = l), (e = e[s]);
  }
  return e;
}
function Ky(e) {
  const t = yl(),
    { name: i, disabled: n, control: a = t.control, shouldUnregister: r } = e,
    o = Ly(a._names.array, i),
    s = mI({ control: a, name: i, defaultValue: D(a._formValues, i, D(a._defaultValues, i, e.defaultValue)), exact: !0 }),
    l = fI({ control: a, name: i }),
    d = c.useRef(a.register(i, { ...e.rules, value: s }));
  return (
    (d.current = a.register(i, e.rules)),
    c.useEffect(() => {
      const u = a._options.shouldUnregister || r,
        f = (p, m) => {
          const h = D(a._fields, p);
          h && (h._f.mount = m);
        };
      if ((f(i, !0), u)) {
        const p = ki(D(a._options.defaultValues, i));
        Ae(a._defaultValues, i, p), we(D(a._formValues, i)) && Ae(a._formValues, i, p);
      }
      return () => {
        (o ? u && !a._state.action : u) ? a.unregister(i) : f(i, !1);
      };
    }, [i, a, o, r]),
    c.useEffect(() => {
      D(a._fields, i) && a._updateDisabledField({ disabled: n, fields: a._fields, name: i, value: D(a._fields, i)._f.value });
    }, [n, i, a]),
    {
      field: {
        name: i,
        value: s,
        ...(Xa(n) || Xa(l.disabled) ? { disabled: l.disabled || n } : {}),
        onChange: c.useCallback((u) => d.current.onChange({ target: { value: Wy(u), name: i }, type: Xl.CHANGE }), [i]),
        onBlur: c.useCallback(() => d.current.onBlur({ target: { value: D(a._formValues, i), name: i }, type: Xl.BLUR }), [i, a]),
        ref: (u) => {
          const f = D(a._fields, i);
          f &&
            u &&
            (f._f.ref = {
              focus: () => u.focus(),
              select: () => u.select(),
              setCustomValidity: (p) => u.setCustomValidity(p),
              reportValidity: () => u.reportValidity(),
            });
        },
      },
      formState: l,
      fieldState: Object.defineProperties(
        {},
        {
          invalid: { enumerable: !0, get: () => !!D(l.errors, i) },
          isDirty: { enumerable: !0, get: () => !!D(l.dirtyFields, i) },
          isTouched: { enumerable: !0, get: () => !!D(l.touchedFields, i) },
          error: { enumerable: !0, get: () => D(l.errors, i) },
        }
      ),
    }
  );
}
const w5 = (e) => e.render(Ky(e));
var yI = (e, t, i, n, a) => (t ? { ...i[e], types: { ...(i[e] && i[e].types ? i[e].types : {}), [n]: a || !0 } } : {}),
  wr = () => {
    const e = typeof performance > "u" ? Date.now() : performance.now() * 1e3;
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (t) => {
      const i = (Math.random() * 16 + e) % 16 | 0;
      return (t == "x" ? i : (i & 3) | 8).toString(16);
    });
  },
  Wd = (e, t, i = {}) => (i.shouldFocus || we(i.shouldFocus) ? i.focusName || `${e}.${we(i.focusIndex) ? t : i.focusIndex}.` : ""),
  Ru = (e) => ({
    isOnSubmit: !e || e === Dn.onSubmit,
    isOnBlur: e === Dn.onBlur,
    isOnChange: e === Dn.onChange,
    isOnAll: e === Dn.all,
    isOnTouch: e === Dn.onTouched,
  }),
  Bu = (e, t, i) => !i && (t.watchAll || t.watch.has(e) || [...t.watch].some((n) => e.startsWith(n) && /^\.\w+/.test(e.slice(n.length))));
const Qs = (e, t, i, n) => {
  for (const a of i || Object.keys(e)) {
    const r = D(e, a);
    if (r) {
      const { _f: o, ...s } = r;
      if (o) {
        if (o.refs && o.refs[0] && t(o.refs[0], a) && !n) break;
        if (o.ref && t(o.ref, o.name) && !n) break;
      } else Mt(s) && Qs(s, t);
    }
  }
};
var eg = (e, t, i) => {
    const n = vs(D(e, i));
    return Ae(n, "root", t[i]), Ae(e, i, n), e;
  },
  Tc = (e) => e.type === "file",
  no = (e) => typeof e == "function",
  Kl = (e) => {
    if (!wc) return !1;
    const t = e ? e.ownerDocument : 0;
    return e instanceof (t && t.defaultView ? t.defaultView.HTMLElement : HTMLElement);
  },
  Ul = (e) => tr(e),
  Mc = (e) => e.type === "radio",
  ed = (e) => e instanceof RegExp;
const af = { value: !1, isValid: !1 },
  rf = { value: !0, isValid: !0 };
var tg = (e) => {
  if (Array.isArray(e)) {
    if (e.length > 1) {
      const t = e.filter((i) => i && i.checked && !i.disabled).map((i) => i.value);
      return { value: t, isValid: !!t.length };
    }
    return e[0].checked && !e[0].disabled
      ? e[0].attributes && !we(e[0].attributes.value)
        ? we(e[0].value) || e[0].value === ""
          ? rf
          : { value: e[0].value, isValid: !0 }
        : rf
      : af;
  }
  return af;
};
const of = { isValid: !1, value: null };
var ig = (e) => (Array.isArray(e) ? e.reduce((t, i) => (i && i.checked && !i.disabled ? { isValid: !0, value: i.value } : t), of) : of);
function sf(e, t, i = "validate") {
  if (Ul(e) || (Array.isArray(e) && e.every(Ul)) || (Xa(e) && !e)) return { type: i, message: Ul(e) ? e : "", ref: t };
}
var $o = (e) => (Mt(e) && !ed(e) ? e : { value: e, message: "" }),
  Cu = async (e, t, i, n, a) => {
    const {
        ref: r,
        refs: o,
        required: s,
        maxLength: l,
        minLength: d,
        min: u,
        max: f,
        pattern: p,
        validate: m,
        name: h,
        valueAsNumber: k,
        mount: x,
        disabled: T,
      } = e._f,
      y = D(t, h);
    if (!x || T) return {};
    const v = o ? o[0] : r,
      S = (P) => {
        n && v.reportValidity && (v.setCustomValidity(Xa(P) ? "" : P || ""), v.reportValidity());
      },
      F = {},
      w = Mc(r),
      M = ml(r),
      C = w || M,
      $ = ((k || Tc(r)) && we(r.value) && we(y)) || (Kl(r) && r.value === "") || y === "" || (Array.isArray(y) && !y.length),
      L = yI.bind(null, h, i, F),
      U = (P, z, E, K = lr.maxLength, J = lr.minLength) => {
        const Q = P ? z : E;
        F[h] = { type: P ? K : J, message: Q, ref: r, ...L(P ? K : J, Q) };
      };
    if (
      a ? !Array.isArray(y) || !y.length : s && ((!C && ($ || Ri(y))) || (Xa(y) && !y) || (M && !tg(o).isValid) || (w && !ig(o).isValid))
    ) {
      const { value: P, message: z } = Ul(s) ? { value: !!s, message: s } : $o(s);
      if (P && ((F[h] = { type: lr.required, message: z, ref: v, ...L(lr.required, z) }), !i)) return S(z), F;
    }
    if (!$ && (!Ri(u) || !Ri(f))) {
      let P, z;
      const E = $o(f),
        K = $o(u);
      if (!Ri(y) && !isNaN(y)) {
        const J = r.valueAsNumber || (y && +y);
        Ri(E.value) || (P = J > E.value), Ri(K.value) || (z = J < K.value);
      } else {
        const J = r.valueAsDate || new Date(y),
          Q = (te) => new Date(new Date().toDateString() + " " + te),
          oe = r.type == "time",
          qe = r.type == "week";
        tr(E.value) && y && (P = oe ? Q(y) > Q(E.value) : qe ? y > E.value : J > new Date(E.value)),
          tr(K.value) && y && (z = oe ? Q(y) < Q(K.value) : qe ? y < K.value : J < new Date(K.value));
      }
      if ((P || z) && (U(!!P, E.message, K.message, lr.max, lr.min), !i)) return S(F[h].message), F;
    }
    if ((l || d) && !$ && (tr(y) || (a && Array.isArray(y)))) {
      const P = $o(l),
        z = $o(d),
        E = !Ri(P.value) && y.length > +P.value,
        K = !Ri(z.value) && y.length < +z.value;
      if ((E || K) && (U(E, P.message, z.message), !i)) return S(F[h].message), F;
    }
    if (p && !$ && tr(y)) {
      const { value: P, message: z } = $o(p);
      if (ed(P) && !y.match(P) && ((F[h] = { type: lr.pattern, message: z, ref: r, ...L(lr.pattern, z) }), !i)) return S(z), F;
    }
    if (m) {
      if (no(m)) {
        const P = await m(y, t),
          z = sf(P, v);
        if (z && ((F[h] = { ...z, ...L(lr.validate, z.message) }), !i)) return S(z.message), F;
      } else if (Mt(m)) {
        let P = {};
        for (const z in m) {
          if (!Fn(P) && !i) break;
          const E = sf(await m[z](y, t), v, z);
          E && ((P = { ...E, ...L(z, E.message) }), S(E.message), i && (F[h] = P));
        }
        if (!Fn(P) && ((F[h] = { ref: v, ...P }), !i)) return F;
      }
    }
    return S(!0), F;
  };
function Ld(e, t) {
  return [...e, ...xn(t)];
}
var Hd = (e) => (Array.isArray(e) ? e.map(() => {}) : void 0);
function Qd(e, t, i) {
  return [...e.slice(0, t), ...xn(i), ...e.slice(t)];
}
var Zd = (e, t, i) => (Array.isArray(e) ? (we(e[i]) && (e[i] = void 0), e.splice(i, 0, e.splice(t, 1)[0]), e) : []);
function Jd(e, t) {
  return [...xn(t), ...xn(e)];
}
function gI(e, t) {
  let i = 0;
  const n = [...e];
  for (const a of t) n.splice(a - i, 1), i++;
  return vs(n).length ? n : [];
}
var Yd = (e, t) =>
    we(t)
      ? []
      : gI(
          e,
          xn(t).sort((i, n) => i - n)
        ),
  Xd = (e, t, i) => {
    e[t] = [e[i], (e[i] = e[t])][0];
  };
function hI(e, t) {
  const i = t.slice(0, -1).length;
  let n = 0;
  for (; n < i; ) e = we(e) ? n++ : e[t[n++]];
  return e;
}
function bI(e) {
  for (const t in e) if (e.hasOwnProperty(t) && !we(e[t])) return !1;
  return !0;
}
function Zt(e, t) {
  const i = Array.isArray(t) ? t : xc(t) ? [t] : Xy(t),
    n = i.length === 1 ? e : hI(e, i),
    a = i.length - 1,
    r = i[a];
  return n && delete n[r], a !== 0 && ((Mt(n) && Fn(n)) || (Array.isArray(n) && bI(n))) && Zt(e, i.slice(0, -1)), e;
}
var lf = (e, t, i) => ((e[t] = i), e);
function x5(e) {
  const t = yl(),
    { control: i = t.control, name: n, keyName: a = "id", shouldUnregister: r } = e,
    [o, s] = c.useState(i._getFieldArray(n)),
    l = c.useRef(i._getFieldArray(n).map(wr)),
    d = c.useRef(o),
    u = c.useRef(n),
    f = c.useRef(!1);
  (u.current = n),
    (d.current = o),
    i._names.array.add(n),
    e.rules && i.register(n, e.rules),
    kd({
      next: ({ values: F, name: w }) => {
        if (w === u.current || !w) {
          const M = D(F, u.current);
          Array.isArray(M) && (s(M), (l.current = M.map(wr)));
        }
      },
      subject: i._subjects.array,
    });
  const p = c.useCallback(
      (F) => {
        (f.current = !0), i._updateFieldArray(n, F);
      },
      [i, n]
    ),
    m = (F, w) => {
      const M = xn(ki(F)),
        C = Ld(i._getFieldArray(n), M);
      (i._names.focus = Wd(n, C.length - 1, w)),
        (l.current = Ld(l.current, M.map(wr))),
        p(C),
        s(C),
        i._updateFieldArray(n, C, Ld, { argA: Hd(F) });
    },
    h = (F, w) => {
      const M = xn(ki(F)),
        C = Jd(i._getFieldArray(n), M);
      (i._names.focus = Wd(n, 0, w)), (l.current = Jd(l.current, M.map(wr))), p(C), s(C), i._updateFieldArray(n, C, Jd, { argA: Hd(F) });
    },
    k = (F) => {
      const w = Yd(i._getFieldArray(n), F);
      (l.current = Yd(l.current, F)), p(w), s(w), i._updateFieldArray(n, w, Yd, { argA: F });
    },
    x = (F, w, M) => {
      const C = xn(ki(w)),
        $ = Qd(i._getFieldArray(n), F, C);
      (i._names.focus = Wd(n, F, M)),
        (l.current = Qd(l.current, F, C.map(wr))),
        p($),
        s($),
        i._updateFieldArray(n, $, Qd, { argA: F, argB: Hd(w) });
    },
    T = (F, w) => {
      const M = i._getFieldArray(n);
      Xd(M, F, w), Xd(l.current, F, w), p(M), s(M), i._updateFieldArray(n, M, Xd, { argA: F, argB: w }, !1);
    },
    y = (F, w) => {
      const M = i._getFieldArray(n);
      Zd(M, F, w), Zd(l.current, F, w), p(M), s(M), i._updateFieldArray(n, M, Zd, { argA: F, argB: w }, !1);
    },
    v = (F, w) => {
      const M = ki(w),
        C = lf(i._getFieldArray(n), F, M);
      (l.current = [...C].map(($, L) => (!$ || L === F ? wr() : l.current[L]))),
        p(C),
        s([...C]),
        i._updateFieldArray(n, C, lf, { argA: F, argB: M }, !0, !1);
    },
    S = (F) => {
      const w = xn(ki(F));
      (l.current = w.map(wr)), p([...w]), s([...w]), i._updateFieldArray(n, [...w], (M) => M, {}, !0, !1);
    };
  return (
    c.useEffect(() => {
      if (
        ((i._state.action = !1),
        Bu(n, i._names) && i._subjects.state.next({ ...i._formState }),
        f.current && (!Ru(i._options.mode).isOnSubmit || i._formState.isSubmitted))
      )
        if (i._options.resolver)
          i._executeSchema([n]).then((F) => {
            const w = D(F.errors, n),
              M = D(i._formState.errors, n);
            (M ? (!w && M.type) || (w && (M.type !== w.type || M.message !== w.message)) : w && w.type) &&
              (w ? Ae(i._formState.errors, n, w) : Zt(i._formState.errors, n), i._subjects.state.next({ errors: i._formState.errors }));
          });
        else {
          const F = D(i._fields, n);
          F &&
            F._f &&
            Cu(F, i._formValues, i._options.criteriaMode === Dn.all, i._options.shouldUseNativeValidation, !0).then(
              (w) => !Fn(w) && i._subjects.state.next({ errors: eg(i._formState.errors, w, n) })
            );
        }
      i._subjects.values.next({ name: n, values: { ...i._formValues } }),
        i._names.focus &&
          Qs(i._fields, (F, w) => {
            if (i._names.focus && w.startsWith(i._names.focus) && F.focus) return F.focus(), 1;
          }),
        (i._names.focus = ""),
        i._updateValid(),
        (f.current = !1);
    }, [o, n, i]),
    c.useEffect(
      () => (
        !D(i._formValues, n) && i._updateFieldArray(n),
        () => {
          (i._options.shouldUnregister || r) && i.unregister(n);
        }
      ),
      [n, i, a, r]
    ),
    {
      swap: c.useCallback(T, [p, n, i]),
      move: c.useCallback(y, [p, n, i]),
      prepend: c.useCallback(h, [p, n, i]),
      append: c.useCallback(m, [p, n, i]),
      remove: c.useCallback(k, [p, n, i]),
      insert: c.useCallback(x, [p, n, i]),
      update: c.useCallback(v, [p, n, i]),
      replace: c.useCallback(S, [p, n, i]),
      fields: c.useMemo(() => o.map((F, w) => ({ ...F, [a]: l.current[w] || wr() })), [o, a]),
    }
  );
}
function Kd() {
  let e = [];
  return {
    get observers() {
      return e;
    },
    next: (a) => {
      for (const r of e) r.next && r.next(a);
    },
    subscribe: (a) => (
      e.push(a),
      {
        unsubscribe: () => {
          e = e.filter((r) => r !== a);
        },
      }
    ),
    unsubscribe: () => {
      e = [];
    },
  };
}
var td = (e) => Ri(e) || !zy(e);
function wo(e, t) {
  if (td(e) || td(t)) return e === t;
  if (ns(e) && ns(t)) return e.getTime() === t.getTime();
  const i = Object.keys(e),
    n = Object.keys(t);
  if (i.length !== n.length) return !1;
  for (const a of i) {
    const r = e[a];
    if (!n.includes(a)) return !1;
    if (a !== "ref") {
      const o = t[a];
      if ((ns(r) && ns(o)) || (Mt(r) && Mt(o)) || (Array.isArray(r) && Array.isArray(o)) ? !wo(r, o) : r !== o) return !1;
    }
  }
  return !0;
}
var ng = (e) => e.type === "select-multiple",
  vI = (e) => Mc(e) || ml(e),
  eu = (e) => Kl(e) && e.isConnected,
  ag = (e) => {
    for (const t in e) if (no(e[t])) return !0;
    return !1;
  };
function id(e, t = {}) {
  const i = Array.isArray(e);
  if (Mt(e) || i)
    for (const n in e)
      Array.isArray(e[n]) || (Mt(e[n]) && !ag(e[n])) ? ((t[n] = Array.isArray(e[n]) ? [] : {}), id(e[n], t[n])) : Ri(e[n]) || (t[n] = !0);
  return t;
}
function rg(e, t, i) {
  const n = Array.isArray(e);
  if (Mt(e) || n)
    for (const a in e)
      Array.isArray(e[a]) || (Mt(e[a]) && !ag(e[a]))
        ? we(t) || td(i[a])
          ? (i[a] = Array.isArray(e[a]) ? id(e[a], []) : { ...id(e[a]) })
          : rg(e[a], Ri(t) ? {} : t[a], i[a])
        : (i[a] = !wo(e[a], t[a]));
  return i;
}
var tu = (e, t) => rg(e, t, id(t)),
  og = (e, { valueAsNumber: t, valueAsDate: i, setValueAs: n }) =>
    we(e) ? e : t ? (e === "" ? NaN : e && +e) : i && tr(e) ? new Date(e) : n ? n(e) : e;
function iu(e) {
  const t = e.ref;
  if (!(e.refs ? e.refs.every((i) => i.disabled) : t.disabled))
    return Tc(t)
      ? t.files
      : Mc(t)
      ? ig(e.refs).value
      : ng(t)
      ? [...t.selectedOptions].map(({ value: i }) => i)
      : ml(t)
      ? tg(e.refs).value
      : og(we(t.value) ? e.ref.value : t.value, e);
}
var II = (e, t, i, n) => {
    const a = {};
    for (const r of e) {
      const o = D(t, r);
      o && Ae(a, r, o._f);
    }
    return { criteriaMode: i, names: [...e], fields: a, shouldUseNativeValidation: n };
  },
  Bs = (e) => (we(e) ? e : ed(e) ? e.source : Mt(e) ? (ed(e.value) ? e.value.source : e.value) : e),
  SI = (e) => e.mount && (e.required || e.min || e.max || e.maxLength || e.minLength || e.pattern || e.validate);
function df(e, t, i) {
  const n = D(e, i);
  if (n || xc(i)) return { error: n, name: i };
  const a = i.split(".");
  for (; a.length; ) {
    const r = a.join("."),
      o = D(t, r),
      s = D(e, r);
    if (o && !Array.isArray(o) && i !== r) return { name: i };
    if (s && s.type) return { name: r, error: s };
    a.pop();
  }
  return { name: i };
}
var kI = (e, t, i, n, a) =>
    a.isOnAll ? !1 : !i && a.isOnTouch ? !(t || e) : (i ? n.isOnBlur : a.isOnBlur) ? !e : (i ? n.isOnChange : a.isOnChange) ? e : !0,
  NI = (e, t) => !vs(D(e, t)).length && Zt(e, t);
const AI = { mode: Dn.onSubmit, reValidateMode: Dn.onChange, shouldFocusError: !0 };
function FI(e = {}, t) {
  let i = { ...AI, ...e },
    n = {
      submitCount: 0,
      isDirty: !1,
      isLoading: no(i.defaultValues),
      isValidating: !1,
      isSubmitted: !1,
      isSubmitting: !1,
      isSubmitSuccessful: !1,
      isValid: !1,
      touchedFields: {},
      dirtyFields: {},
      errors: {},
      disabled: !1,
    },
    a = {},
    r = Mt(i.defaultValues) || Mt(i.values) ? ki(i.defaultValues || i.values) || {} : {},
    o = i.shouldUnregister ? {} : ki(r),
    s = { action: !1, mount: !1, watch: !1 },
    l = { mount: new Set(), unMount: new Set(), array: new Set(), watch: new Set() },
    d,
    u = 0;
  const f = { isDirty: !1, dirtyFields: !1, touchedFields: !1, isValidating: !1, isValid: !1, errors: !1 },
    p = { values: Kd(), array: Kd(), state: Kd() },
    m = e.resetOptions && e.resetOptions.keepDirtyValues,
    h = Ru(i.mode),
    k = Ru(i.reValidateMode),
    x = i.criteriaMode === Dn.all,
    T = (g) => (I) => {
      clearTimeout(u), (u = setTimeout(g, I));
    },
    y = async (g) => {
      if (f.isValid || g) {
        const I = i.resolver ? Fn((await $()).errors) : await U(a, !0);
        I !== n.isValid && p.state.next({ isValid: I });
      }
    },
    v = (g) => f.isValidating && p.state.next({ isValidating: g }),
    S = (g, I = [], A, G, q = !0, R = !0) => {
      if (G && A) {
        if (((s.action = !0), R && Array.isArray(D(a, g)))) {
          const V = A(D(a, g), G.argA, G.argB);
          q && Ae(a, g, V);
        }
        if (R && Array.isArray(D(n.errors, g))) {
          const V = A(D(n.errors, g), G.argA, G.argB);
          q && Ae(n.errors, g, V), NI(n.errors, g);
        }
        if (f.touchedFields && R && Array.isArray(D(n.touchedFields, g))) {
          const V = A(D(n.touchedFields, g), G.argA, G.argB);
          q && Ae(n.touchedFields, g, V);
        }
        f.dirtyFields && (n.dirtyFields = tu(r, o)),
          p.state.next({ name: g, isDirty: z(g, I), dirtyFields: n.dirtyFields, errors: n.errors, isValid: n.isValid });
      } else Ae(o, g, I);
    },
    F = (g, I) => {
      Ae(n.errors, g, I), p.state.next({ errors: n.errors });
    },
    w = (g, I, A, G) => {
      const q = D(a, g);
      if (q) {
        const R = D(o, g, we(A) ? D(r, g) : A);
        we(R) || (G && G.defaultChecked) || I ? Ae(o, g, I ? R : iu(q._f)) : J(g, R), s.mount && y();
      }
    },
    M = (g, I, A, G, q) => {
      let R = !1,
        V = !1;
      const ve = { name: g };
      if (!A || G) {
        f.isDirty && ((V = n.isDirty), (n.isDirty = ve.isDirty = z()), (R = V !== ve.isDirty));
        const ge = wo(D(r, g), I);
        (V = D(n.dirtyFields, g)),
          ge ? Zt(n.dirtyFields, g) : Ae(n.dirtyFields, g, !0),
          (ve.dirtyFields = n.dirtyFields),
          (R = R || (f.dirtyFields && V !== !ge));
      }
      if (A) {
        const ge = D(n.touchedFields, g);
        ge || (Ae(n.touchedFields, g, A), (ve.touchedFields = n.touchedFields), (R = R || (f.touchedFields && ge !== A)));
      }
      return R && q && p.state.next(ve), R ? ve : {};
    },
    C = (g, I, A, G) => {
      const q = D(n.errors, g),
        R = f.isValid && Xa(I) && n.isValid !== I;
      if (
        (e.delayError && A
          ? ((d = T(() => F(g, A))), d(e.delayError))
          : (clearTimeout(u), (d = null), A ? Ae(n.errors, g, A) : Zt(n.errors, g)),
        (A ? !wo(q, A) : q) || !Fn(G) || R)
      ) {
        const V = { ...G, ...(R && Xa(I) ? { isValid: I } : {}), errors: n.errors, name: g };
        (n = { ...n, ...V }), p.state.next(V);
      }
      v(!1);
    },
    $ = async (g) => i.resolver(o, i.context, II(g || l.mount, a, i.criteriaMode, i.shouldUseNativeValidation)),
    L = async (g) => {
      const { errors: I } = await $(g);
      if (g)
        for (const A of g) {
          const G = D(I, A);
          G ? Ae(n.errors, A, G) : Zt(n.errors, A);
        }
      else n.errors = I;
      return I;
    },
    U = async (g, I, A = { valid: !0 }) => {
      for (const G in g) {
        const q = g[G];
        if (q) {
          const { _f: R, ...V } = q;
          if (R) {
            const ve = l.array.has(R.name),
              ge = await Cu(q, o, x, i.shouldUseNativeValidation && !I, ve);
            if (ge[R.name] && ((A.valid = !1), I)) break;
            !I && (D(ge, R.name) ? (ve ? eg(n.errors, ge, R.name) : Ae(n.errors, R.name, ge[R.name])) : Zt(n.errors, R.name));
          }
          V && (await U(V, I, A));
        }
      }
      return A.valid;
    },
    P = () => {
      for (const g of l.unMount) {
        const I = D(a, g);
        I && (I._f.refs ? I._f.refs.every((A) => !eu(A)) : !eu(I._f.ref)) && wt(g);
      }
      l.unMount = new Set();
    },
    z = (g, I) => (g && I && Ae(o, g, I), !wo(Yt(), r)),
    E = (g, I, A) => Yy(g, l, { ...(s.mount ? o : we(I) ? r : tr(g) ? { [g]: I } : I) }, A, I),
    K = (g) => vs(D(s.mount ? o : r, g, e.shouldUnregister ? D(r, g, []) : [])),
    J = (g, I, A = {}) => {
      const G = D(a, g);
      let q = I;
      if (G) {
        const R = G._f;
        R &&
          (!R.disabled && Ae(o, g, og(I, R)),
          (q = Kl(R.ref) && Ri(I) ? "" : I),
          ng(R.ref)
            ? [...R.ref.options].forEach((V) => (V.selected = q.includes(V.value)))
            : R.refs
            ? ml(R.ref)
              ? R.refs.length > 1
                ? R.refs.forEach(
                    (V) =>
                      (!V.defaultChecked || !V.disabled) &&
                      (V.checked = Array.isArray(q) ? !!q.find((ve) => ve === V.value) : q === V.value)
                  )
                : R.refs[0] && (R.refs[0].checked = !!q)
              : R.refs.forEach((V) => (V.checked = V.value === q))
            : Tc(R.ref)
            ? (R.ref.value = "")
            : ((R.ref.value = q), R.ref.type || p.values.next({ name: g, values: { ...o } })));
      }
      (A.shouldDirty || A.shouldTouch) && M(g, q, A.shouldTouch, A.shouldDirty, !0), A.shouldValidate && Ot(g);
    },
    Q = (g, I, A) => {
      for (const G in I) {
        const q = I[G],
          R = `${g}.${G}`,
          V = D(a, R);
        (l.array.has(g) || !td(q) || (V && !V._f)) && !ns(q) ? Q(R, q, A) : J(R, q, A);
      }
    },
    oe = (g, I, A = {}) => {
      const G = D(a, g),
        q = l.array.has(g),
        R = ki(I);
      Ae(o, g, R),
        q
          ? (p.array.next({ name: g, values: { ...o } }),
            (f.isDirty || f.dirtyFields) && A.shouldDirty && p.state.next({ name: g, dirtyFields: tu(r, o), isDirty: z(g, R) }))
          : G && !G._f && !Ri(R)
          ? Q(g, R, A)
          : J(g, R, A),
        Bu(g, l) && p.state.next({ ...n }),
        p.values.next({ name: g, values: { ...o } }),
        !s.mount && t();
    },
    qe = async (g) => {
      const I = g.target;
      let A = I.name,
        G = !0;
      const q = D(a, A),
        R = () => (I.type ? iu(q._f) : Wy(g)),
        V = (ve) => {
          G = Number.isNaN(ve) || ve === D(o, A, ve);
        };
      if (q) {
        let ve, ge;
        const so = R(),
          pa = g.type === Xl.BLUR || g.type === Xl.FOCUS_OUT,
          ks = (!SI(q._f) && !i.resolver && !D(n.errors, A) && !q._f.deps) || kI(pa, D(n.touchedFields, A), n.isSubmitted, k, h),
          lo = Bu(A, l, pa);
        Ae(o, A, so), pa ? (q._f.onBlur && q._f.onBlur(g), d && d(0)) : q._f.onChange && q._f.onChange(g);
        const Nr = M(A, so, pa, !1),
          Ns = !Fn(Nr) || lo;
        if ((!pa && p.values.next({ name: A, type: g.type, values: { ...o } }), ks))
          return f.isValid && y(), Ns && p.state.next({ name: A, ...(lo ? {} : Nr) });
        if ((!pa && lo && p.state.next({ ...n }), v(!0), i.resolver)) {
          const { errors: qo } = await $([A]);
          if ((V(so), G)) {
            const Ar = df(n.errors, a, A),
              Fr = df(qo, a, Ar.name || A);
            (ve = Fr.error), (A = Fr.name), (ge = Fn(qo));
          }
        } else
          (ve = (await Cu(q, o, x, i.shouldUseNativeValidation))[A]), V(so), G && (ve ? (ge = !1) : f.isValid && (ge = await U(a, !0)));
        G && (q._f.deps && Ot(q._f.deps), C(A, ge, ve, Nr));
      }
    },
    te = (g, I) => {
      if (D(n.errors, I) && g.focus) return g.focus(), 1;
    },
    Ot = async (g, I = {}) => {
      let A, G;
      const q = xn(g);
      if ((v(!0), i.resolver)) {
        const R = await L(we(g) ? g : q);
        (A = Fn(R)), (G = g ? !q.some((V) => D(R, V)) : A);
      } else
        g
          ? ((G = (
              await Promise.all(
                q.map(async (R) => {
                  const V = D(a, R);
                  return await U(V && V._f ? { [R]: V } : V);
                })
              )
            ).every(Boolean)),
            !(!G && !n.isValid) && y())
          : (G = A = await U(a));
      return (
        p.state.next({
          ...(!tr(g) || (f.isValid && A !== n.isValid) ? {} : { name: g }),
          ...(i.resolver || !g ? { isValid: A } : {}),
          errors: n.errors,
          isValidating: !1,
        }),
        I.shouldFocus && !G && Qs(a, te, g ? q : l.mount),
        G
      );
    },
    Yt = (g) => {
      const I = { ...r, ...(s.mount ? o : {}) };
      return we(g) ? I : tr(g) ? D(I, g) : g.map((A) => D(I, A));
    },
    ai = (g, I) => ({
      invalid: !!D((I || n).errors, g),
      isDirty: !!D((I || n).dirtyFields, g),
      isTouched: !!D((I || n).touchedFields, g),
      error: D((I || n).errors, g),
    }),
    ri = (g) => {
      g && xn(g).forEach((I) => Zt(n.errors, I)), p.state.next({ errors: g ? n.errors : {} });
    },
    Ie = (g, I, A) => {
      const G = (D(a, g, { _f: {} })._f || {}).ref;
      Ae(n.errors, g, { ...I, ref: G }),
        p.state.next({ name: g, errors: n.errors, isValid: !1 }),
        A && A.shouldFocus && G && G.focus && G.focus();
    },
    Se = (g, I) => (no(g) ? p.values.subscribe({ next: (A) => g(E(void 0, I), A) }) : E(g, I, !0)),
    wt = (g, I = {}) => {
      for (const A of g ? xn(g) : l.mount)
        l.mount.delete(A),
          l.array.delete(A),
          I.keepValue || (Zt(a, A), Zt(o, A)),
          !I.keepError && Zt(n.errors, A),
          !I.keepDirty && Zt(n.dirtyFields, A),
          !I.keepTouched && Zt(n.touchedFields, A),
          !i.shouldUnregister && !I.keepDefaultValue && Zt(r, A);
      p.values.next({ values: { ...o } }), p.state.next({ ...n, ...(I.keepDirty ? { isDirty: z() } : {}) }), !I.keepIsValid && y();
    },
    $n = ({ disabled: g, name: I, field: A, fields: G, value: q }) => {
      if (Xa(g)) {
        const R = g ? void 0 : we(q) ? iu(A ? A._f : D(G, I)._f) : q;
        Ae(o, I, R), M(I, R, !1, !1, !0);
      }
    },
    rr = (g, I = {}) => {
      let A = D(a, g);
      const G = Xa(I.disabled);
      return (
        Ae(a, g, { ...(A || {}), _f: { ...(A && A._f ? A._f : { ref: { name: g } }), name: g, mount: !0, ...I } }),
        l.mount.add(g),
        A ? $n({ field: A, disabled: I.disabled, name: g }) : w(g, !0, I.value),
        {
          ...(G ? { disabled: I.disabled } : {}),
          ...(i.progressive
            ? {
                required: !!I.required,
                min: Bs(I.min),
                max: Bs(I.max),
                minLength: Bs(I.minLength),
                maxLength: Bs(I.maxLength),
                pattern: Bs(I.pattern),
              }
            : {}),
          name: g,
          onChange: qe,
          onBlur: qe,
          ref: (q) => {
            if (q) {
              rr(g, I), (A = D(a, g));
              const R = (we(q.value) && q.querySelectorAll && q.querySelectorAll("input,select,textarea")[0]) || q,
                V = vI(R),
                ve = A._f.refs || [];
              if (V ? ve.find((ge) => ge === R) : R === A._f.ref) return;
              Ae(a, g, {
                _f: {
                  ...A._f,
                  ...(V
                    ? { refs: [...ve.filter(eu), R, ...(Array.isArray(D(r, g)) ? [{}] : [])], ref: { type: R.type, name: g } }
                    : { ref: R }),
                },
              }),
                w(g, !1, void 0, R);
            } else
              (A = D(a, g, {})),
                A._f && (A._f.mount = !1),
                (i.shouldUnregister || I.shouldUnregister) && !(Ly(l.array, g) && s.action) && l.unMount.add(g);
          },
        }
      );
    },
    or = () => i.shouldFocusError && Qs(a, te, l.mount),
    oi = (g) => {
      Xa(g) &&
        (p.state.next({ disabled: g }),
        Qs(
          a,
          (I) => {
            I.disabled = g;
          },
          0,
          !1
        ));
    },
    Ai = (g, I) => async (A) => {
      A && (A.preventDefault && A.preventDefault(), A.persist && A.persist());
      let G = ki(o);
      if ((p.state.next({ isSubmitting: !0 }), i.resolver)) {
        const { errors: q, values: R } = await $();
        (n.errors = q), (G = R);
      } else await U(a);
      Zt(n.errors, "root"),
        Fn(n.errors) ? (p.state.next({ errors: {} }), await g(G, A)) : (I && (await I({ ...n.errors }, A)), or(), setTimeout(or)),
        p.state.next({
          isSubmitted: !0,
          isSubmitting: !1,
          isSubmitSuccessful: Fn(n.errors),
          submitCount: n.submitCount + 1,
          errors: n.errors,
        });
    },
    ro = (g, I = {}) => {
      D(a, g) &&
        (we(I.defaultValue) ? oe(g, D(r, g)) : (oe(g, I.defaultValue), Ae(r, g, I.defaultValue)),
        I.keepTouched || Zt(n.touchedFields, g),
        I.keepDirty || (Zt(n.dirtyFields, g), (n.isDirty = I.defaultValue ? z(g, D(r, g)) : z())),
        I.keepError || (Zt(n.errors, g), f.isValid && y()),
        p.state.next({ ...n }));
    },
    oo = (g, I = {}) => {
      const A = g ? ki(g) : r,
        G = ki(A),
        q = g && !Fn(g) ? G : r;
      if ((I.keepDefaultValues || (r = A), !I.keepValues)) {
        if (I.keepDirtyValues || m) for (const R of l.mount) D(n.dirtyFields, R) ? Ae(q, R, D(o, R)) : oe(R, D(q, R));
        else {
          if (wc && we(g))
            for (const R of l.mount) {
              const V = D(a, R);
              if (V && V._f) {
                const ve = Array.isArray(V._f.refs) ? V._f.refs[0] : V._f.ref;
                if (Kl(ve)) {
                  const ge = ve.closest("form");
                  if (ge) {
                    ge.reset();
                    break;
                  }
                }
              }
            }
          a = {};
        }
        (o = e.shouldUnregister ? (I.keepDefaultValues ? ki(r) : {}) : ki(q)),
          p.array.next({ values: { ...q } }),
          p.values.next({ values: { ...q } });
      }
      (l = { mount: new Set(), unMount: new Set(), array: new Set(), watch: new Set(), watchAll: !1, focus: "" }),
        !s.mount && t(),
        (s.mount = !f.isValid || !!I.keepIsValid),
        (s.watch = !!e.shouldUnregister),
        p.state.next({
          submitCount: I.keepSubmitCount ? n.submitCount : 0,
          isDirty: I.keepDirty ? n.isDirty : !!(I.keepDefaultValues && !wo(g, r)),
          isSubmitted: I.keepIsSubmitted ? n.isSubmitted : !1,
          dirtyFields: I.keepDirtyValues ? n.dirtyFields : I.keepDefaultValues && g ? tu(r, g) : {},
          touchedFields: I.keepTouched ? n.touchedFields : {},
          errors: I.keepErrors ? n.errors : {},
          isSubmitSuccessful: I.keepIsSubmitSuccessful ? n.isSubmitSuccessful : !1,
          isSubmitting: !1,
        });
    },
    Ss = (g, I) => oo(no(g) ? g(o) : g, I);
  return {
    control: {
      register: rr,
      unregister: wt,
      getFieldState: ai,
      handleSubmit: Ai,
      setError: Ie,
      _executeSchema: $,
      _getWatch: E,
      _getDirty: z,
      _updateValid: y,
      _removeUnmounted: P,
      _updateFieldArray: S,
      _updateDisabledField: $n,
      _getFieldArray: K,
      _reset: oo,
      _resetDefaultValues: () =>
        no(i.defaultValues) &&
        i.defaultValues().then((g) => {
          Ss(g, i.resetOptions), p.state.next({ isLoading: !1 });
        }),
      _updateFormState: (g) => {
        n = { ...n, ...g };
      },
      _disableForm: oi,
      _subjects: p,
      _proxyFormState: f,
      get _fields() {
        return a;
      },
      get _formValues() {
        return o;
      },
      get _state() {
        return s;
      },
      set _state(g) {
        s = g;
      },
      get _defaultValues() {
        return r;
      },
      get _names() {
        return l;
      },
      set _names(g) {
        l = g;
      },
      get _formState() {
        return n;
      },
      set _formState(g) {
        n = g;
      },
      get _options() {
        return i;
      },
      set _options(g) {
        i = { ...i, ...g };
      },
    },
    trigger: Ot,
    register: rr,
    handleSubmit: Ai,
    watch: Se,
    setValue: oe,
    getValues: Yt,
    reset: Ss,
    resetField: ro,
    clearErrors: ri,
    unregister: wt,
    setError: Ie,
    setFocus: (g, I = {}) => {
      const A = D(a, g),
        G = A && A._f;
      if (G) {
        const q = G.refs ? G.refs[0] : G.ref;
        q.focus && (q.focus(), I.shouldSelect && q.select());
      }
    },
    getFieldState: ai,
  };
}
function T5(e = {}) {
  const t = c.useRef(),
    i = c.useRef(),
    [n, a] = c.useState({
      isDirty: !1,
      isValidating: !1,
      isLoading: no(e.defaultValues),
      isSubmitted: !1,
      isSubmitting: !1,
      isSubmitSuccessful: !1,
      isValid: !1,
      submitCount: 0,
      dirtyFields: {},
      touchedFields: {},
      errors: {},
      disabled: !1,
      defaultValues: no(e.defaultValues) ? void 0 : e.defaultValues,
    });
  t.current || (t.current = { ...FI(e, () => a((o) => ({ ...o }))), formState: n });
  const r = t.current.control;
  return (
    (r._options = e),
    kd({
      subject: r._subjects.state,
      next: (o) => {
        Zy(o, r._proxyFormState, r._updateFormState, !0) && a({ ...r._formState });
      },
    }),
    c.useEffect(() => r._disableForm(e.disabled), [r, e.disabled]),
    c.useEffect(() => {
      if (r._proxyFormState.isDirty) {
        const o = r._getDirty();
        o !== n.isDirty && r._subjects.state.next({ isDirty: o });
      }
    }, [r, n.isDirty]),
    c.useEffect(() => {
      e.values && !wo(e.values, i.current)
        ? (r._reset(e.values, r._options.resetOptions), (i.current = e.values))
        : r._resetDefaultValues();
    }, [e.values, r]),
    c.useEffect(() => {
      r._state.mount || (r._updateValid(), (r._state.mount = !0)),
        r._state.watch && ((r._state.watch = !1), r._subjects.state.next({ ...r._formState })),
        r._removeUnmounted();
    }),
    (t.current.formState = Qy(n, r)),
    t.current
  );
}
const sg = "Could not find a client in the context of Provider. Please ensure you wrap the root component in a <Provider>",
  wI = (e, t) => {
    let i = "";
    return (
      e !== void 0
        ? (i = `[Network] ${e.message}`)
        : t !== void 0
        ? t.forEach((n) => {
            i += `[GraphQL] ${n.message}
`;
          })
        : (i = "Unknown error"),
      i.trim()
    );
  },
  xI = (e) =>
    typeof e == "string"
      ? new nl(e)
      : e != null && e.message && !e.code
      ? new nl(e.message, e.nodes, e.source, e.positions, e.path, e, e.extensions || {})
      : e;
class Ka extends Error {
  constructor({ networkError: i, executionErrors: n, response: a }) {
    const r = (n || []).map(xI),
      o = wI(i, r);
    super(o);
    Vo(this, "message");
    Vo(this, "executionErrors");
    Vo(this, "networkError");
    Vo(this, "graphQLErrors");
    Vo(this, "response");
    (this.message = o), (this.executionErrors = r), (this.graphQLErrors = r), (this.networkError = i), (this.response = a);
  }
  static forClientSideError(i, n) {
    return new Ka({ executionErrors: [i], response: n });
  }
  static forErrorsResponse(i, n) {
    return new Ka({ executionErrors: i.map(hc), response: n });
  }
  static forMaybeCombinedError(i) {
    if (i) return new Ka({ networkError: i.networkError, executionErrors: i.graphQLErrors, response: i.response });
  }
  static errorIfDataAbsent(i, n, a = !1) {
    const r = g1(i, n);
    let o = Ka.forMaybeCombinedError(i.error);
    return !o && r && !a && (o = Ka.forClientSideError(r)), o;
  }
  get name() {
    return "ErrorWrapper";
  }
  toString() {
    return this.message;
  }
  get validationErrors() {
    const i = this.executionErrors.find((n) => n.code == "GGT_INVALID_RECORD");
    return (i == null ? void 0 : i.validationErrors) ?? null;
  }
}
const TI = (e) => {
    const { context: t, suspense: i, ...n } = e ?? {},
      a = b.useMemo(
        () => ({ suspense: !!(e != null && e.suspense), ...(e == null ? void 0 : e.context) }),
        [e == null ? void 0 : e.suspense, e == null ? void 0 : e.context]
      );
    return { ...n, context: a };
  },
  MI = (e, t) => ({ query: e.query, variables: e.variables, ...t }),
  Oc = (e) => (Array.isArray(e) ? e : e.match(/([^[.\]])+/g)),
  Zs = (e, t) => {
    if (t) return Oc(t).reduce((i, n) => i && i[n], e);
  },
  nu = (e, t, i) => {
    const n = Oc(t);
    n.reduce((a, r, o) => (a[r] === void 0 && (a[r] = {}), o === n.length - 1 && (a[r] = i), a[r]), e);
  },
  M5 = (e, t) => {
    const i = (n) => n[t];
    return e.filter((n, a, r) => a === r.findIndex((o) => i(n) === i(o)));
  },
  O5 = (e) => [...new Set(e)],
  R5 = (e, t) => {
    const i = Oc(t);
    i.reduce((n, a, r) => (r === i.length - 1 && delete n[a], n[a]), e);
  },
  B5 = (e, t) => ((e = { ...e }), t.forEach((i) => delete e[i]), e),
  C5 = (e, t = 300) => {
    let i;
    return (...n) => {
      clearTimeout(i), (i = setTimeout(() => e.apply(void 0, n), t));
    };
  },
  OI = (e, t, i) => Zs(e, kr([t], i).join(".")),
  P5 = (e, t, i = "asc") => e.sort((n, a) => (n[t] < a[t] ? (i === "asc" ? -1 : 1) : n[t] > a[t] ? (i === "asc" ? 1 : -1) : 0)),
  E5 = (e) => {
    const { ref: t, ...i } = e;
    return i;
  },
  D5 = (e) =>
    !(
      !Array.isArray(e) ||
      e.length === 0 ||
      !e.every((t) => t !== null && typeof t == "object" && "__typename" in t && t.__typename === "Role")
    ),
  U5 = (e) => {
    const t = /([a-z\d])([A-Z])/g;
    let i = e.replace(t, "$1 $2");
    return (
      (i = i.replace(/([a-zA-Z])(\d)/g, "$1 $2")), (i = i.replace(/(\d)([a-zA-Z])/g, "$1 $2")), i.replace(/^./, (n) => n.toUpperCase())
    );
  },
  lg = (e, t = "", i = ".") => {
    const n = {};
    for (const a in e)
      if (Object.prototype.hasOwnProperty.call(e, a)) {
        const r = t ? `${t}${i}${a}` : a;
        typeof e[a] == "object" && e[a] !== null && !Array.isArray(e[a]) ? Object.assign(n, lg(e[a], r, i)) : (n[r] = e[a]);
      }
    return n;
  },
  q5 = (e) => Object.keys(lg(e)),
  Pu = (e, t = !0) => {
    const i = {},
      n = t ? Array.from(new Set(e)) : e;
    for (const a of n) {
      const [r, ...o] = a.split(".");
      i[r] ?? (i[r] = []), o.length && i[r].push(o.join("."));
    }
    return i;
  },
  V5 = (e) => (e === 0 ? 1 : +`0.${"0".repeat(e - 1)}1`),
  _5 = (e) => {
    if (e.includes("e")) return 0;
    const [, t] = e.split(".");
    return (t == null ? void 0 : t.length) ?? 0;
  },
  Nd = (e) => {
    if (!b.useContext(Sd)) throw new Error(sg);
    const t = TI(e);
    return oI(t);
  },
  RI = (e) => {
    const t = b.useRef();
    return e ? (t.current === void 0 || !pv(e, t.current)) && (t.current = e) : (t.current = void 0), t.current;
  },
  $5 = (e) => {
    if (!b.useContext(Sd)) throw new Error(sg);
    return iI(e);
  };
var ee = ((e) => (
  (e.Any = "Any"),
  (e.Array = "Array"),
  (e.BelongsTo = "BelongsTo"),
  (e.Boolean = "Boolean"),
  (e.Code = "Code"),
  (e.Color = "Color"),
  (e.Computed = "Computed"),
  (e.DateTime = "DateTime"),
  (e.Email = "Email"),
  (e.EncryptedString = "EncryptedString"),
  (e.Enum = "Enum"),
  (e.File = "File"),
  (e.HasMany = "HasMany"),
  (e.HasManyThrough = "HasManyThrough"),
  (e.HasOne = "HasOne"),
  (e.Id = "ID"),
  (e.Json = "JSON"),
  (e.Money = "Money"),
  (e.Null = "Null"),
  (e.Number = "Number"),
  (e.Object = "Object"),
  (e.Password = "Password"),
  (e.RecordState = "RecordState"),
  (e.RichText = "RichText"),
  (e.RoleAssignments = "RoleAssignments"),
  (e.String = "String"),
  (e.Url = "URL"),
  (e.Vector = "Vector"),
  e
))(ee || {});
const BI = {
    kind: "Document",
    definitions: [
      {
        kind: "FragmentDefinition",
        name: { kind: "Name", value: "FieldMetadata" },
        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetField" } },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            { kind: "Field", name: { kind: "Name", value: "name" } },
            { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
            { kind: "Field", name: { kind: "Name", value: "fieldType" } },
            { kind: "Field", name: { kind: "Name", value: "requiredArgumentForInput" } },
            {
              kind: "InlineFragment",
              typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetModelField" } },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "sortable" } },
                  { kind: "Field", name: { kind: "Name", value: "filterable" } },
                ],
              },
            },
            {
              kind: "Field",
              name: { kind: "Name", value: "configuration" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "__typename" } },
                  { kind: "Field", name: { kind: "Name", value: "fieldType" } },
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "validations" },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRegexFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "pattern" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRangeFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "min" } },
                              { kind: "Field", name: { kind: "Name", value: "max" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetOnlyImageFileFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "allowAnimatedImages" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetGenericFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyThroughConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "joinModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseJoinModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseRelatedModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        { kind: "Field", name: { kind: "Name", value: "joinModelHasManyFieldApiIdentifier" } },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "isJoinModelHasManyField" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasOneConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetBelongsToConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetEnumConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "allowMultiple" } },
                        { kind: "Field", name: { kind: "Name", value: "allowOther" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "options" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "color" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetDateTimeConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "includeTime" } }] },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetNumberConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "decimals" } }] },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
  },
  CI = {
    kind: "Document",
    definitions: [
      {
        kind: "FragmentDefinition",
        name: { kind: "Name", value: "SubFields" },
        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetField" } },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "Field",
              name: { kind: "Name", value: "configuration" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "__typename" } },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetObjectFieldConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "fields" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                              {
                                kind: "Field",
                                name: { kind: "Name", value: "configuration" },
                                selectionSet: {
                                  kind: "SelectionSet",
                                  selections: [
                                    { kind: "Field", name: { kind: "Name", value: "__typename" } },
                                    {
                                      kind: "InlineFragment",
                                      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetObjectFieldConfig" } },
                                      selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                          { kind: "Field", name: { kind: "Name", value: "name" } },
                                          {
                                            kind: "Field",
                                            name: { kind: "Name", value: "fields" },
                                            selectionSet: {
                                              kind: "SelectionSet",
                                              selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                                                {
                                                  kind: "Field",
                                                  name: { kind: "Name", value: "configuration" },
                                                  selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [
                                                      { kind: "Field", name: { kind: "Name", value: "__typename" } },
                                                      {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                          kind: "NamedType",
                                                          name: { kind: "Name", value: "GadgetObjectFieldConfig" },
                                                        },
                                                        selectionSet: {
                                                          kind: "SelectionSet",
                                                          selections: [
                                                            { kind: "Field", name: { kind: "Name", value: "name" } },
                                                            {
                                                              kind: "Field",
                                                              name: { kind: "Name", value: "fields" },
                                                              selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [
                                                                  {
                                                                    kind: "FragmentSpread",
                                                                    name: { kind: "Name", value: "FieldMetadata" },
                                                                  },
                                                                ],
                                                              },
                                                            },
                                                          ],
                                                        },
                                                      },
                                                    ],
                                                  },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
      {
        kind: "FragmentDefinition",
        name: { kind: "Name", value: "FieldMetadata" },
        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetField" } },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            { kind: "Field", name: { kind: "Name", value: "name" } },
            { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
            { kind: "Field", name: { kind: "Name", value: "fieldType" } },
            { kind: "Field", name: { kind: "Name", value: "requiredArgumentForInput" } },
            {
              kind: "InlineFragment",
              typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetModelField" } },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "sortable" } },
                  { kind: "Field", name: { kind: "Name", value: "filterable" } },
                ],
              },
            },
            {
              kind: "Field",
              name: { kind: "Name", value: "configuration" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "__typename" } },
                  { kind: "Field", name: { kind: "Name", value: "fieldType" } },
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "validations" },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRegexFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "pattern" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRangeFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "min" } },
                              { kind: "Field", name: { kind: "Name", value: "max" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetOnlyImageFileFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "allowAnimatedImages" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetGenericFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyThroughConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "joinModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseJoinModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseRelatedModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        { kind: "Field", name: { kind: "Name", value: "joinModelHasManyFieldApiIdentifier" } },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "isJoinModelHasManyField" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasOneConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetBelongsToConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetEnumConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "allowMultiple" } },
                        { kind: "Field", name: { kind: "Name", value: "allowOther" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "options" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "color" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetDateTimeConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "includeTime" } }] },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetNumberConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "decimals" } }] },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
  },
  PI = {
    kind: "Document",
    definitions: [
      {
        kind: "OperationDefinition",
        operation: "query",
        name: { kind: "Name", value: "GetModelMetadata" },
        variableDefinitions: [
          {
            kind: "VariableDefinition",
            variable: { kind: "Variable", name: { kind: "Name", value: "apiIdentifier" } },
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
          },
          {
            kind: "VariableDefinition",
            variable: { kind: "Variable", name: { kind: "Name", value: "namespace" } },
            type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } },
          },
        ],
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "Field",
              name: { kind: "Name", value: "gadgetMeta" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "modelAndRelatedModels" },
                    arguments: [
                      {
                        kind: "Argument",
                        name: { kind: "Name", value: "apiIdentifier" },
                        value: { kind: "Variable", name: { kind: "Name", value: "apiIdentifier" } },
                      },
                      {
                        kind: "Argument",
                        name: { kind: "Name", value: "namespace" },
                        value: { kind: "Variable", name: { kind: "Name", value: "namespace" } },
                      },
                    ],
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                        { kind: "Field", name: { kind: "Name", value: "namespace" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "fields" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "defaultDisplayField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "fieldType" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
      {
        kind: "FragmentDefinition",
        name: { kind: "Name", value: "FieldMetadata" },
        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetField" } },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            { kind: "Field", name: { kind: "Name", value: "name" } },
            { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
            { kind: "Field", name: { kind: "Name", value: "fieldType" } },
            { kind: "Field", name: { kind: "Name", value: "requiredArgumentForInput" } },
            {
              kind: "InlineFragment",
              typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetModelField" } },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "sortable" } },
                  { kind: "Field", name: { kind: "Name", value: "filterable" } },
                ],
              },
            },
            {
              kind: "Field",
              name: { kind: "Name", value: "configuration" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "__typename" } },
                  { kind: "Field", name: { kind: "Name", value: "fieldType" } },
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "validations" },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRegexFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "pattern" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRangeFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "min" } },
                              { kind: "Field", name: { kind: "Name", value: "max" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetOnlyImageFileFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "allowAnimatedImages" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetGenericFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyThroughConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "joinModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseJoinModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseRelatedModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        { kind: "Field", name: { kind: "Name", value: "joinModelHasManyFieldApiIdentifier" } },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "isJoinModelHasManyField" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasOneConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetBelongsToConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetEnumConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "allowMultiple" } },
                        { kind: "Field", name: { kind: "Name", value: "allowOther" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "options" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "color" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetDateTimeConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "includeTime" } }] },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetNumberConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "decimals" } }] },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
  },
  EI = {
    kind: "Document",
    definitions: [
      {
        kind: "OperationDefinition",
        operation: "query",
        name: { kind: "Name", value: "ModelActionMetadata" },
        variableDefinitions: [
          {
            kind: "VariableDefinition",
            variable: { kind: "Variable", name: { kind: "Name", value: "modelApiIdentifier" } },
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
          },
          {
            kind: "VariableDefinition",
            variable: { kind: "Variable", name: { kind: "Name", value: "modelNamespace" } },
            type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } },
          },
          {
            kind: "VariableDefinition",
            variable: { kind: "Variable", name: { kind: "Name", value: "action" } },
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
          },
        ],
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "Field",
              name: { kind: "Name", value: "gadgetMeta" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "modelAndRelatedModels" },
                    arguments: [
                      {
                        kind: "Argument",
                        name: { kind: "Name", value: "apiIdentifier" },
                        value: { kind: "Variable", name: { kind: "Name", value: "modelApiIdentifier" } },
                      },
                      {
                        kind: "Argument",
                        name: { kind: "Name", value: "namespace" },
                        value: { kind: "Variable", name: { kind: "Name", value: "modelNamespace" } },
                      },
                    ],
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "namespace" } },
                        { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultRecord" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "fields" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                              { kind: "FragmentSpread", name: { kind: "Name", value: "SubFields" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "defaultDisplayField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "fieldType" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "model" },
                    arguments: [
                      {
                        kind: "Argument",
                        name: { kind: "Name", value: "apiIdentifier" },
                        value: { kind: "Variable", name: { kind: "Name", value: "modelApiIdentifier" } },
                      },
                      {
                        kind: "Argument",
                        name: { kind: "Name", value: "namespace" },
                        value: { kind: "Variable", name: { kind: "Name", value: "modelNamespace" } },
                      },
                    ],
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "namespace" } },
                        { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                        { kind: "Field", name: { kind: "Name", value: "defaultRecord" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "action" },
                          arguments: [
                            {
                              kind: "Argument",
                              name: { kind: "Name", value: "apiIdentifier" },
                              value: { kind: "Variable", name: { kind: "Name", value: "action" } },
                            },
                          ],
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "operatesWithRecordIdentity" } },
                              { kind: "Field", name: { kind: "Name", value: "isDeleteAction" } },
                              { kind: "Field", name: { kind: "Name", value: "isUpsertMetaAction" } },
                              {
                                kind: "Field",
                                name: { kind: "Name", value: "inputFields" },
                                selectionSet: {
                                  kind: "SelectionSet",
                                  selections: [
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                                    { kind: "FragmentSpread", name: { kind: "Name", value: "SubFields" } },
                                  ],
                                },
                              },
                              {
                                kind: "Field",
                                name: { kind: "Name", value: "triggers" },
                                selectionSet: {
                                  kind: "SelectionSet",
                                  selections: [{ kind: "Field", name: { kind: "Name", value: "specID" } }],
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
      {
        kind: "FragmentDefinition",
        name: { kind: "Name", value: "FieldMetadata" },
        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetField" } },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            { kind: "Field", name: { kind: "Name", value: "name" } },
            { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
            { kind: "Field", name: { kind: "Name", value: "fieldType" } },
            { kind: "Field", name: { kind: "Name", value: "requiredArgumentForInput" } },
            {
              kind: "InlineFragment",
              typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetModelField" } },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "sortable" } },
                  { kind: "Field", name: { kind: "Name", value: "filterable" } },
                ],
              },
            },
            {
              kind: "Field",
              name: { kind: "Name", value: "configuration" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "__typename" } },
                  { kind: "Field", name: { kind: "Name", value: "fieldType" } },
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "validations" },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRegexFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "pattern" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRangeFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "min" } },
                              { kind: "Field", name: { kind: "Name", value: "max" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetOnlyImageFileFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "allowAnimatedImages" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetGenericFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyThroughConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "joinModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseJoinModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseRelatedModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        { kind: "Field", name: { kind: "Name", value: "joinModelHasManyFieldApiIdentifier" } },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "isJoinModelHasManyField" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasOneConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetBelongsToConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetEnumConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "allowMultiple" } },
                        { kind: "Field", name: { kind: "Name", value: "allowOther" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "options" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "color" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetDateTimeConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "includeTime" } }] },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetNumberConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "decimals" } }] },
                  },
                ],
              },
            },
          ],
        },
      },
      {
        kind: "FragmentDefinition",
        name: { kind: "Name", value: "SubFields" },
        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetField" } },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "Field",
              name: { kind: "Name", value: "configuration" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "__typename" } },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetObjectFieldConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "fields" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                              {
                                kind: "Field",
                                name: { kind: "Name", value: "configuration" },
                                selectionSet: {
                                  kind: "SelectionSet",
                                  selections: [
                                    { kind: "Field", name: { kind: "Name", value: "__typename" } },
                                    {
                                      kind: "InlineFragment",
                                      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetObjectFieldConfig" } },
                                      selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                          { kind: "Field", name: { kind: "Name", value: "name" } },
                                          {
                                            kind: "Field",
                                            name: { kind: "Name", value: "fields" },
                                            selectionSet: {
                                              kind: "SelectionSet",
                                              selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                                                {
                                                  kind: "Field",
                                                  name: { kind: "Name", value: "configuration" },
                                                  selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [
                                                      { kind: "Field", name: { kind: "Name", value: "__typename" } },
                                                      {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                          kind: "NamedType",
                                                          name: { kind: "Name", value: "GadgetObjectFieldConfig" },
                                                        },
                                                        selectionSet: {
                                                          kind: "SelectionSet",
                                                          selections: [
                                                            { kind: "Field", name: { kind: "Name", value: "name" } },
                                                            {
                                                              kind: "Field",
                                                              name: { kind: "Name", value: "fields" },
                                                              selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [
                                                                  {
                                                                    kind: "FragmentSpread",
                                                                    name: { kind: "Name", value: "FieldMetadata" },
                                                                  },
                                                                ],
                                                              },
                                                            },
                                                          ],
                                                        },
                                                      },
                                                    ],
                                                  },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
  },
  DI = {
    kind: "Document",
    definitions: [
      {
        kind: "OperationDefinition",
        operation: "query",
        name: { kind: "Name", value: "GlobalActionMetadata" },
        variableDefinitions: [
          {
            kind: "VariableDefinition",
            variable: { kind: "Variable", name: { kind: "Name", value: "apiIdentifier" } },
            type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } },
          },
          {
            kind: "VariableDefinition",
            variable: { kind: "Variable", name: { kind: "Name", value: "namespace" } },
            type: { kind: "ListType", type: { kind: "NonNullType", type: { kind: "NamedType", name: { kind: "Name", value: "String" } } } },
          },
        ],
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "Field",
              name: { kind: "Name", value: "gadgetMeta" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "globalAction" },
                    arguments: [
                      {
                        kind: "Argument",
                        name: { kind: "Name", value: "apiIdentifier" },
                        value: { kind: "Variable", name: { kind: "Name", value: "apiIdentifier" } },
                      },
                      {
                        kind: "Argument",
                        name: { kind: "Name", value: "namespace" },
                        value: { kind: "Variable", name: { kind: "Name", value: "namespace" } },
                      },
                    ],
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inputFields" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                              { kind: "FragmentSpread", name: { kind: "Name", value: "SubFields" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "triggers" },
                          selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "specID" } }] },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
      {
        kind: "FragmentDefinition",
        name: { kind: "Name", value: "FieldMetadata" },
        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetField" } },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            { kind: "Field", name: { kind: "Name", value: "name" } },
            { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
            { kind: "Field", name: { kind: "Name", value: "fieldType" } },
            { kind: "Field", name: { kind: "Name", value: "requiredArgumentForInput" } },
            {
              kind: "InlineFragment",
              typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetModelField" } },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "sortable" } },
                  { kind: "Field", name: { kind: "Name", value: "filterable" } },
                ],
              },
            },
            {
              kind: "Field",
              name: { kind: "Name", value: "configuration" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "__typename" } },
                  { kind: "Field", name: { kind: "Name", value: "fieldType" } },
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "validations" },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "__typename" } },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRegexFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "pattern" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetRangeFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "min" } },
                              { kind: "Field", name: { kind: "Name", value: "max" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetOnlyImageFileFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                              { kind: "Field", name: { kind: "Name", value: "allowAnimatedImages" } },
                            ],
                          },
                        },
                        {
                          kind: "InlineFragment",
                          typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetGenericFieldValidation" } },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "specID" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyThroughConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "joinModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseJoinModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseRelatedModelField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                        { kind: "Field", name: { kind: "Name", value: "joinModelHasManyFieldApiIdentifier" } },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasManyConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "isJoinModelHasManyField" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetHasOneConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "inverseField" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [{ kind: "Field", name: { kind: "Name", value: "apiIdentifier" } }],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetBelongsToConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "relatedModel" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "key" } },
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "apiIdentifier" } },
                              { kind: "Field", name: { kind: "Name", value: "namespace" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetEnumConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "allowMultiple" } },
                        { kind: "Field", name: { kind: "Name", value: "allowOther" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "options" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "Field", name: { kind: "Name", value: "name" } },
                              { kind: "Field", name: { kind: "Name", value: "color" } },
                            ],
                          },
                        },
                      ],
                    },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetDateTimeConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "includeTime" } }] },
                  },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetNumberConfig" } },
                    selectionSet: { kind: "SelectionSet", selections: [{ kind: "Field", name: { kind: "Name", value: "decimals" } }] },
                  },
                ],
              },
            },
          ],
        },
      },
      {
        kind: "FragmentDefinition",
        name: { kind: "Name", value: "SubFields" },
        typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetField" } },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "Field",
              name: { kind: "Name", value: "configuration" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  { kind: "Field", name: { kind: "Name", value: "__typename" } },
                  {
                    kind: "InlineFragment",
                    typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetObjectFieldConfig" } },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        {
                          kind: "Field",
                          name: { kind: "Name", value: "fields" },
                          selectionSet: {
                            kind: "SelectionSet",
                            selections: [
                              { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                              {
                                kind: "Field",
                                name: { kind: "Name", value: "configuration" },
                                selectionSet: {
                                  kind: "SelectionSet",
                                  selections: [
                                    { kind: "Field", name: { kind: "Name", value: "__typename" } },
                                    {
                                      kind: "InlineFragment",
                                      typeCondition: { kind: "NamedType", name: { kind: "Name", value: "GadgetObjectFieldConfig" } },
                                      selectionSet: {
                                        kind: "SelectionSet",
                                        selections: [
                                          { kind: "Field", name: { kind: "Name", value: "name" } },
                                          {
                                            kind: "Field",
                                            name: { kind: "Name", value: "fields" },
                                            selectionSet: {
                                              kind: "SelectionSet",
                                              selections: [
                                                { kind: "FragmentSpread", name: { kind: "Name", value: "FieldMetadata" } },
                                                {
                                                  kind: "Field",
                                                  name: { kind: "Name", value: "configuration" },
                                                  selectionSet: {
                                                    kind: "SelectionSet",
                                                    selections: [
                                                      { kind: "Field", name: { kind: "Name", value: "__typename" } },
                                                      {
                                                        kind: "InlineFragment",
                                                        typeCondition: {
                                                          kind: "NamedType",
                                                          name: { kind: "Name", value: "GadgetObjectFieldConfig" },
                                                        },
                                                        selectionSet: {
                                                          kind: "SelectionSet",
                                                          selections: [
                                                            { kind: "Field", name: { kind: "Name", value: "name" } },
                                                            {
                                                              kind: "Field",
                                                              name: { kind: "Name", value: "fields" },
                                                              selectionSet: {
                                                                kind: "SelectionSet",
                                                                selections: [
                                                                  {
                                                                    kind: "FragmentSpread",
                                                                    name: { kind: "Name", value: "FieldMetadata" },
                                                                  },
                                                                ],
                                                              },
                                                            },
                                                          ],
                                                        },
                                                      },
                                                    ],
                                                  },
                                                },
                                              ],
                                            },
                                          },
                                        ],
                                      },
                                    },
                                  ],
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
  },
  UI = {
    kind: "Document",
    definitions: [
      {
        kind: "OperationDefinition",
        operation: "query",
        name: { kind: "Name", value: "RolesMetadata" },
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "Field",
              name: { kind: "Name", value: "gadgetMeta" },
              selectionSet: {
                kind: "SelectionSet",
                selections: [
                  {
                    kind: "Field",
                    name: { kind: "Name", value: "roles" },
                    selectionSet: {
                      kind: "SelectionSet",
                      selections: [
                        { kind: "Field", name: { kind: "Name", value: "name" } },
                        { kind: "Field", name: { kind: "Name", value: "key" } },
                        { kind: "Field", name: { kind: "Name", value: "selectable" } },
                      ],
                    },
                  },
                ],
              },
            },
          ],
        },
      },
    ],
  },
  qI = {
    "\n  fragment FieldMetadata on GadgetField {\n    name\n    apiIdentifier\n    fieldType\n    requiredArgumentForInput\n    ... on GadgetModelField {\n      sortable\n      filterable\n    }\n    configuration {\n      __typename\n      fieldType\n      validations {\n        __typename\n        ... on GadgetRegexFieldValidation {\n          name\n          specID\n          pattern\n        }\n        ... on GadgetRangeFieldValidation {\n          name\n          specID\n          min\n          max\n        }\n        ... on GadgetOnlyImageFileFieldValidation {\n          name\n          specID\n          allowAnimatedImages\n        }\n        ... on GadgetGenericFieldValidation {\n          name\n          specID\n        }\n      }\n      ... on GadgetHasManyThroughConfig {\n        relatedModel {\n          key\n          name\n          apiIdentifier\n          namespace\n        }\n        inverseField {\n          apiIdentifier\n        }\n        joinModel {\n          key\n          apiIdentifier\n          namespace\n        }\n        inverseJoinModelField {\n          apiIdentifier\n        }\n        inverseRelatedModelField {\n          apiIdentifier\n        }\n        joinModelHasManyFieldApiIdentifier\n      }\n      ... on GadgetHasManyConfig {\n        isJoinModelHasManyField\n        relatedModel {\n          key\n          name\n          apiIdentifier\n          namespace\n        }\n        inverseField {\n          apiIdentifier\n        }\n      }\n      ... on GadgetHasOneConfig {\n        relatedModel {\n          key\n          name\n          apiIdentifier\n          namespace\n        }\n        inverseField {\n          apiIdentifier\n        }\n      }\n      ... on GadgetBelongsToConfig {\n        relatedModel {\n          key\n          name\n          apiIdentifier\n          namespace\n        }\n      }\n      ... on GadgetEnumConfig {\n        allowMultiple\n        allowOther\n        options {\n          name\n          color\n        }\n      }\n      ... on GadgetDateTimeConfig {\n        includeTime\n      }\n      ... on GadgetNumberConfig {\n        decimals\n      }\n    }\n  }\n":
      BI,
    "\n  query GetModelMetadata($apiIdentifier: String!, $namespace: [String!]) {\n    gadgetMeta {\n      modelAndRelatedModels(apiIdentifier: $apiIdentifier, namespace: $namespace) {\n        key\n        apiIdentifier\n        namespace\n        name\n        fields {\n          ...FieldMetadata\n        }\n        defaultDisplayField {\n          name\n          apiIdentifier\n          fieldType\n        }\n      }\n    }\n  }\n":
      PI,
    "\n  fragment SubFields on GadgetField {\n    configuration {\n      __typename\n      ... on GadgetObjectFieldConfig {\n        name\n        fields {\n          ...FieldMetadata\n          configuration {\n            __typename\n            ... on GadgetObjectFieldConfig {\n              name\n              fields {\n                ...FieldMetadata\n                configuration {\n                  __typename\n                  ... on GadgetObjectFieldConfig {\n                    name\n                    fields {\n                      ...FieldMetadata\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n":
      CI,
    "\n  query ModelActionMetadata($modelApiIdentifier: String!, $modelNamespace: [String!], $action: String!) {\n    gadgetMeta {\n      modelAndRelatedModels(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {\n        key\n        name\n        namespace\n        apiIdentifier\n        defaultRecord\n        fields {\n          ...FieldMetadata\n          ...SubFields\n        }\n        defaultDisplayField {\n          name\n          apiIdentifier\n          fieldType\n        }\n      }\n      model(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {\n        key\n        name\n        namespace\n        apiIdentifier\n        defaultRecord\n        action(apiIdentifier: $action) {\n          name\n          apiIdentifier\n          operatesWithRecordIdentity\n          isDeleteAction\n          isUpsertMetaAction\n          inputFields {\n            ...FieldMetadata\n            ...SubFields\n          }\n          triggers {\n            specID\n          }\n        }\n      }\n    }\n  }\n":
      EI,
    "\n  query GlobalActionMetadata($apiIdentifier: String!, $namespace: [String!]) {\n    gadgetMeta {\n      globalAction(apiIdentifier: $apiIdentifier, namespace: $namespace) {\n        name\n        apiIdentifier\n        inputFields {\n          ...FieldMetadata\n          ...SubFields\n        }\n        triggers {\n          specID\n        }\n      }\n    }\n  }\n":
      DI,
    "\n  query RolesMetadata {\n    gadgetMeta {\n      roles {\n        name\n        key\n        selectable\n      }\n    }\n  }\n": UI,
  };
function Is(e) {
  return qI[e] ?? {};
}
const X = ee;
Is(`
  fragment FieldMetadata on GadgetField {
    name
    apiIdentifier
    fieldType
    requiredArgumentForInput
    ... on GadgetModelField {
      sortable
      filterable
    }
    configuration {
      __typename
      fieldType
      validations {
        __typename
        ... on GadgetRegexFieldValidation {
          name
          specID
          pattern
        }
        ... on GadgetRangeFieldValidation {
          name
          specID
          min
          max
        }
        ... on GadgetOnlyImageFileFieldValidation {
          name
          specID
          allowAnimatedImages
        }
        ... on GadgetGenericFieldValidation {
          name
          specID
        }
      }
      ... on GadgetHasManyThroughConfig {
        relatedModel {
          key
          name
          apiIdentifier
          namespace
        }
        inverseField {
          apiIdentifier
        }
        joinModel {
          key
          apiIdentifier
          namespace
        }
        inverseJoinModelField {
          apiIdentifier
        }
        inverseRelatedModelField {
          apiIdentifier
        }
        joinModelHasManyFieldApiIdentifier
      }
      ... on GadgetHasManyConfig {
        isJoinModelHasManyField
        relatedModel {
          key
          name
          apiIdentifier
          namespace
        }
        inverseField {
          apiIdentifier
        }
      }
      ... on GadgetHasOneConfig {
        relatedModel {
          key
          name
          apiIdentifier
          namespace
        }
        inverseField {
          apiIdentifier
        }
      }
      ... on GadgetBelongsToConfig {
        relatedModel {
          key
          name
          apiIdentifier
          namespace
        }
      }
      ... on GadgetEnumConfig {
        allowMultiple
        allowOther
        options {
          name
          color
        }
      }
      ... on GadgetDateTimeConfig {
        includeTime
      }
      ... on GadgetNumberConfig {
        decimals
      }
    }
  }
`);
const VI = Is(`
  query GetModelMetadata($apiIdentifier: String!, $namespace: [String!]) {
    gadgetMeta {
      modelAndRelatedModels(apiIdentifier: $apiIdentifier, namespace: $namespace) {
        key
        apiIdentifier
        namespace
        name
        fields {
          ...FieldMetadata
        }
        defaultDisplayField {
          name
          apiIdentifier
          fieldType
        }
      }
    }
  }
`);
Is(`
  fragment SubFields on GadgetField {
    configuration {
      __typename
      ... on GadgetObjectFieldConfig {
        name
        fields {
          ...FieldMetadata
          configuration {
            __typename
            ... on GadgetObjectFieldConfig {
              name
              fields {
                ...FieldMetadata
                configuration {
                  __typename
                  ... on GadgetObjectFieldConfig {
                    name
                    fields {
                      ...FieldMetadata
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
`);
const _I = Is(`
  query ModelActionMetadata($modelApiIdentifier: String!, $modelNamespace: [String!], $action: String!) {
    gadgetMeta {
      modelAndRelatedModels(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {
        key
        name
        namespace
        apiIdentifier
        defaultRecord
        fields {
          ...FieldMetadata
          ...SubFields
        }
        defaultDisplayField {
          name
          apiIdentifier
          fieldType
        }
      }
      model(apiIdentifier: $modelApiIdentifier, namespace: $modelNamespace) {
        key
        name
        namespace
        apiIdentifier
        defaultRecord
        action(apiIdentifier: $action) {
          name
          apiIdentifier
          operatesWithRecordIdentity
          isDeleteAction
          isUpsertMetaAction
          inputFields {
            ...FieldMetadata
            ...SubFields
          }
          triggers {
            specID
          }
        }
      }
    }
  }
`),
  $I = Is(`
  query GlobalActionMetadata($apiIdentifier: String!, $namespace: [String!]) {
    gadgetMeta {
      globalAction(apiIdentifier: $apiIdentifier, namespace: $namespace) {
        name
        apiIdentifier
        inputFields {
          ...FieldMetadata
          ...SubFields
        }
        triggers {
          specID
        }
      }
    }
  }
`),
  GI = Is(`
  query RolesMetadata {
    gadgetMeta {
      roles {
        name
        key
        selectable
      }
    }
  }
`),
  dg = (e) => {
    const t = {};
    for (const n of e) t[n.key] = n;
    const i = (n) => {
      for (const a of n)
        "relatedModel" in a.configuration &&
          a.configuration.relatedModel &&
          (a.configuration.relatedModel = t[a.configuration.relatedModel.key]),
          "joinModel" in a.configuration && a.configuration.joinModel && (a.configuration.joinModel = t[a.configuration.joinModel.key]),
          a.configuration.__typename == "GadgetObjectFieldConfig" && "fields" in a.configuration && i(a.configuration.fields);
    };
    for (const n of e) i(n.fields), "action" in n && n.action && i(n.action.inputFields);
    return e[0];
  },
  G5 = (e, t) => {
    const [{ data: i, fetching: n, error: a }] = Nd({ query: VI, variables: { apiIdentifier: e, namespace: t } });
    return {
      metadata: i && mt(dg(i.gadgetMeta.modelAndRelatedModels), "no model metadata found in response from Gadget API"),
      fetching: n,
      error: a ? Ka.forClientSideError(a) : void 0,
    };
  },
  jI = (e, t) => {
    let i = e;
    if (t.namespace) for (const n of Array.isArray(t.namespace) ? t.namespace : [t.namespace]) i = i[n];
    for (const [n, a] of Object.entries(i)) if (a === t) return n;
    throw new Error("global action function not found on model manager");
  },
  j5 = (e) => {
    var l;
    const t = jy();
    let i, n;
    if (e.type === "globalAction") (i = $I), (n = { apiIdentifier: jI(t, e), namespace: e.namespace });
    else if (e.type === "action") {
      i = _I;
      const d = mt(OI(t, e.modelApiIdentifier, e.namespace), "no model manager found for action function");
      let u;
      const f = Object.getPrototypeOf(d);
      for (const [p, m] of Object.entries(f))
        if (m === e) {
          u = p;
          break;
        }
      if (!u && ((u = e.operationName.slice(0, -e.modelApiIdentifier.length)), !u || !(u in d)))
        throw new Error("action function not found on model manager");
      n = { modelApiIdentifier: e.modelApiIdentifier, modelNamespace: e.namespace, action: u };
    } else throw new Error("Invalid action function type");
    const [{ data: a, fetching: r, error: o }] = Nd({ query: i, variables: n });
    let s;
    if (a && !o)
      if ("globalAction" in a.gadgetMeta) s = mt(a.gadgetMeta.globalAction, "no global action metadata found from Gadget API");
      else {
        const d = a;
        mt((l = d.gadgetMeta.model) == null ? void 0 : l.action, "no model metadata found from Gadget API");
        const f = [{ ...d.gadgetMeta.model, ...d.gadgetMeta.modelAndRelatedModels[0] }, ...d.gadgetMeta.modelAndRelatedModels.slice(1)];
        s = dg(f);
      }
    return { metadata: s, fetching: r, error: o ? Ka.forClientSideError(o) : void 0 };
  },
  uf = (e, t) => {
    var a, r;
    if (!e) return [];
    let i = e.map((o) => [o.apiIdentifier, o]);
    if (t != null && t.include && t != null && t.exclude)
      throw new Error("Cannot use both 'include' and 'exclude' options at the same time");
    if (t != null && t.include) {
      i = [];
      const o = Pu(t.include);
      for (const [s, l] of Object.entries(o)) {
        const d = e.find((u) => u.apiIdentifier === s);
        if (d) {
          if (
            (i.push([s, d]), l.length > 0 && "relatedModel" in d.configuration && (a = d.configuration.relatedModel) != null && a.fields)
          ) {
            const u = uf(d.configuration.relatedModel.fields, { include: l });
            i.push(...u.map(([f, p]) => [`${s}.${f}`, p]));
          }
          if (l.length > 0 && "joinModel" in d.configuration && (r = d.configuration.joinModel) != null && r.fields) {
            const u = Pu(l);
            for (const [f, p] of Object.entries(u))
              if (d.configuration.joinModel.apiIdentifier === f) {
                const m = uf(d.configuration.joinModel.fields, { include: p });
                i.push(...m.map(([h, k]) => [`${s}.${f}.${h}`, k]));
              }
          }
        }
      }
    }
    if (t != null && t.exclude) {
      const o = new Set(t.exclude);
      i = i.filter(([s, l]) => !o.has(l.apiIdentifier));
    }
    i = i.filter(([o, s]) => !HI(s));
    const n = i.filter(([o, s]) => (t != null && t.isUpsertAction ? LI(s) : ug(s)));
    return t != null && t.include ? n : n.filter(([o, s]) => zI(s));
  },
  zI = (e) => {
    const t = e.configuration && "relatedModel" in e.configuration && e.configuration.relatedModel && e.configuration.relatedModel.key;
    return typeof t == "string" ? !WI.has(t) : !0;
  },
  WI = new Set(["DataModel-Shopify-Shop"]),
  ug = (e) => QI.has(e.fieldType),
  LI = (e) => e.fieldType === X.Id || ug(e),
  HI = (e) => e.fieldType === X.HasMany && e.configuration.__typename === "GadgetHasManyConfig" && e.configuration.isJoinModelHasManyField,
  QI = new Set([
    X.Boolean,
    X.Color,
    X.Computed,
    X.DateTime,
    X.Email,
    X.EncryptedString,
    X.Enum,
    X.File,
    X.Json,
    X.Number,
    X.Password,
    X.RichText,
    X.RoleAssignments,
    X.String,
    X.Url,
    X.Vector,
    X.RichText,
    X.BelongsTo,
    X.HasMany,
    X.HasOne,
    X.HasManyThrough,
  ]),
  cf = (e) => {
    let t = e;
    return (
      (t = t.filter((i) => i.fieldType !== ee.HasOne && i.fieldType !== ee.HasMany && i.fieldType !== ee.BelongsTo)),
      t.filter((i) => cg.has(i.fieldType))
    );
  },
  cg = new Set([
    X.Id,
    X.Boolean,
    X.Color,
    X.Computed,
    X.DateTime,
    X.Email,
    X.EncryptedString,
    X.Enum,
    X.File,
    X.Json,
    X.Number,
    X.RichText,
    X.RoleAssignments,
    X.String,
    X.Url,
    X.RichText,
    X.BelongsTo,
    X.HasMany,
    X.HasManyThrough,
    X.HasOne,
  ]),
  z5 = () => {
    const [{ data: e, fetching: t, error: i }] = Nd({ query: GI });
    return { roles: e == null ? void 0 : e.gadgetMeta.roles, fetching: t, error: i ? Ka.forClientSideError(i) : void 0 };
  },
  W5 = (e) => "action" in e,
  L5 = (e, t, i, n) => {
    const a = { targetColumns: [], fieldMetadataTree: Uu(e), defaultSelection: n };
    if (t && i) throw new Error("Cannot use both 'columns' and 'excludeColumns' options at the same time");
    if (t) a.targetColumns = t;
    else if (i) {
      const r = new Set(i);
      a.targetColumns = cf(e)
        .filter((o) => !r.has(o.apiIdentifier))
        .map((o) => o.apiIdentifier);
    } else {
      const r = new Set(Object.keys(n));
      a.targetColumns = cf(e.filter((o) => r.has(o.apiIdentifier))).map((o) => o.apiIdentifier);
    }
    return a;
  },
  H5 = (e) => {
    let t = { id: !0 };
    for (const i of e.targetColumns) {
      if (Rc(i)) {
        t = { ...t, ...e.defaultSelection };
        continue;
      }
      const { field: n } = Bc(i),
        a = n.split("."),
        r = n.split(".")[0];
      let o = 0;
      for (let s = 0; s < a.length; s++) {
        if (s < o) continue;
        o = s + 1;
        const l = a.slice(0, s + 1).join("."),
          d = s === a.length - 1,
          u = yg(e.fieldMetadataTree, l);
        if (!u) {
          if (s >= 1) {
            const m = ql(a.slice(s).join(".")),
              h = sl(e.fieldMetadataTree, r);
            if (hs(h)) throw new Error(m.RELATED_HAS_ONE_OR_BELONGS_TO_FIELD_NOT_EXIST);
            if (Co(h)) throw new Error(m.RELATED_HAS_MANY_FIELD_NOT_EXIST);
          }
          throw new Error(ql(l).NOT_EXIST);
        }
        const f = hs(u),
          p = Co(u);
        if (!cg.has(u.fieldType)) throw new Error(`Field '${n}' cannot be shown in the table`);
        if (f || p) {
          const m = Eu(l, "id", u);
          nu(t, m, !0);
          const h = d ? Cc(e.fieldMetadataTree, l) : void 0;
          if (h) {
            nu(t, Eu(l, h.apiIdentifier, u), Du(h));
            continue;
          }
          if (f) continue;
          if (a[s + 1] === "edges" && a[s + 2] === "node" && a[s + 3]) {
            o = s + 3;
            continue;
          }
          throw new Error(ql(a.slice(s + 1).join(".")).RELATED_HAS_MANY_FIELD_NOT_EXIST);
        }
        nu(t, l, Du(u));
      }
    }
    return t;
  },
  Q5 = (e, t, i) => i.map((n, a) => ZI(e, t, n, a)),
  Z5 = (e) => {
    var i;
    const t = [];
    for (const [n, a] of e.targetColumns.entries()) {
      if (Rc(a)) {
        const h = crypto.randomUUID();
        t.push({
          identifier: h,
          render: a.render,
          header: a.header,
          field: a.header,
          type: "CustomRenderer",
          sortable: !1,
          style: a.style,
        });
        continue;
      }
      const { header: r, field: o, sortable: s, style: l } = Bc(a),
        { firstField: d, targetField: u, isHasManyOrHasManyThrough: f, isHasOneOrBelongsTo: p } = pg(e.fieldMetadataTree, o),
        m = {
          identifier: o,
          header: r ?? d.name,
          field: o,
          type: u.fieldType,
          sortable: pf({ fieldMetadata: { ...u, apiIdentifier: o }, sortable: s, isRelationshipField: p || f }),
          style: l,
        };
      if (p || f) {
        const h = Cc(e.fieldMetadataTree, o);
        h &&
          ((m.type = h.fieldType), (m.sortable = pf({ fieldMetadata: { ...h, apiIdentifier: o }, sortable: s, isRelationshipField: !0 }))),
          (m.relationshipType = d.fieldType);
      }
      ((i = u.configuration) == null ? void 0 : i.__typename) === "GadgetDateTimeConfig" && (m.includeTime = u.configuration.includeTime),
        t.push(m);
    }
    return t;
  },
  ZI = (e, t, i, n) => {
    var r, o;
    const a = { id: i.id };
    for (const s of t)
      if (s.type === "CustomRenderer") {
        const l = s.render;
        if (!l) throw new Error(`Custom cell renderer for column with header'${s.header}' is invalid`);
        a[s.identifier] = c.createElement(l, { record: i, index: n });
        continue;
      }
    for (const s of e.targetColumns) {
      if (Rc(s)) continue;
      const { field: l } = Bc(s),
        { firstPathSegment: d, targetField: u, isHasManyOrHasManyThrough: f, isHasOneOrBelongsTo: p } = pg(e.fieldMetadataTree, l);
      if (p || f) {
        const m = Cc(e.fieldMetadataTree, l) ?? u;
        f
          ? (a[l] = (r = Zs(i, d)) == null ? void 0 : r.edges.map((h) => h.node[m.apiIdentifier]))
          : (a[l] = (o = Zs(i, d)) == null ? void 0 : o[m.apiIdentifier]);
      } else a[l] = Zs(i, l);
    }
    return a;
  },
  pg = (e, t) => {
    const i = t.split(".")[0],
      n = sl(e, i),
      a = sl(e, t),
      r = hs(n),
      o = Co(n);
    return { firstPathSegment: i, firstField: n, targetField: a, isHasOneOrBelongsTo: r, isHasManyOrHasManyThrough: o };
  },
  Rc = (e) => typeof e == "object" && e !== null && "render" in e,
  Bc = (e) => {
    if (typeof e == "string") return { field: e };
    if (typeof e == "object" && e !== null && "field" in e && typeof e.field == "string") return e;
    throw new Error(`Invalid column value: ${JSON.stringify(e)}`);
  },
  pf = (e) => {
    const { fieldMetadata: t, sortable: i, isRelationshipField: n } = e,
      a = n !== !0 && "sortable" in t && !!t.sortable;
    if (i && !a) throw new Error(`Field '${t.apiIdentifier}' is not sortable`);
    return i ?? a;
  },
  Eu = (e, t, i) => (Co(i) ? `${e}.edges.node.${t}` : `${e}.${t}`),
  fg = (e) => e.fieldType === ee.BelongsTo,
  hs = (e) => e.fieldType === ee.HasOne || fg(e),
  mg = (e) => e.fieldType === ee.HasMany,
  JI = (e) => e.fieldType === ee.HasManyThrough,
  Co = (e) => mg(e) || JI(e),
  YI = (e) => hs(e) || Co(e),
  XI = { markdown: !0, truncatedHTML: !0 },
  KI = { url: !0, mimeType: !0, fileName: !0 },
  e2 = { key: !0, name: !0 },
  Du = (e, t = !1) => {
    if (e.__typename !== "GadgetModelField" && t) return !1;
    switch (e.fieldType) {
      case ee.RichText:
        return XI;
      case ee.File:
        return KI;
      case ee.RoleAssignments:
        return e2;
      case ee.Password:
        return !1;
      default:
        return !0;
    }
  },
  Cc = (e, t) => {
    const i = sl(e, t),
      n = t2(i);
    if (n) {
      const a = Eu(t, n.defaultDisplayField.apiIdentifier, i);
      return sl(e, a);
    }
  },
  Uu = (e, t = 0) => {
    t += 1;
    const i = {},
      n = (a) => {
        var r;
        return "configuration" in a ? ((r = a.configuration.relatedModel) == null ? void 0 : r.fields) ?? [] : [];
      };
    for (const a of e)
      (i[a.apiIdentifier] = {}),
        hs(a) && t < 3
          ? (i[a.apiIdentifier] = { $field: a, ...Uu(n(a), t) })
          : Co(a) && t < 3
          ? (i[a.apiIdentifier] = { $field: a, edges: { node: Uu(n(a), t) } })
          : (i[a.apiIdentifier] = a);
    return i;
  },
  yg = (e, t) => {
    const i = Zs(e, t);
    return i ? ("$field" in i ? i.$field : i) : void 0;
  },
  sl = (e, t) => {
    const i = yg(e, t);
    if (!i) throw new Error(ql(t).NOT_EXIST);
    return i;
  },
  t2 = (e) => {
    if ((hs(e) || Co(e)) && "configuration" in e) return e.configuration.relatedModel;
  },
  ql = (e) => ({
    NOT_EXIST: `Field '${e}' does not exist in the model`,
    RELATED_HAS_MANY_FIELD_NOT_EXIST: `Field '${e}' does not exist in the related model. hasMany fields require 'edges.node' segment before the related field.`,
    RELATED_HAS_ONE_OR_BELONGS_TO_FIELD_NOT_EXIST: `Field '${e}' does not exist in the related model`,
  }),
  au = (e, t, i) => {
    const n = { id: !0 },
      a = Pu(t, !1);
    for (const [r, o] of Object.entries(a)) {
      const s = i.find((l) => l.apiIdentifier == r);
      if (!s) throw new Error(`No metadata found for ${r}`);
      if (YI(s)) {
        const l = s.configuration;
        if (l && "joinModel" in l && l.joinModel) {
          const d = l.joinModel,
            u = l.relatedModel,
            f = l.joinModelHasManyFieldApiIdentifier,
            p = o.filter((k) => k.startsWith(`${d.apiIdentifier}.`)).map((k) => k.replace(`${d.apiIdentifier}.`, "")),
            m = o.filter((k) => !k.startsWith(`${d.apiIdentifier}.`));
          let h = {};
          u && (h = { id: !0, [u.defaultDisplayField.apiIdentifier]: !0, ...(o.length && u.fields ? au(r, m, u.fields) : {}) }),
            (n[f] = {
              edges: {
                node: {
                  id: !0,
                  [d.defaultDisplayField.apiIdentifier]: !0,
                  ...(p.length && d.fields ? au(d.apiIdentifier, p, d.fields) : {}),
                  [l.inverseRelatedModelField.apiIdentifier]: h,
                },
              },
            });
        } else if (l && "relatedModel" in l && l.relatedModel) {
          const d = l.relatedModel,
            u = {
              id: !0,
              [d == null ? void 0 : d.defaultDisplayField.apiIdentifier]: !0,
              ...(o.length && d.fields ? au(r, o, d.fields) : {}),
            };
          mg(s) ? (n[s.apiIdentifier] = { edges: { node: u } }) : ((n[s.apiIdentifier] = u), fg(s) && (n[`${s.apiIdentifier}Id`] = !0));
        }
      } else n[s.apiIdentifier] = Du(s, !0);
    }
    return n;
  };
function Eo(e) {
  (this._maxSize = e), this.clear();
}
Eo.prototype.clear = function () {
  (this._size = 0), (this._values = Object.create(null));
};
Eo.prototype.get = function (e) {
  return this._values[e];
};
Eo.prototype.set = function (e, t) {
  return this._size >= this._maxSize && this.clear(), e in this._values || this._size++, (this._values[e] = t);
};
var i2 = /[^.^\]^[]+|(?=\[\]|\.\.)/g,
  gg = /^\d+$/,
  n2 = /^\d/,
  a2 = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g,
  r2 = /^\s*(['"]?)(.*?)(\1)\s*$/,
  Pc = 512,
  ff = new Eo(Pc),
  mf = new Eo(Pc),
  yf = new Eo(Pc),
  To = {
    Cache: Eo,
    split: qu,
    normalizePath: ru,
    setter: function (e) {
      var t = ru(e);
      return (
        mf.get(e) ||
        mf.set(e, function (n, a) {
          for (var r = 0, o = t.length, s = n; r < o - 1; ) {
            var l = t[r];
            if (l === "__proto__" || l === "constructor" || l === "prototype") return n;
            s = s[t[r++]];
          }
          s[t[r]] = a;
        })
      );
    },
    getter: function (e, t) {
      var i = ru(e);
      return (
        yf.get(e) ||
        yf.set(e, function (a) {
          for (var r = 0, o = i.length; r < o; )
            if (a != null || !t) a = a[i[r++]];
            else return;
          return a;
        })
      );
    },
    join: function (e) {
      return e.reduce(function (t, i) {
        return t + (Ec(i) || gg.test(i) ? "[" + i + "]" : (t ? "." : "") + i);
      }, "");
    },
    forEach: function (e, t, i) {
      o2(Array.isArray(e) ? e : qu(e), t, i);
    },
  };
function ru(e) {
  return (
    ff.get(e) ||
    ff.set(
      e,
      qu(e).map(function (t) {
        return t.replace(r2, "$2");
      })
    )
  );
}
function qu(e) {
  return e.match(i2) || [""];
}
function o2(e, t, i) {
  var n = e.length,
    a,
    r,
    o,
    s;
  for (r = 0; r < n; r++)
    (a = e[r]), a && (d2(a) && (a = '"' + a + '"'), (s = Ec(a)), (o = !s && /^\d+$/.test(a)), t.call(i, a, s, o, r, e));
}
function Ec(e) {
  return typeof e == "string" && e && ["'", '"'].indexOf(e.charAt(0)) !== -1;
}
function s2(e) {
  return e.match(n2) && !e.match(gg);
}
function l2(e) {
  return a2.test(e);
}
function d2(e) {
  return !Ec(e) && (s2(e) || l2(e));
}
const u2 =
    /[A-Z\xc0-\xd6\xd8-\xde]?[a-z\xdf-\xf6\xf8-\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde]|$)|(?:[A-Z\xc0-\xd6\xd8-\xde]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde](?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])|$)|[A-Z\xc0-\xd6\xd8-\xde]?(?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\xc0-\xd6\xd8-\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\d*(?:1ST|2ND|3RD|(?![123])\dTH)(?=\b|[a-z_])|\d*(?:1st|2nd|3rd|(?![123])\dth)(?=\b|[A-Z_])|\d+|(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?(?:\u200d(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?)*/g,
  Ad = (e) => e.match(u2) || [],
  Fd = (e) => e[0].toUpperCase() + e.slice(1),
  Dc = (e, t) => Ad(e).join(t).toLowerCase(),
  hg = (e) => Ad(e).reduce((t, i) => `${t}${t ? i[0].toUpperCase() + i.slice(1).toLowerCase() : i.toLowerCase()}`, ""),
  c2 = (e) => Fd(hg(e)),
  p2 = (e) => Dc(e, "_"),
  f2 = (e) => Dc(e, "-"),
  m2 = (e) => Fd(Dc(e, " ")),
  y2 = (e) => Ad(e).map(Fd).join(" ");
var ou = { words: Ad, upperFirst: Fd, camelCase: hg, pascalCase: c2, snakeCase: p2, kebabCase: f2, sentenceCase: m2, titleCase: y2 },
  Uc = { exports: {} };
Uc.exports = function (e) {
  return bg(g2(e), e);
};
Uc.exports.array = bg;
function bg(e, t) {
  var i = e.length,
    n = new Array(i),
    a = {},
    r = i,
    o = h2(t),
    s = b2(e);
  for (
    t.forEach(function (d) {
      if (!s.has(d[0]) || !s.has(d[1])) throw new Error("Unknown node. There is an unknown node in the supplied edges.");
    });
    r--;

  )
    a[r] || l(e[r], r, new Set());
  return n;
  function l(d, u, f) {
    if (f.has(d)) {
      var p;
      try {
        p = ", node was:" + JSON.stringify(d);
      } catch {
        p = "";
      }
      throw new Error("Cyclic dependency" + p);
    }
    if (!s.has(d)) throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(d));
    if (!a[u]) {
      a[u] = !0;
      var m = o.get(d) || new Set();
      if (((m = Array.from(m)), (u = m.length))) {
        f.add(d);
        do {
          var h = m[--u];
          l(h, s.get(h), f);
        } while (u);
        f.delete(d);
      }
      n[--i] = d;
    }
  }
}
function g2(e) {
  for (var t = new Set(), i = 0, n = e.length; i < n; i++) {
    var a = e[i];
    t.add(a[0]), t.add(a[1]);
  }
  return Array.from(t);
}
function h2(e) {
  for (var t = new Map(), i = 0, n = e.length; i < n; i++) {
    var a = e[i];
    t.has(a[0]) || t.set(a[0], new Set()), t.has(a[1]) || t.set(a[1], new Set()), t.get(a[0]).add(a[1]);
  }
  return t;
}
function b2(e) {
  for (var t = new Map(), i = 0, n = e.length; i < n; i++) t.set(e[i], i);
  return t;
}
var v2 = Uc.exports;
const I2 = Lu(v2),
  S2 = Object.prototype.toString,
  k2 = Error.prototype.toString,
  N2 = RegExp.prototype.toString,
  A2 = typeof Symbol < "u" ? Symbol.prototype.toString : () => "",
  F2 = /^Symbol\((.*)\)(.*)$/;
function w2(e) {
  return e != +e ? "NaN" : e === 0 && 1 / e < 0 ? "-0" : "" + e;
}
function gf(e, t = !1) {
  if (e == null || e === !0 || e === !1) return "" + e;
  const i = typeof e;
  if (i === "number") return w2(e);
  if (i === "string") return t ? `"${e}"` : e;
  if (i === "function") return "[Function " + (e.name || "anonymous") + "]";
  if (i === "symbol") return A2.call(e).replace(F2, "Symbol($1)");
  const n = S2.call(e).slice(8, -1);
  return n === "Date"
    ? isNaN(e.getTime())
      ? "" + e
      : e.toISOString(e)
    : n === "Error" || e instanceof Error
    ? "[" + k2.call(e) + "]"
    : n === "RegExp"
    ? N2.call(e)
    : null;
}
function Sr(e, t) {
  let i = gf(e, t);
  return i !== null
    ? i
    : JSON.stringify(
        e,
        function (n, a) {
          let r = gf(this[n], t);
          return r !== null ? r : a;
        },
        2
      );
}
function vg(e) {
  return e == null ? [] : [].concat(e);
}
let Ig,
  Sg,
  kg,
  x2 = /\$\{\s*(\w+)\s*\}/g;
Ig = Symbol.toStringTag;
class hf {
  constructor(t, i, n, a) {
    (this.name = void 0),
      (this.message = void 0),
      (this.value = void 0),
      (this.path = void 0),
      (this.type = void 0),
      (this.params = void 0),
      (this.errors = void 0),
      (this.inner = void 0),
      (this[Ig] = "Error"),
      (this.name = "ValidationError"),
      (this.value = i),
      (this.path = n),
      (this.type = a),
      (this.errors = []),
      (this.inner = []),
      vg(t).forEach((r) => {
        if (fn.isError(r)) {
          this.errors.push(...r.errors);
          const o = r.inner.length ? r.inner : [r];
          this.inner.push(...o);
        } else this.errors.push(r);
      }),
      (this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0]);
  }
}
Sg = Symbol.hasInstance;
kg = Symbol.toStringTag;
class fn extends Error {
  static formatError(t, i) {
    const n = i.label || i.path || "this";
    return (
      n !== i.path && (i = Object.assign({}, i, { path: n })),
      typeof t == "string" ? t.replace(x2, (a, r) => Sr(i[r])) : typeof t == "function" ? t(i) : t
    );
  }
  static isError(t) {
    return t && t.name === "ValidationError";
  }
  constructor(t, i, n, a, r) {
    const o = new hf(t, i, n, a);
    if (r) return o;
    super(),
      (this.value = void 0),
      (this.path = void 0),
      (this.type = void 0),
      (this.params = void 0),
      (this.errors = []),
      (this.inner = []),
      (this[kg] = "Error"),
      (this.name = o.name),
      (this.message = o.message),
      (this.type = o.type),
      (this.value = o.value),
      (this.path = o.path),
      (this.errors = o.errors),
      (this.inner = o.inner),
      Error.captureStackTrace && Error.captureStackTrace(this, fn);
  }
  static [Sg](t) {
    return hf[Symbol.hasInstance](t) || super[Symbol.hasInstance](t);
  }
}
let Ya = {
    default: "${path} is invalid",
    required: "${path} is a required field",
    defined: "${path} must be defined",
    notNull: "${path} cannot be null",
    oneOf: "${path} must be one of the following values: ${values}",
    notOneOf: "${path} must not be one of the following values: ${values}",
    notType: ({ path: e, type: t, value: i, originalValue: n }) => {
      const a = n != null && n !== i ? ` (cast from the value \`${Sr(n, !0)}\`).` : ".";
      return t !== "mixed"
        ? `${e} must be a \`${t}\` type, but the final value was: \`${Sr(i, !0)}\`` + a
        : `${e} must match the configured type. The validated value was: \`${Sr(i, !0)}\`` + a;
    },
  },
  cn = {
    length: "${path} must be exactly ${length} characters",
    min: "${path} must be at least ${min} characters",
    max: "${path} must be at most ${max} characters",
    matches: '${path} must match the following: "${regex}"',
    email: "${path} must be a valid email",
    url: "${path} must be a valid URL",
    uuid: "${path} must be a valid UUID",
    datetime: "${path} must be a valid ISO date-time",
    datetime_precision: "${path} must be a valid ISO date-time with a sub-second precision of exactly ${precision} digits",
    datetime_offset: '${path} must be a valid ISO date-time with UTC "Z" timezone',
    trim: "${path} must be a trimmed string",
    lowercase: "${path} must be a lowercase string",
    uppercase: "${path} must be a upper case string",
  },
  to = {
    min: "${path} must be greater than or equal to ${min}",
    max: "${path} must be less than or equal to ${max}",
    lessThan: "${path} must be less than ${less}",
    moreThan: "${path} must be greater than ${more}",
    positive: "${path} must be a positive number",
    negative: "${path} must be a negative number",
    integer: "${path} must be an integer",
  },
  Vu = { min: "${path} field must be later than ${min}", max: "${path} field must be at earlier than ${max}" },
  _u = { isValue: "${path} field must be ${value}" },
  $u = { noUnknown: "${path} field has unspecified keys: ${unknown}" },
  Vl = {
    min: "${path} field must have at least ${min} items",
    max: "${path} field must have less than or equal to ${max} items",
    length: "${path} must have ${length} items",
  },
  T2 = {
    notType: (e) => {
      const { path: t, value: i, spec: n } = e,
        a = n.types.length;
      if (Array.isArray(i)) {
        if (i.length < a)
          return `${t} tuple value has too few items, expected a length of ${a} but got ${i.length} for value: \`${Sr(i, !0)}\``;
        if (i.length > a)
          return `${t} tuple value has too many items, expected a length of ${a} but got ${i.length} for value: \`${Sr(i, !0)}\``;
      }
      return fn.formatError(Ya.notType, e);
    },
  };
Object.assign(Object.create(null), { mixed: Ya, string: cn, number: to, date: Vu, object: $u, array: Vl, boolean: _u, tuple: T2 });
const wd = (e) => e && e.__isYupSchema__;
class nd {
  static fromOptions(t, i) {
    if (!i.then && !i.otherwise) throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
    let { is: n, then: a, otherwise: r } = i,
      o = typeof n == "function" ? n : (...s) => s.every((l) => l === n);
    return new nd(t, (s, l) => {
      var d;
      let u = o(...s) ? a : r;
      return (d = u == null ? void 0 : u(l)) != null ? d : l;
    });
  }
  constructor(t, i) {
    (this.fn = void 0), (this.refs = t), (this.refs = t), (this.fn = i);
  }
  resolve(t, i) {
    let n = this.refs.map((r) => r.getValue(i == null ? void 0 : i.value, i == null ? void 0 : i.parent, i == null ? void 0 : i.context)),
      a = this.fn(n, t, i);
    if (a === void 0 || a === t) return t;
    if (!wd(a)) throw new TypeError("conditions must return a schema object");
    return a.resolve(i);
  }
}
const Ol = { context: "$", value: "." };
class Do {
  constructor(t, i = {}) {
    if (
      ((this.key = void 0),
      (this.isContext = void 0),
      (this.isValue = void 0),
      (this.isSibling = void 0),
      (this.path = void 0),
      (this.getter = void 0),
      (this.map = void 0),
      typeof t != "string")
    )
      throw new TypeError("ref must be a string, got: " + t);
    if (((this.key = t.trim()), t === "")) throw new TypeError("ref must be a non-empty string");
    (this.isContext = this.key[0] === Ol.context),
      (this.isValue = this.key[0] === Ol.value),
      (this.isSibling = !this.isContext && !this.isValue);
    let n = this.isContext ? Ol.context : this.isValue ? Ol.value : "";
    (this.path = this.key.slice(n.length)), (this.getter = this.path && To.getter(this.path, !0)), (this.map = i.map);
  }
  getValue(t, i, n) {
    let a = this.isContext ? n : this.isValue ? t : i;
    return this.getter && (a = this.getter(a || {})), this.map && (a = this.map(a)), a;
  }
  cast(t, i) {
    return this.getValue(t, i == null ? void 0 : i.parent, i == null ? void 0 : i.context);
  }
  resolve() {
    return this;
  }
  describe() {
    return { type: "ref", key: this.key };
  }
  toString() {
    return `Ref(${this.key})`;
  }
  static isRef(t) {
    return t && t.__isYupRef;
  }
}
Do.prototype.__isYupRef = !0;
const la = (e) => e == null;
function Go(e) {
  function t({ value: i, path: n = "", options: a, originalValue: r, schema: o }, s, l) {
    const { name: d, test: u, params: f, message: p, skipAbsent: m } = e;
    let { parent: h, context: k, abortEarly: x = o.spec.abortEarly, disableStackTrace: T = o.spec.disableStackTrace } = a;
    function y(U) {
      return Do.isRef(U) ? U.getValue(i, h, k) : U;
    }
    function v(U = {}) {
      const P = Object.assign(
        { value: i, originalValue: r, label: o.spec.label, path: U.path || n, spec: o.spec, disableStackTrace: U.disableStackTrace || T },
        f,
        U.params
      );
      for (const E of Object.keys(P)) P[E] = y(P[E]);
      const z = new fn(fn.formatError(U.message || p, P), i, P.path, U.type || d, P.disableStackTrace);
      return (z.params = P), z;
    }
    const S = x ? s : l;
    let F = { path: n, parent: h, type: d, from: a.from, createError: v, resolve: y, options: a, originalValue: r, schema: o };
    const w = (U) => {
        fn.isError(U) ? S(U) : U ? l(null) : S(v());
      },
      M = (U) => {
        fn.isError(U) ? S(U) : s(U);
      };
    if (m && la(i)) return w(!0);
    let $;
    try {
      var L;
      if ((($ = u.call(F, i, F)), typeof ((L = $) == null ? void 0 : L.then) == "function")) {
        if (a.sync)
          throw new Error(
            `Validation test of type: "${F.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`
          );
        return Promise.resolve($).then(w, M);
      }
    } catch (U) {
      M(U);
      return;
    }
    w($);
  }
  return (t.OPTIONS = e), t;
}
function M2(e, t, i, n = i) {
  let a, r, o;
  return t
    ? (To.forEach(t, (s, l, d) => {
        let u = l ? s.slice(1, s.length - 1) : s;
        e = e.resolve({ context: n, parent: a, value: i });
        let f = e.type === "tuple",
          p = d ? parseInt(u, 10) : 0;
        if (e.innerType || f) {
          if (f && !d)
            throw new Error(
              `Yup.reach cannot implicitly index into a tuple type. the path part "${o}" must contain an index to the tuple element, e.g. "${o}[0]"`
            );
          if (i && p >= i.length)
            throw new Error(
              `Yup.reach cannot resolve an array item at index: ${s}, in the path: ${t}. because there is no value at that index. `
            );
          (a = i), (i = i && i[p]), (e = f ? e.spec.types[p] : e.innerType);
        }
        if (!d) {
          if (!e.fields || !e.fields[u])
            throw new Error(`The schema does not contain the path: ${t}. (failed at: ${o} which is a type: "${e.type}")`);
          (a = i), (i = i && i[u]), (e = e.fields[u]);
        }
        (r = u), (o = l ? "[" + s + "]" : "." + s);
      }),
      { schema: e, parent: a, parentPath: r })
    : { parent: a, parentPath: t, schema: e };
}
class ad extends Set {
  describe() {
    const t = [];
    for (const i of this.values()) t.push(Do.isRef(i) ? i.describe() : i);
    return t;
  }
  resolveAll(t) {
    let i = [];
    for (const n of this.values()) i.push(t(n));
    return i;
  }
  clone() {
    return new ad(this.values());
  }
  merge(t, i) {
    const n = this.clone();
    return t.forEach((a) => n.add(a)), i.forEach((a) => n.delete(a)), n;
  }
}
function as(e, t = new Map()) {
  if (wd(e) || !e || typeof e != "object") return e;
  if (t.has(e)) return t.get(e);
  let i;
  if (e instanceof Date) (i = new Date(e.getTime())), t.set(e, i);
  else if (e instanceof RegExp) (i = new RegExp(e)), t.set(e, i);
  else if (Array.isArray(e)) {
    (i = new Array(e.length)), t.set(e, i);
    for (let n = 0; n < e.length; n++) i[n] = as(e[n], t);
  } else if (e instanceof Map) {
    (i = new Map()), t.set(e, i);
    for (const [n, a] of e.entries()) i.set(n, as(a, t));
  } else if (e instanceof Set) {
    (i = new Set()), t.set(e, i);
    for (const n of e) i.add(as(n, t));
  } else if (e instanceof Object) {
    (i = {}), t.set(e, i);
    for (const [n, a] of Object.entries(e)) i[n] = as(a, t);
  } else throw Error(`Unable to clone ${e}`);
  return i;
}
class gn {
  constructor(t) {
    (this.type = void 0),
      (this.deps = []),
      (this.tests = void 0),
      (this.transforms = void 0),
      (this.conditions = []),
      (this._mutate = void 0),
      (this.internalTests = {}),
      (this._whitelist = new ad()),
      (this._blacklist = new ad()),
      (this.exclusiveTests = Object.create(null)),
      (this._typeCheck = void 0),
      (this.spec = void 0),
      (this.tests = []),
      (this.transforms = []),
      this.withMutation(() => {
        this.typeError(Ya.notType);
      }),
      (this.type = t.type),
      (this._typeCheck = t.check),
      (this.spec = Object.assign(
        { strip: !1, strict: !1, abortEarly: !0, recursive: !0, disableStackTrace: !1, nullable: !1, optional: !0, coerce: !0 },
        t == null ? void 0 : t.spec
      )),
      this.withMutation((i) => {
        i.nonNullable();
      });
  }
  get _type() {
    return this.type;
  }
  clone(t) {
    if (this._mutate) return t && Object.assign(this.spec, t), this;
    const i = Object.create(Object.getPrototypeOf(this));
    return (
      (i.type = this.type),
      (i._typeCheck = this._typeCheck),
      (i._whitelist = this._whitelist.clone()),
      (i._blacklist = this._blacklist.clone()),
      (i.internalTests = Object.assign({}, this.internalTests)),
      (i.exclusiveTests = Object.assign({}, this.exclusiveTests)),
      (i.deps = [...this.deps]),
      (i.conditions = [...this.conditions]),
      (i.tests = [...this.tests]),
      (i.transforms = [...this.transforms]),
      (i.spec = as(Object.assign({}, this.spec, t))),
      i
    );
  }
  label(t) {
    let i = this.clone();
    return (i.spec.label = t), i;
  }
  meta(...t) {
    if (t.length === 0) return this.spec.meta;
    let i = this.clone();
    return (i.spec.meta = Object.assign(i.spec.meta || {}, t[0])), i;
  }
  withMutation(t) {
    let i = this._mutate;
    this._mutate = !0;
    let n = t(this);
    return (this._mutate = i), n;
  }
  concat(t) {
    if (!t || t === this) return this;
    if (t.type !== this.type && this.type !== "mixed")
      throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${t.type}`);
    let i = this,
      n = t.clone();
    const a = Object.assign({}, i.spec, n.spec);
    return (
      (n.spec = a),
      (n.internalTests = Object.assign({}, i.internalTests, n.internalTests)),
      (n._whitelist = i._whitelist.merge(t._whitelist, t._blacklist)),
      (n._blacklist = i._blacklist.merge(t._blacklist, t._whitelist)),
      (n.tests = i.tests),
      (n.exclusiveTests = i.exclusiveTests),
      n.withMutation((r) => {
        t.tests.forEach((o) => {
          r.test(o.OPTIONS);
        });
      }),
      (n.transforms = [...i.transforms, ...n.transforms]),
      n
    );
  }
  isType(t) {
    return t == null ? !!((this.spec.nullable && t === null) || (this.spec.optional && t === void 0)) : this._typeCheck(t);
  }
  resolve(t) {
    let i = this;
    if (i.conditions.length) {
      let n = i.conditions;
      (i = i.clone()), (i.conditions = []), (i = n.reduce((a, r) => r.resolve(a, t), i)), (i = i.resolve(t));
    }
    return i;
  }
  resolveOptions(t) {
    var i, n, a, r;
    return Object.assign({}, t, {
      from: t.from || [],
      strict: (i = t.strict) != null ? i : this.spec.strict,
      abortEarly: (n = t.abortEarly) != null ? n : this.spec.abortEarly,
      recursive: (a = t.recursive) != null ? a : this.spec.recursive,
      disableStackTrace: (r = t.disableStackTrace) != null ? r : this.spec.disableStackTrace,
    });
  }
  cast(t, i = {}) {
    let n = this.resolve(Object.assign({ value: t }, i)),
      a = i.assert === "ignore-optionality",
      r = n._cast(t, i);
    if (i.assert !== !1 && !n.isType(r)) {
      if (a && la(r)) return r;
      let o = Sr(t),
        s = Sr(r);
      throw new TypeError(
        `The value of ${i.path || "field"} could not be cast to a value that satisfies the schema type: "${n.type}". 

attempted value: ${o} 
` + (s !== o ? `result of cast: ${s}` : "")
      );
    }
    return r;
  }
  _cast(t, i) {
    let n = t === void 0 ? t : this.transforms.reduce((a, r) => r.call(this, a, t, this), t);
    return n === void 0 && (n = this.getDefault(i)), n;
  }
  _validate(t, i = {}, n, a) {
    let { path: r, originalValue: o = t, strict: s = this.spec.strict } = i,
      l = t;
    s || (l = this._cast(l, Object.assign({ assert: !1 }, i)));
    let d = [];
    for (let u of Object.values(this.internalTests)) u && d.push(u);
    this.runTests({ path: r, value: l, originalValue: o, options: i, tests: d }, n, (u) => {
      if (u.length) return a(u, l);
      this.runTests({ path: r, value: l, originalValue: o, options: i, tests: this.tests }, n, a);
    });
  }
  runTests(t, i, n) {
    let a = !1,
      { tests: r, value: o, originalValue: s, path: l, options: d } = t,
      u = (k) => {
        a || ((a = !0), i(k, o));
      },
      f = (k) => {
        a || ((a = !0), n(k, o));
      },
      p = r.length,
      m = [];
    if (!p) return f([]);
    let h = { value: o, originalValue: s, path: l, options: d, schema: this };
    for (let k = 0; k < r.length; k++) {
      const x = r[k];
      x(h, u, function (y) {
        y && (Array.isArray(y) ? m.push(...y) : m.push(y)), --p <= 0 && f(m);
      });
    }
  }
  asNestedTest({ key: t, index: i, parent: n, parentPath: a, originalParent: r, options: o }) {
    const s = t ?? i;
    if (s == null) throw TypeError("Must include `key` or `index` for nested validations");
    const l = typeof s == "number";
    let d = n[s];
    const u = Object.assign({}, o, {
      strict: !0,
      parent: n,
      value: d,
      originalValue: r[s],
      key: void 0,
      [l ? "index" : "key"]: s,
      path: l || s.includes(".") ? `${a || ""}[${l ? s : `"${s}"`}]` : (a ? `${a}.` : "") + t,
    });
    return (f, p, m) => this.resolve(u)._validate(d, u, p, m);
  }
  validate(t, i) {
    var n;
    let a = this.resolve(Object.assign({}, i, { value: t })),
      r = (n = i == null ? void 0 : i.disableStackTrace) != null ? n : a.spec.disableStackTrace;
    return new Promise((o, s) =>
      a._validate(
        t,
        i,
        (l, d) => {
          fn.isError(l) && (l.value = d), s(l);
        },
        (l, d) => {
          l.length ? s(new fn(l, d, void 0, void 0, r)) : o(d);
        }
      )
    );
  }
  validateSync(t, i) {
    var n;
    let a = this.resolve(Object.assign({}, i, { value: t })),
      r,
      o = (n = i == null ? void 0 : i.disableStackTrace) != null ? n : a.spec.disableStackTrace;
    return (
      a._validate(
        t,
        Object.assign({}, i, { sync: !0 }),
        (s, l) => {
          throw (fn.isError(s) && (s.value = l), s);
        },
        (s, l) => {
          if (s.length) throw new fn(s, t, void 0, void 0, o);
          r = l;
        }
      ),
      r
    );
  }
  isValid(t, i) {
    return this.validate(t, i).then(
      () => !0,
      (n) => {
        if (fn.isError(n)) return !1;
        throw n;
      }
    );
  }
  isValidSync(t, i) {
    try {
      return this.validateSync(t, i), !0;
    } catch (n) {
      if (fn.isError(n)) return !1;
      throw n;
    }
  }
  _getDefault(t) {
    let i = this.spec.default;
    return i == null ? i : typeof i == "function" ? i.call(this, t) : as(i);
  }
  getDefault(t) {
    return this.resolve(t || {})._getDefault(t);
  }
  default(t) {
    return arguments.length === 0 ? this._getDefault() : this.clone({ default: t });
  }
  strict(t = !0) {
    return this.clone({ strict: t });
  }
  nullability(t, i) {
    const n = this.clone({ nullable: t });
    return (
      (n.internalTests.nullable = Go({
        message: i,
        name: "nullable",
        test(a) {
          return a === null ? this.schema.spec.nullable : !0;
        },
      })),
      n
    );
  }
  optionality(t, i) {
    const n = this.clone({ optional: t });
    return (
      (n.internalTests.optionality = Go({
        message: i,
        name: "optionality",
        test(a) {
          return a === void 0 ? this.schema.spec.optional : !0;
        },
      })),
      n
    );
  }
  optional() {
    return this.optionality(!0);
  }
  defined(t = Ya.defined) {
    return this.optionality(!1, t);
  }
  nullable() {
    return this.nullability(!0);
  }
  nonNullable(t = Ya.notNull) {
    return this.nullability(!1, t);
  }
  required(t = Ya.required) {
    return this.clone().withMutation((i) => i.nonNullable(t).defined(t));
  }
  notRequired() {
    return this.clone().withMutation((t) => t.nullable().optional());
  }
  transform(t) {
    let i = this.clone();
    return i.transforms.push(t), i;
  }
  test(...t) {
    let i;
    if (
      (t.length === 1
        ? typeof t[0] == "function"
          ? (i = { test: t[0] })
          : (i = t[0])
        : t.length === 2
        ? (i = { name: t[0], test: t[1] })
        : (i = { name: t[0], message: t[1], test: t[2] }),
      i.message === void 0 && (i.message = Ya.default),
      typeof i.test != "function")
    )
      throw new TypeError("`test` is a required parameters");
    let n = this.clone(),
      a = Go(i),
      r = i.exclusive || (i.name && n.exclusiveTests[i.name] === !0);
    if (i.exclusive && !i.name) throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
    return (
      i.name && (n.exclusiveTests[i.name] = !!i.exclusive),
      (n.tests = n.tests.filter((o) => !(o.OPTIONS.name === i.name && (r || o.OPTIONS.test === a.OPTIONS.test)))),
      n.tests.push(a),
      n
    );
  }
  when(t, i) {
    !Array.isArray(t) && typeof t != "string" && ((i = t), (t = "."));
    let n = this.clone(),
      a = vg(t).map((r) => new Do(r));
    return (
      a.forEach((r) => {
        r.isSibling && n.deps.push(r.key);
      }),
      n.conditions.push(typeof i == "function" ? new nd(a, i) : nd.fromOptions(a, i)),
      n
    );
  }
  typeError(t) {
    let i = this.clone();
    return (
      (i.internalTests.typeError = Go({
        message: t,
        name: "typeError",
        skipAbsent: !0,
        test(n) {
          return this.schema._typeCheck(n) ? !0 : this.createError({ params: { type: this.schema.type } });
        },
      })),
      i
    );
  }
  oneOf(t, i = Ya.oneOf) {
    let n = this.clone();
    return (
      t.forEach((a) => {
        n._whitelist.add(a), n._blacklist.delete(a);
      }),
      (n.internalTests.whiteList = Go({
        message: i,
        name: "oneOf",
        skipAbsent: !0,
        test(a) {
          let r = this.schema._whitelist,
            o = r.resolveAll(this.resolve);
          return o.includes(a) ? !0 : this.createError({ params: { values: Array.from(r).join(", "), resolved: o } });
        },
      })),
      n
    );
  }
  notOneOf(t, i = Ya.notOneOf) {
    let n = this.clone();
    return (
      t.forEach((a) => {
        n._blacklist.add(a), n._whitelist.delete(a);
      }),
      (n.internalTests.blacklist = Go({
        message: i,
        name: "notOneOf",
        test(a) {
          let r = this.schema._blacklist,
            o = r.resolveAll(this.resolve);
          return o.includes(a) ? this.createError({ params: { values: Array.from(r).join(", "), resolved: o } }) : !0;
        },
      })),
      n
    );
  }
  strip(t = !0) {
    let i = this.clone();
    return (i.spec.strip = t), i;
  }
  describe(t) {
    const i = (t ? this.resolve(t) : this).clone(),
      { label: n, meta: a, optional: r, nullable: o } = i.spec;
    return {
      meta: a,
      label: n,
      optional: r,
      nullable: o,
      default: i.getDefault(t),
      type: i.type,
      oneOf: i._whitelist.describe(),
      notOneOf: i._blacklist.describe(),
      tests: i.tests
        .map((l) => ({ name: l.OPTIONS.name, params: l.OPTIONS.params }))
        .filter((l, d, u) => u.findIndex((f) => f.name === l.name) === d),
    };
  }
}
gn.prototype.__isYupSchema__ = !0;
for (const e of ["validate", "validateSync"])
  gn.prototype[`${e}At`] = function (t, i, n = {}) {
    const { parent: a, parentPath: r, schema: o } = M2(this, t, i, n.context);
    return o[e](a && a[r], Object.assign({}, n, { parent: a, path: t }));
  };
for (const e of ["equals", "is"]) gn.prototype[e] = gn.prototype.oneOf;
for (const e of ["not", "nope"]) gn.prototype[e] = gn.prototype.notOneOf;
const O2 = () => !0;
function _l(e) {
  return new rd(e);
}
class rd extends gn {
  constructor(t) {
    super(typeof t == "function" ? { type: "mixed", check: t } : Object.assign({ type: "mixed", check: O2 }, t));
  }
}
_l.prototype = rd.prototype;
function Ng() {
  return new Ag();
}
class Ag extends gn {
  constructor() {
    super({
      type: "boolean",
      check(t) {
        return t instanceof Boolean && (t = t.valueOf()), typeof t == "boolean";
      },
    }),
      this.withMutation(() => {
        this.transform((t, i, n) => {
          if (n.spec.coerce && !n.isType(t)) {
            if (/^(true|1)$/i.test(String(t))) return !0;
            if (/^(false|0)$/i.test(String(t))) return !1;
          }
          return t;
        });
      });
  }
  isTrue(t = _u.isValue) {
    return this.test({
      message: t,
      name: "is-value",
      exclusive: !0,
      params: { value: "true" },
      test(i) {
        return la(i) || i === !0;
      },
    });
  }
  isFalse(t = _u.isValue) {
    return this.test({
      message: t,
      name: "is-value",
      exclusive: !0,
      params: { value: "false" },
      test(i) {
        return la(i) || i === !1;
      },
    });
  }
  default(t) {
    return super.default(t);
  }
  defined(t) {
    return super.defined(t);
  }
  optional() {
    return super.optional();
  }
  required(t) {
    return super.required(t);
  }
  notRequired() {
    return super.notRequired();
  }
  nullable() {
    return super.nullable();
  }
  nonNullable(t) {
    return super.nonNullable(t);
  }
  strip(t) {
    return super.strip(t);
  }
}
Ng.prototype = Ag.prototype;
const R2 =
  /^(\d{4}|[+-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,.](\d{1,}))?)?(?:(Z)|([+-])(\d{2})(?::?(\d{2}))?)?)?$/;
function B2(e) {
  const t = Gu(e);
  if (!t) return Date.parse ? Date.parse(e) : Number.NaN;
  if (t.z === void 0 && t.plusMinus === void 0)
    return new Date(t.year, t.month, t.day, t.hour, t.minute, t.second, t.millisecond).valueOf();
  let i = 0;
  return (
    t.z !== "Z" && t.plusMinus !== void 0 && ((i = t.hourOffset * 60 + t.minuteOffset), t.plusMinus === "+" && (i = 0 - i)),
    Date.UTC(t.year, t.month, t.day, t.hour, t.minute + i, t.second, t.millisecond)
  );
}
function Gu(e) {
  var t, i;
  const n = R2.exec(e);
  return n
    ? {
        year: dr(n[1]),
        month: dr(n[2], 1) - 1,
        day: dr(n[3], 1),
        hour: dr(n[4]),
        minute: dr(n[5]),
        second: dr(n[6]),
        millisecond: n[7] ? dr(n[7].substring(0, 3)) : 0,
        precision: (t = (i = n[7]) == null ? void 0 : i.length) != null ? t : void 0,
        z: n[8] || void 0,
        plusMinus: n[9] || void 0,
        hourOffset: dr(n[10]),
        minuteOffset: dr(n[11]),
      }
    : null;
}
function dr(e, t = 0) {
  return Number(e) || t;
}
let C2 =
    /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,
  P2 =
    /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,
  E2 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,
  D2 = "^\\d{4}-\\d{2}-\\d{2}",
  U2 = "\\d{2}:\\d{2}:\\d{2}",
  q2 = "(([+-]\\d{2}(:?\\d{2})?)|Z)",
  V2 = new RegExp(`${D2}T${U2}(\\.\\d+)?${q2}$`),
  _2 = (e) => la(e) || e === e.trim(),
  $2 = {}.toString();
function sa() {
  return new od();
}
class od extends gn {
  constructor() {
    super({
      type: "string",
      check(t) {
        return t instanceof String && (t = t.valueOf()), typeof t == "string";
      },
    }),
      this.withMutation(() => {
        this.transform((t, i, n) => {
          if (!n.spec.coerce || n.isType(t) || Array.isArray(t)) return t;
          const a = t != null && t.toString ? t.toString() : t;
          return a === $2 ? t : a;
        });
      });
  }
  required(t) {
    return super
      .required(t)
      .withMutation((i) => i.test({ message: t || Ya.required, name: "required", skipAbsent: !0, test: (n) => !!n.length }));
  }
  notRequired() {
    return super.notRequired().withMutation((t) => ((t.tests = t.tests.filter((i) => i.OPTIONS.name !== "required")), t));
  }
  length(t, i = cn.length) {
    return this.test({
      message: i,
      name: "length",
      exclusive: !0,
      params: { length: t },
      skipAbsent: !0,
      test(n) {
        return n.length === this.resolve(t);
      },
    });
  }
  min(t, i = cn.min) {
    return this.test({
      message: i,
      name: "min",
      exclusive: !0,
      params: { min: t },
      skipAbsent: !0,
      test(n) {
        return n.length >= this.resolve(t);
      },
    });
  }
  max(t, i = cn.max) {
    return this.test({
      name: "max",
      exclusive: !0,
      message: i,
      params: { max: t },
      skipAbsent: !0,
      test(n) {
        return n.length <= this.resolve(t);
      },
    });
  }
  matches(t, i) {
    let n = !1,
      a,
      r;
    return (
      i && (typeof i == "object" ? ({ excludeEmptyString: n = !1, message: a, name: r } = i) : (a = i)),
      this.test({
        name: r || "matches",
        message: a || cn.matches,
        params: { regex: t },
        skipAbsent: !0,
        test: (o) => (o === "" && n) || o.search(t) !== -1,
      })
    );
  }
  email(t = cn.email) {
    return this.matches(C2, { name: "email", message: t, excludeEmptyString: !0 });
  }
  url(t = cn.url) {
    return this.matches(P2, { name: "url", message: t, excludeEmptyString: !0 });
  }
  uuid(t = cn.uuid) {
    return this.matches(E2, { name: "uuid", message: t, excludeEmptyString: !1 });
  }
  datetime(t) {
    let i = "",
      n,
      a;
    return (
      t && (typeof t == "object" ? ({ message: i = "", allowOffset: n = !1, precision: a = void 0 } = t) : (i = t)),
      this.matches(V2, { name: "datetime", message: i || cn.datetime, excludeEmptyString: !0 })
        .test({
          name: "datetime_offset",
          message: i || cn.datetime_offset,
          params: { allowOffset: n },
          skipAbsent: !0,
          test: (r) => {
            if (!r || n) return !0;
            const o = Gu(r);
            return o ? !!o.z : !1;
          },
        })
        .test({
          name: "datetime_precision",
          message: i || cn.datetime_precision,
          params: { precision: a },
          skipAbsent: !0,
          test: (r) => {
            if (!r || a == null) return !0;
            const o = Gu(r);
            return o ? o.precision === a : !1;
          },
        })
    );
  }
  ensure() {
    return this.default("").transform((t) => (t === null ? "" : t));
  }
  trim(t = cn.trim) {
    return this.transform((i) => (i != null ? i.trim() : i)).test({ message: t, name: "trim", test: _2 });
  }
  lowercase(t = cn.lowercase) {
    return this.transform((i) => (la(i) ? i : i.toLowerCase())).test({
      message: t,
      name: "string_case",
      exclusive: !0,
      skipAbsent: !0,
      test: (i) => la(i) || i === i.toLowerCase(),
    });
  }
  uppercase(t = cn.uppercase) {
    return this.transform((i) => (la(i) ? i : i.toUpperCase())).test({
      message: t,
      name: "string_case",
      exclusive: !0,
      skipAbsent: !0,
      test: (i) => la(i) || i === i.toUpperCase(),
    });
  }
}
sa.prototype = od.prototype;
let G2 = (e) => e != +e;
function ju() {
  return new qc();
}
class qc extends gn {
  constructor() {
    super({
      type: "number",
      check(t) {
        return t instanceof Number && (t = t.valueOf()), typeof t == "number" && !G2(t);
      },
    }),
      this.withMutation(() => {
        this.transform((t, i, n) => {
          if (!n.spec.coerce) return t;
          let a = t;
          if (typeof a == "string") {
            if (((a = a.replace(/\s/g, "")), a === "")) return NaN;
            a = +a;
          }
          return n.isType(a) || a === null ? a : parseFloat(a);
        });
      });
  }
  min(t, i = to.min) {
    return this.test({
      message: i,
      name: "min",
      exclusive: !0,
      params: { min: t },
      skipAbsent: !0,
      test(n) {
        return n >= this.resolve(t);
      },
    });
  }
  max(t, i = to.max) {
    return this.test({
      message: i,
      name: "max",
      exclusive: !0,
      params: { max: t },
      skipAbsent: !0,
      test(n) {
        return n <= this.resolve(t);
      },
    });
  }
  lessThan(t, i = to.lessThan) {
    return this.test({
      message: i,
      name: "max",
      exclusive: !0,
      params: { less: t },
      skipAbsent: !0,
      test(n) {
        return n < this.resolve(t);
      },
    });
  }
  moreThan(t, i = to.moreThan) {
    return this.test({
      message: i,
      name: "min",
      exclusive: !0,
      params: { more: t },
      skipAbsent: !0,
      test(n) {
        return n > this.resolve(t);
      },
    });
  }
  positive(t = to.positive) {
    return this.moreThan(0, t);
  }
  negative(t = to.negative) {
    return this.lessThan(0, t);
  }
  integer(t = to.integer) {
    return this.test({ name: "integer", message: t, skipAbsent: !0, test: (i) => Number.isInteger(i) });
  }
  truncate() {
    return this.transform((t) => (la(t) ? t : t | 0));
  }
  round(t) {
    var i;
    let n = ["ceil", "floor", "round", "trunc"];
    if (((t = ((i = t) == null ? void 0 : i.toLowerCase()) || "round"), t === "trunc")) return this.truncate();
    if (n.indexOf(t.toLowerCase()) === -1) throw new TypeError("Only valid options for round() are: " + n.join(", "));
    return this.transform((a) => (la(a) ? a : Math[t](a)));
  }
}
ju.prototype = qc.prototype;
let Fg = new Date(""),
  j2 = (e) => Object.prototype.toString.call(e) === "[object Date]";
function Vc() {
  return new gl();
}
class gl extends gn {
  constructor() {
    super({
      type: "date",
      check(t) {
        return j2(t) && !isNaN(t.getTime());
      },
    }),
      this.withMutation(() => {
        this.transform((t, i, n) =>
          !n.spec.coerce || n.isType(t) || t === null ? t : ((t = B2(t)), isNaN(t) ? gl.INVALID_DATE : new Date(t))
        );
      });
  }
  prepareParam(t, i) {
    let n;
    if (Do.isRef(t)) n = t;
    else {
      let a = this.cast(t);
      if (!this._typeCheck(a)) throw new TypeError(`\`${i}\` must be a Date or a value that can be \`cast()\` to a Date`);
      n = a;
    }
    return n;
  }
  min(t, i = Vu.min) {
    let n = this.prepareParam(t, "min");
    return this.test({
      message: i,
      name: "min",
      exclusive: !0,
      params: { min: t },
      skipAbsent: !0,
      test(a) {
        return a >= this.resolve(n);
      },
    });
  }
  max(t, i = Vu.max) {
    let n = this.prepareParam(t, "max");
    return this.test({
      message: i,
      name: "max",
      exclusive: !0,
      params: { max: t },
      skipAbsent: !0,
      test(a) {
        return a <= this.resolve(n);
      },
    });
  }
}
gl.INVALID_DATE = Fg;
Vc.prototype = gl.prototype;
Vc.INVALID_DATE = Fg;
function z2(e, t = []) {
  let i = [],
    n = new Set(),
    a = new Set(t.map(([o, s]) => `${o}-${s}`));
  function r(o, s) {
    let l = To.split(o)[0];
    n.add(l), a.has(`${s}-${l}`) || i.push([s, l]);
  }
  for (const o of Object.keys(e)) {
    let s = e[o];
    n.add(o), Do.isRef(s) && s.isSibling ? r(s.path, o) : wd(s) && "deps" in s && s.deps.forEach((l) => r(l, o));
  }
  return I2.array(Array.from(n), i).reverse();
}
function bf(e, t) {
  let i = 1 / 0;
  return (
    e.some((n, a) => {
      var r;
      if ((r = t.path) != null && r.includes(n)) return (i = a), !0;
    }),
    i
  );
}
function wg(e) {
  return (t, i) => bf(e, t) - bf(e, i);
}
const xg = (e, t, i) => {
  if (typeof e != "string") return e;
  let n = e;
  try {
    n = JSON.parse(e);
  } catch {}
  return i.isType(n) ? n : e;
};
function $l(e) {
  if ("fields" in e) {
    const t = {};
    for (const [i, n] of Object.entries(e.fields)) t[i] = $l(n);
    return e.setFields(t);
  }
  if (e.type === "array") {
    const t = e.optional();
    return t.innerType && (t.innerType = $l(t.innerType)), t;
  }
  return e.type === "tuple" ? e.optional().clone({ types: e.spec.types.map($l) }) : "optional" in e ? e.optional() : e;
}
const W2 = (e, t) => {
  const i = [...To.normalizePath(t)];
  if (i.length === 1) return i[0] in e;
  let n = i.pop(),
    a = To.getter(To.join(i), !0)(e);
  return !!(a && n in a);
};
let vf = (e) => Object.prototype.toString.call(e) === "[object Object]";
function L2(e, t) {
  let i = Object.keys(e.fields);
  return Object.keys(t).filter((n) => i.indexOf(n) === -1);
}
const H2 = wg([]);
function ll(e) {
  return new Tg(e);
}
class Tg extends gn {
  constructor(t) {
    super({
      type: "object",
      check(i) {
        return vf(i) || typeof i == "function";
      },
    }),
      (this.fields = Object.create(null)),
      (this._sortErrors = H2),
      (this._nodes = []),
      (this._excludedEdges = []),
      this.withMutation(() => {
        t && this.shape(t);
      });
  }
  _cast(t, i = {}) {
    var n;
    let a = super._cast(t, i);
    if (a === void 0) return this.getDefault(i);
    if (!this._typeCheck(a)) return a;
    let r = this.fields,
      o = (n = i.stripUnknown) != null ? n : this.spec.noUnknown,
      s = [].concat(
        this._nodes,
        Object.keys(a).filter((f) => !this._nodes.includes(f))
      ),
      l = {},
      d = Object.assign({}, i, { parent: l, __validating: i.__validating || !1 }),
      u = !1;
    for (const f of s) {
      let p = r[f],
        m = f in a;
      if (p) {
        let h,
          k = a[f];
        (d.path = (i.path ? `${i.path}.` : "") + f), (p = p.resolve({ value: k, context: i.context, parent: l }));
        let x = p instanceof gn ? p.spec : void 0,
          T = x == null ? void 0 : x.strict;
        if (x != null && x.strip) {
          u = u || f in a;
          continue;
        }
        (h = !i.__validating || !T ? p.cast(a[f], d) : a[f]), h !== void 0 && (l[f] = h);
      } else m && !o && (l[f] = a[f]);
      (m !== f in l || l[f] !== a[f]) && (u = !0);
    }
    return u ? l : a;
  }
  _validate(t, i = {}, n, a) {
    let { from: r = [], originalValue: o = t, recursive: s = this.spec.recursive } = i;
    (i.from = [{ schema: this, value: o }, ...r]),
      (i.__validating = !0),
      (i.originalValue = o),
      super._validate(t, i, n, (l, d) => {
        if (!s || !vf(d)) {
          a(l, d);
          return;
        }
        o = o || d;
        let u = [];
        for (let f of this._nodes) {
          let p = this.fields[f];
          !p || Do.isRef(p) || u.push(p.asNestedTest({ options: i, key: f, parent: d, parentPath: i.path, originalParent: o }));
        }
        this.runTests({ tests: u, value: d, originalValue: o, options: i }, n, (f) => {
          a(f.sort(this._sortErrors).concat(l), d);
        });
      });
  }
  clone(t) {
    const i = super.clone(t);
    return (
      (i.fields = Object.assign({}, this.fields)),
      (i._nodes = this._nodes),
      (i._excludedEdges = this._excludedEdges),
      (i._sortErrors = this._sortErrors),
      i
    );
  }
  concat(t) {
    let i = super.concat(t),
      n = i.fields;
    for (let [a, r] of Object.entries(this.fields)) {
      const o = n[a];
      n[a] = o === void 0 ? r : o;
    }
    return i.withMutation((a) => a.setFields(n, [...this._excludedEdges, ...t._excludedEdges]));
  }
  _getDefault(t) {
    if ("default" in this.spec) return super._getDefault(t);
    if (!this._nodes.length) return;
    let i = {};
    return (
      this._nodes.forEach((n) => {
        var a;
        const r = this.fields[n];
        let o = t;
        (a = o) != null && a.value && (o = Object.assign({}, o, { parent: o.value, value: o.value[n] })),
          (i[n] = r && "getDefault" in r ? r.getDefault(o) : void 0);
      }),
      i
    );
  }
  setFields(t, i) {
    let n = this.clone();
    return (n.fields = t), (n._nodes = z2(t, i)), (n._sortErrors = wg(Object.keys(t))), i && (n._excludedEdges = i), n;
  }
  shape(t, i = []) {
    return this.clone().withMutation((n) => {
      let a = n._excludedEdges;
      return i.length && (Array.isArray(i[0]) || (i = [i]), (a = [...n._excludedEdges, ...i])), n.setFields(Object.assign(n.fields, t), a);
    });
  }
  partial() {
    const t = {};
    for (const [i, n] of Object.entries(this.fields)) t[i] = "optional" in n && n.optional instanceof Function ? n.optional() : n;
    return this.setFields(t);
  }
  deepPartial() {
    return $l(this);
  }
  pick(t) {
    const i = {};
    for (const n of t) this.fields[n] && (i[n] = this.fields[n]);
    return this.setFields(
      i,
      this._excludedEdges.filter(([n, a]) => t.includes(n) && t.includes(a))
    );
  }
  omit(t) {
    const i = [];
    for (const n of Object.keys(this.fields)) t.includes(n) || i.push(n);
    return this.pick(i);
  }
  from(t, i, n) {
    let a = To.getter(t, !0);
    return this.transform((r) => {
      if (!r) return r;
      let o = r;
      return W2(r, t) && ((o = Object.assign({}, r)), n || delete o[t], (o[i] = a(r))), o;
    });
  }
  json() {
    return this.transform(xg);
  }
  noUnknown(t = !0, i = $u.noUnknown) {
    typeof t != "boolean" && ((i = t), (t = !0));
    let n = this.test({
      name: "noUnknown",
      exclusive: !0,
      message: i,
      test(a) {
        if (a == null) return !0;
        const r = L2(this.schema, a);
        return !t || r.length === 0 || this.createError({ params: { unknown: r.join(", ") } });
      },
    });
    return (n.spec.noUnknown = t), n;
  }
  unknown(t = !0, i = $u.noUnknown) {
    return this.noUnknown(!t, i);
  }
  transformKeys(t) {
    return this.transform((i) => {
      if (!i) return i;
      const n = {};
      for (const a of Object.keys(i)) n[t(a)] = i[a];
      return n;
    });
  }
  camelCase() {
    return this.transformKeys(ou.camelCase);
  }
  snakeCase() {
    return this.transformKeys(ou.snakeCase);
  }
  constantCase() {
    return this.transformKeys((t) => ou.snakeCase(t).toUpperCase());
  }
  describe(t) {
    const i = (t ? this.resolve(t) : this).clone(),
      n = super.describe(t);
    n.fields = {};
    for (const [r, o] of Object.entries(i.fields)) {
      var a;
      let s = t;
      (a = s) != null && a.value && (s = Object.assign({}, s, { parent: s.value, value: s.value[r] })), (n.fields[r] = o.describe(s));
    }
    return n;
  }
}
ll.prototype = Tg.prototype;
function No(e) {
  return new Mg(e);
}
class Mg extends gn {
  constructor(t) {
    super({
      type: "array",
      spec: { types: t },
      check(i) {
        return Array.isArray(i);
      },
    }),
      (this.innerType = void 0),
      (this.innerType = t);
  }
  _cast(t, i) {
    const n = super._cast(t, i);
    if (!this._typeCheck(n) || !this.innerType) return n;
    let a = !1;
    const r = n.map((o, s) => {
      const l = this.innerType.cast(o, Object.assign({}, i, { path: `${i.path || ""}[${s}]` }));
      return l !== o && (a = !0), l;
    });
    return a ? r : n;
  }
  _validate(t, i = {}, n, a) {
    var r;
    let o = this.innerType,
      s = (r = i.recursive) != null ? r : this.spec.recursive;
    i.originalValue != null && i.originalValue,
      super._validate(t, i, n, (l, d) => {
        var u;
        if (!s || !o || !this._typeCheck(d)) {
          a(l, d);
          return;
        }
        let f = new Array(d.length);
        for (let m = 0; m < d.length; m++) {
          var p;
          f[m] = o.asNestedTest({
            options: i,
            index: m,
            parent: d,
            parentPath: i.path,
            originalParent: (p = i.originalValue) != null ? p : t,
          });
        }
        this.runTests({ value: d, tests: f, originalValue: (u = i.originalValue) != null ? u : t, options: i }, n, (m) =>
          a(m.concat(l), d)
        );
      });
  }
  clone(t) {
    const i = super.clone(t);
    return (i.innerType = this.innerType), i;
  }
  json() {
    return this.transform(xg);
  }
  concat(t) {
    let i = super.concat(t);
    return (i.innerType = this.innerType), t.innerType && (i.innerType = i.innerType ? i.innerType.concat(t.innerType) : t.innerType), i;
  }
  of(t) {
    let i = this.clone();
    if (!wd(t)) throw new TypeError("`array.of()` sub-schema must be a valid yup schema not: " + Sr(t));
    return (i.innerType = t), (i.spec = Object.assign({}, i.spec, { types: t })), i;
  }
  length(t, i = Vl.length) {
    return this.test({
      message: i,
      name: "length",
      exclusive: !0,
      params: { length: t },
      skipAbsent: !0,
      test(n) {
        return n.length === this.resolve(t);
      },
    });
  }
  min(t, i) {
    return (
      (i = i || Vl.min),
      this.test({
        message: i,
        name: "min",
        exclusive: !0,
        params: { min: t },
        skipAbsent: !0,
        test(n) {
          return n.length >= this.resolve(t);
        },
      })
    );
  }
  max(t, i) {
    return (
      (i = i || Vl.max),
      this.test({
        message: i,
        name: "max",
        exclusive: !0,
        params: { max: t },
        skipAbsent: !0,
        test(n) {
          return n.length <= this.resolve(t);
        },
      })
    );
  }
  ensure() {
    return this.default(() => []).transform((t, i) => (this._typeCheck(t) ? t : i == null ? [] : [].concat(i)));
  }
  compact(t) {
    let i = t ? (n, a, r) => !t(n, a, r) : (n) => !!n;
    return this.transform((n) => (n != null ? n.filter(i) : n));
  }
  describe(t) {
    const i = (t ? this.resolve(t) : this).clone(),
      n = super.describe(t);
    if (i.innerType) {
      var a;
      let r = t;
      (a = r) != null && a.value && (r = Object.assign({}, r, { parent: r.value, value: r.value[0] })),
        (n.innerType = i.innerType.describe(r));
    }
    return n;
  }
}
No.prototype = Mg.prototype;
/**
 * filesize
 *
 * @copyright 2024 Jason Mulligan <jason.mulligan@avoidwork.com>
 * @license BSD-3-Clause
 * @version 10.1.2
 */ const Q2 = "array",
  Z2 = "bit",
  If = "bits",
  J2 = "byte",
  Sf = "bytes",
  jo = "",
  Y2 = "exponent",
  X2 = "function",
  kf = "iec",
  K2 = "Invalid number",
  eS = "Invalid rounding method",
  su = "jedec",
  tS = "object",
  Nf = ".",
  iS = "round",
  nS = "s",
  aS = "si",
  rS = "kbit",
  oS = "kB",
  sS = " ",
  lS = "string",
  dS = "0",
  lu = {
    symbol: {
      iec: {
        bits: ["bit", "Kibit", "Mibit", "Gibit", "Tibit", "Pibit", "Eibit", "Zibit", "Yibit"],
        bytes: ["B", "KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"],
      },
      jedec: {
        bits: ["bit", "Kbit", "Mbit", "Gbit", "Tbit", "Pbit", "Ebit", "Zbit", "Ybit"],
        bytes: ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
      },
    },
    fullform: {
      iec: ["", "kibi", "mebi", "gibi", "tebi", "pebi", "exbi", "zebi", "yobi"],
      jedec: ["", "kilo", "mega", "giga", "tera", "peta", "exa", "zetta", "yotta"],
    },
  };
function Cs(
  e,
  {
    bits: t = !1,
    pad: i = !1,
    base: n = -1,
    round: a = 2,
    locale: r = jo,
    localeOptions: o = {},
    separator: s = jo,
    spacer: l = sS,
    symbols: d = {},
    standard: u = jo,
    output: f = lS,
    fullform: p = !1,
    fullforms: m = [],
    exponent: h = -1,
    roundingMethod: k = iS,
    precision: x = 0,
  } = {}
) {
  let T = h,
    y = Number(e),
    v = [],
    S = 0,
    F = jo;
  u === aS ? ((n = 10), (u = su)) : u === kf || u === su ? (n = 2) : n === 2 ? (u = kf) : ((n = 10), (u = su));
  const w = n === 10 ? 1e3 : 1024,
    M = p === !0,
    C = y < 0,
    $ = Math[k];
  if (typeof e != "bigint" && isNaN(e)) throw new TypeError(K2);
  if (typeof $ !== X2) throw new TypeError(eS);
  if (
    (C && (y = -y),
    (T === -1 || isNaN(T)) && ((T = Math.floor(Math.log(y) / Math.log(w))), T < 0 && (T = 0)),
    T > 8 && (x > 0 && (x += 8 - T), (T = 8)),
    f === Y2)
  )
    return T;
  if (y === 0) (v[0] = 0), (F = v[1] = lu.symbol[u][t ? If : Sf][T]);
  else {
    (S = y / (n === 2 ? Math.pow(2, T * 10) : Math.pow(1e3, T))), t && ((S = S * 8), S >= w && T < 8 && ((S = S / w), T++));
    const L = Math.pow(10, T > 0 ? a : 0);
    (v[0] = $(S * L) / L),
      v[0] === w && T < 8 && h === -1 && ((v[0] = 1), T++),
      (F = v[1] = n === 10 && T === 1 ? (t ? rS : oS) : lu.symbol[u][t ? If : Sf][T]);
  }
  if (
    (C && (v[0] = -v[0]),
    x > 0 && (v[0] = v[0].toPrecision(x)),
    (v[1] = d[v[1]] || v[1]),
    r === !0
      ? (v[0] = v[0].toLocaleString())
      : r.length > 0
      ? (v[0] = v[0].toLocaleString(r, o))
      : s.length > 0 && (v[0] = v[0].toString().replace(Nf, s)),
    i && Number.isInteger(v[0]) === !1 && a > 0)
  ) {
    const L = s || Nf,
      U = v[0].toString().split(L),
      P = U[1] || jo,
      z = P.length,
      E = a - z;
    v[0] = `${U[0]}${L}${P.padEnd(z + E, dS)}`;
  }
  return (
    M && (v[1] = m[T] ? m[T] : lu.fullform[u][T] + (t ? Z2 : J2) + (v[0] === 1 ? jo : nS)),
    f === Q2 ? v : f === tS ? { value: v[0], symbol: v[1], exponent: T, unit: F } : v.join(l)
  );
}
const uS = c.createContext(void 0),
  cS = () => {
    const e = b.useContext(uS);
    if (!e)
      throw new Error(`useAutoFormMetadata hook called in context where no AutoFormMetadata context is available. Please ensure you are wrapping this hook with the <AutoForm/> component from @gadgetinc/react.

    Possible remedies:
      - ensuring you have the <AutoForm/> component wrapped around your hook invocation
      - ensuring your @gadget-client/<your-app> package and your @gadgetinc/react package are up to date`);
    return e;
  },
  pS = (e) => {
    const { model: t, fields: i } = cS(),
      a = t && t.apiIdentifier ? t.apiIdentifier + "." + e : e,
      r = i.find((o) => o.path === a || fS(e, o));
    if (!r) throw new Error(`Field "${e}" not found in metadata`);
    return r;
  },
  fS = (e, t) => t.metadata.__typename !== "GadgetModelField" && t.path === e,
  mS = ["image/jpeg", "image/png", "image/svg+xml", "image/webp"],
  J5 = (e) => {
    const { field: t, control: i } = e,
      [n, a] = b.useState(),
      { path: r, metadata: o } = pS(t),
      s = jy(),
      {
        field: l,
        fieldState: { error: d },
      } = Ky({ control: i, name: r }),
      { setError: u, clearErrors: f } = yl();
    b.useEffect(() => {
      l.value && sd(l.value) && l.value.url && a(l.value.url);
    }, [l.value]);
    const p = b.useMemo(
        () => !o.configuration.validations.find((T) => (T == null ? void 0 : T.specID) === NS),
        [o.configuration.validations]
      ),
      m = b.useMemo(
        () => o.configuration.validations.find((T) => (T == null ? void 0 : T.__typename) === "GadgetRangeFieldValidation"),
        [o]
      ),
      h = b.useMemo(() => {
        const T = o.configuration.validations.find((v) => (v == null ? void 0 : v.__typename) === "GadgetOnlyImageFileFieldValidation");
        if (!T) return;
        const y = [...mS];
        return T.allowAnimatedImages && y.push("image/gif"), { acceptedTypes: y, allowAnimatedImages: T.allowAnimatedImages };
      }, [o]),
      k = b.useCallback(() => {
        l.onChange(null), a(void 0), f(r);
      }, [f, l, r]),
      x = b.useCallback(
        async (T) => {
          if (T.length === 0) return;
          const y = T[0],
            v = { fileName: y.name, mimeType: y.type };
          if ((a(window.URL.createObjectURL(y)), m && ((m.min && y.size < m.min) || (m.max && y.size > m.max)))) {
            u(r, { message: Og(m, y.size), type: "validate" }), l.onChange({ ...v, $invalidFileSize: y.size });
            return;
          }
          l.onChange({ ...v, $uploading: !0 });
          const { url: S, token: F } = await s.getDirectUploadToken();
          await fetch(S, { method: "PUT", headers: { "Content-Type": y.type }, body: y }), l.onChange({ directUploadToken: F, ...v });
        },
        [s, l, m, r, u]
      );
    return {
      fieldProps: l,
      isError: !!d,
      errorMessage: d == null ? void 0 : d.message,
      imageThumbnailURL: n,
      onFileUpload: x,
      clearFileValue: k,
      validations: { fileSize: m, onlyImages: h },
      metadata: o,
      canClearFileValue: p,
    };
  },
  yS = (e, t) => {
    if (e.min) return e.max ? t.inRange(e.min, e.max) : t.min(e.min);
    if (e.max) return t.max(e.max);
  },
  Og = (e, t) => {
    let i = yS(e, {
      inRange: (n, a) => `must be a file between ${Cs(n)} and ${Cs(a)} big`,
      max: (n) => `must be a file smaller than ${Cs(n)}`,
      min: (n) => `must be a file larger than than ${Cs(n)}`,
    });
    return i && (i = `must be a file ${i}, and this file's size is ${Cs(t)}.`), i;
  },
  gS = (e, t = [], i = "") => {
    let n;
    const a = i ? `${i}.${e.apiIdentifier}` : e.apiIdentifier;
    switch (e.fieldType) {
      case ee.Boolean: {
        n = Ng();
        break;
      }
      case ee.Code:
      case ee.Password:
      case ee.EncryptedString:
      case ee.Color:
      case ee.String: {
        n = sa();
        break;
      }
      case ee.DateTime: {
        n = Vc();
        break;
      }
      case ee.Email: {
        n = sa().email();
        break;
      }
      case ee.Url: {
        n = sa().url();
        break;
      }
      case ee.Enum: {
        const r = e.configuration;
        if (r.allowOther) n = r.allowMultiple ? No(sa()) : sa();
        else {
          const o = sa().oneOf(r.options.map((s) => s.name));
          n = r.allowMultiple ? No(o) : o;
        }
        break;
      }
      case ee.File: {
        n = _l().test("is-uploading", function (r) {
          const { path: o, createError: s } = this;
          return sd(r) && r.$uploading ? s({ path: o, message: "file is still uploading" }) : !0;
        });
        break;
      }
      case ee.Number: {
        n = ju();
        break;
      }
      case ee.Id: {
        n = sa();
        break;
      }
      case ee.Json: {
        n = _l().test("is-valid-json", function (r) {
          if (typeof r > "u") return !0;
          const { path: o, createError: s } = this;
          return wS(r) ? s({ path: o, message: r.error.message }) : !0;
        });
        break;
      }
      case ee.RecordState:
      case ee.Any: {
        n = _l();
        break;
      }
      case ee.Money: {
        n = sa();
        break;
      }
      case ee.Object: {
        const r = e.configuration;
        n = xS(r.fields, t, a);
        break;
      }
      case ee.RichText: {
        n = ll({});
        break;
      }
      case ee.RoleAssignments: {
        n = No(sa());
        break;
      }
      case ee.Vector: {
        n = No(ju());
        break;
      }
      case ee.BelongsTo:
      case ee.HasOne: {
        n = ll();
        break;
      }
      case ee.HasManyThrough:
      case ee.HasMany: {
        n = No();
        break;
      }
      case ee.Array: {
        n = No();
        break;
      }
      default:
        throw new Error(`unknown field type ${e.fieldType} for validator generation`);
    }
    return (n = hS(e, n, t.includes(a))), n;
  },
  hS = (e, t, i) => {
    if (
      (e.requiredArgumentForInput && i
        ? (e.fieldType === ee.RichText && (t = ll({ markdown: sa().required() })), (t = t.required(`${e.name} is required`)))
        : (t = t.nullable().default(null)),
      !i)
    )
      return t;
    for (const n of e.configuration.validations)
      switch (n == null ? void 0 : n.__typename) {
        case "GadgetRangeFieldValidation": {
          const { min: a, max: r } = n;
          t instanceof od || t instanceof qc
            ? (a && (t = t.min(a)), r && (t = t.max(r)))
            : e.fieldType === ee.File &&
              t instanceof rd &&
              (t = t.test("is-valid-file-size", function (o) {
                const { path: s, createError: l } = this;
                return sd(o) && o.$invalidFileSize ? l({ path: s, message: Og(n, o.$invalidFileSize) }) : !0;
              }));
          break;
        }
        case "GadgetRegexFieldValidation": {
          const a = n;
          a.pattern && t instanceof od && (t = t.matches(new RegExp(a.pattern)));
          break;
        }
        case "GadgetOnlyImageFileFieldValidation": {
          t instanceof rd &&
            (t = t.test("is-valid-image-file", function (a) {
              const { allowAnimatedImages: r } = n;
              if (typeof a > "u") return !0;
              const { path: o, createError: s } = this;
              if (sd(a)) {
                if (!a.mimeType.startsWith("image/"))
                  return s({ path: o, message: `must be a valid image file type; file type was detected as "${a.mimeType}"` });
                if (!r && a.mimeType === "image/gif") return s({ path: o, message: "must not be an animated image file" });
              }
              return !0;
            }));
          break;
        }
        case "GadgetGenericFieldValidation": {
          const { specID: a } = n;
          t = bS(t, a);
          break;
        }
      }
    return t;
  },
  bS = (e, t) => {
    switch (t) {
      case IS:
        return e.matches(AS, "Must be a color");
      case vS:
        return e.email();
      case SS:
        return e.matches(FS, "Must contain at least 8 characters, 1 number and 1 special character");
      case kS:
        return e.url();
      default:
        return e;
    }
  },
  vS = "gadget/validation/email-address",
  IS = "gadget/validation/color",
  SS = "gadget/validation/password",
  kS = "gadget/validation/url",
  NS = "gadget/validation/required",
  AS = new RegExp(/^#([0-9a-fA-F]{6}|[0-9a-fA-F]{8})$/),
  FS = new RegExp(`^(?=.*\\d)(?=.*[!@#$%^&*\\-=_+\\[\\]{}|;:'",.<>/?])(.{8,})$`),
  wS = (e) => e && typeof e == "object" && "$failedParse" in e,
  xS = (e, t = [], i = "") => {
    const n = {};
    for (const a of e) n[a.apiIdentifier] = gS(a, t, i);
    return ll(n);
  },
  sd = (e) => typeof e == "object" && e !== null && "mimeType" in e && "fileName" in e,
  Y5 = (e) => {
    if (!e) return "";
    const t = e.getFullYear(),
      i = String(e.getMonth() + 1).padStart(2, "0"),
      n = String(e.getDate()).padStart(2, "0");
    return `${t}-${i}-${n}`;
  },
  X5 = (e, t) => {
    if (!e) return "";
    const i = e.toLocaleDateString("en-US", { year: "numeric", month: "short", day: "numeric" });
    if (t) {
      const n = e.toLocaleTimeString("en-US", { hour: "numeric", minute: "2-digit", hour12: !0 });
      return `${i} ${n}`;
    } else return i;
  },
  K5 = (e) => e instanceof Date && !isNaN(e.getTime()),
  eF = (e, t) => {
    const i = _c(e.getFullYear(), e.getMonth(), e.getDate(), e.getHours(), e.getMinutes(), e.getSeconds(), e.getMilliseconds()).getTime(),
      n = Rg(t, new Date(i));
    return new Date(i + n);
  },
  tF = (e, t) => {
    const i = Rg(t, e, !0),
      n = new Date(e.getTime() - i),
      a = new Date(0);
    return (
      a.setFullYear(n.getUTCFullYear(), n.getUTCMonth(), n.getUTCDate()),
      a.setHours(n.getUTCHours(), n.getUTCMinutes(), n.getUTCSeconds(), n.getUTCMilliseconds()),
      a
    );
  },
  du = { timezone: /([Z+-].*)$/, timezoneZ: /^(Z)$/, timezoneHH: /^([+-]\d{2})$/, timezoneHHMM: /^([+-])(\d{2}):?(\d{2})$/ },
  Af = {},
  Ff = 36e5,
  TS = 6e4,
  MS = (e) => {
    if (Af[e]) return !0;
    try {
      return new Intl.DateTimeFormat(void 0, { timeZone: e }), (Af[e] = !0), !0;
    } catch {
      return !1;
    }
  },
  Rg = (e, t, i) => {
    if (!e) return 0;
    let n = du.timezoneZ.exec(e);
    if (n) return 0;
    let a, r;
    if (((n = du.timezoneHH.exec(e)), n)) return (a = parseInt(n[1], 10)), wf(a) ? -(a * Ff) : NaN;
    if (((n = du.timezoneHHMM.exec(e)), n)) {
      a = parseInt(n[2], 10);
      const s = parseInt(n[3], 10);
      return wf(a, s) ? ((r = Math.abs(a) * Ff + s * TS), n[1] === "+" ? -r : r) : NaN;
    }
    const o = (s, l, d) => {
      let f = s.getTime() - l;
      const p = uu(new Date(f), d);
      if (l === p) return l;
      f -= p - l;
      const m = uu(new Date(f), d);
      return p === m ? p : Math.max(p, m);
    };
    if (MS(e)) {
      t = new Date(t || Date.now());
      const s = i ? t : OS(t),
        l = uu(s, e);
      return -(i ? l : o(t, l, e));
    }
    return NaN;
  },
  wf = (e, t) => -23 <= e && e <= 23 && (t == null || (0 <= t && t <= 59)),
  uu = (e, t) => {
    const i = RS(e, t),
      n = _c(i[0], i[1] - 1, i[2], i[3] % 24, i[4], i[5], 0).getTime();
    let a = e.getTime();
    const r = a % 1e3;
    return (a -= r >= 0 ? r : 1e3 + r), n - a;
  },
  OS = (e) => _c(e.getFullYear(), e.getMonth(), e.getDate(), e.getHours(), e.getMinutes(), e.getSeconds(), e.getMilliseconds()),
  _c = (e, t, i, n, a, r, o) => {
    const s = new Date(0);
    return s.setUTCFullYear(e, t, i), s.setUTCHours(n, a, r, o), s;
  },
  RS = (e, t) => {
    const i = BS(t);
    return "formatToParts" in i ? PS(i, e) : ES(i, e);
  },
  cu = {},
  BS = (e) => {
    if (!cu[e]) {
      const t = new Intl.DateTimeFormat("en-US", {
          hourCycle: "h23",
          timeZone: "America/New_York",
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
          second: "2-digit",
        }).format(new Date("2014-06-25T04:00:00.123Z")),
        i = t === "06/25/2014, 00:00:00" || t === "‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00";
      cu[e] = i
        ? new Intl.DateTimeFormat("en-US", {
            hourCycle: "h23",
            timeZone: e,
            year: "numeric",
            month: "numeric",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
          })
        : new Intl.DateTimeFormat("en-US", {
            hour12: !1,
            timeZone: e,
            year: "numeric",
            month: "numeric",
            day: "2-digit",
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
          });
    }
    return cu[e];
  },
  CS = { year: 0, month: 1, day: 2, hour: 3, minute: 4, second: 5 },
  PS = (e, t) => {
    try {
      const i = e.formatToParts(t),
        n = [];
      for (let a = 0; a < i.length; a++) {
        const r = CS[i[a].type];
        r !== void 0 && (n[r] = parseInt(i[a].value, 10));
      }
      return n;
    } catch (i) {
      if (i instanceof RangeError) return [NaN];
      throw i;
    }
  },
  ES = (e, t) => {
    const i = e.format(t),
      n = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(i);
    return [parseInt(n[3], 10), parseInt(n[1], 10), parseInt(n[2], 10), parseInt(n[4], 10), parseInt(n[5], 10), parseInt(n[6], 10)];
  },
  iF = (e, t) => {
    const i = RI(t),
      n = b.useMemo(
        () => Bo(e.findMany.operationName, e.findMany.defaultSelection, e.findMany.modelApiIdentifier, i, e.findMany.namespace),
        [e, i]
      ),
      [a, r] = Nd(MI(n, t));
    return [
      b.useMemo(() => {
        const s = kr([e.findMany.operationName], e.findMany.namespace);
        let l = a.data;
        if (l) {
          const u = ms(a.data, s);
          if (u) {
            const f = rl(a, u);
            l = ys.boot(e, f, u);
          }
        }
        const d = Ka.errorIfDataAbsent(a, s, t == null ? void 0 : t.pause);
        return { ...a, data: l, error: d };
      }, [e, t == null ? void 0 : t.pause, a]),
      r,
    ];
  },
  On = { __typename: !0, createdAt: !0, id: !0, roles: { key: !0, name: !0 }, updatedAt: !0 },
  ya = "session";
let DS = class {
  constructor(t) {
    (this.connection = t),
      (this.findOne = Object.assign(async (i, n) => await ye(this, "session", i, On, ya, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "session",
        modelApiIdentifier: ya,
        defaultSelection: On,
      })),
      (this.maybeFindOne = Object.assign(
        async (i, n) => {
          const a = await ye(this, "session", i, On, ya, n, !1);
          return a.isEmpty() ? null : a;
        },
        { type: "maybeFindOne", findByVariableName: "id", operationName: "session", modelApiIdentifier: "session", defaultSelection: On }
      )),
      (this.findMany = Object.assign(async (i) => await se(this, "sessions", On, "session", i), {
        type: "findMany",
        operationName: "sessions",
        modelApiIdentifier: ya,
        defaultSelection: On,
      })),
      (this.findFirst = Object.assign(
        async (i) => (await se(this, "sessions", On, ya, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !0))[0],
        { type: "findFirst", operationName: "sessions", modelApiIdentifier: ya, defaultSelection: On }
      )),
      (this.maybeFindFirst = Object.assign(
        async (i) => {
          const n = await se(this, "sessions", On, ya, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !1);
          return (n == null ? void 0 : n[0]) ?? null;
        },
        { type: "maybeFindFirst", operationName: "sessions", modelApiIdentifier: ya, defaultSelection: On }
      )),
      (this.findById = Object.assign(async (i, n) => await Ni(this, "sessions", "id", i, On, ya, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "sessions",
        modelApiIdentifier: ya,
        defaultSelection: On,
      }));
  }
};
function ld(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
const bt = {
    __typename: !0,
    attachment: { mimeType: !0, url: !0 },
    body: { markdown: !0, truncatedHTML: !0 },
    createdAt: !0,
    id: !0,
    publishedAt: !0,
    title: !0,
    updatedAt: !0,
  },
  Me = "post";
async function US(e, t) {
  const i = ld(this.create, void 0, e);
  return await H(this, "createPost", bt, Me, Me, !1, { post: { value: i.post, required: !1, type: "CreatePostInput" } }, t, null, !1);
}
async function qS(e, t, i) {
  const n = ld(this.update, e, t);
  return await H(
    this,
    "updatePost",
    bt,
    Me,
    Me,
    !1,
    { id: { value: e, required: !0, type: "GadgetID" }, post: { value: n.post, required: !1, type: "UpdatePostInput" } },
    i,
    null,
    !1
  );
}
async function VS(e, t) {
  return await H(this, "deletePost", null, Me, Me, !1, { id: { value: e, required: !0, type: "GadgetID" } }, t, null, !1);
}
class _S {
  constructor(t) {
    (this.connection = t),
      (this.findOne = Object.assign(async (i, n) => await ye(this, "post", i, bt, Me, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "post",
        modelApiIdentifier: Me,
        defaultSelection: bt,
      })),
      (this.maybeFindOne = Object.assign(
        async (i, n) => {
          const a = await ye(this, "post", i, bt, Me, n, !1);
          return a.isEmpty() ? null : a;
        },
        { type: "maybeFindOne", findByVariableName: "id", operationName: "post", modelApiIdentifier: "post", defaultSelection: bt }
      )),
      (this.findMany = Object.assign(async (i) => await se(this, "posts", bt, "post", i), {
        type: "findMany",
        operationName: "posts",
        modelApiIdentifier: Me,
        defaultSelection: bt,
      })),
      (this.findFirst = Object.assign(
        async (i) => (await se(this, "posts", bt, Me, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !0))[0],
        { type: "findFirst", operationName: "posts", modelApiIdentifier: Me, defaultSelection: bt }
      )),
      (this.maybeFindFirst = Object.assign(
        async (i) => {
          const n = await se(this, "posts", bt, Me, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !1);
          return (n == null ? void 0 : n[0]) ?? null;
        },
        { type: "maybeFindFirst", operationName: "posts", modelApiIdentifier: Me, defaultSelection: bt }
      )),
      (this.findById = Object.assign(async (i, n) => await Ni(this, "posts", "id", i, bt, Me, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "posts",
        modelApiIdentifier: Me,
        defaultSelection: bt,
      })),
      (this.create = Object.assign(US, {
        type: "action",
        operationName: "createPost",
        namespace: null,
        modelApiIdentifier: Me,
        modelSelectionField: Me,
        isBulk: !1,
        defaultSelection: bt,
        variables: { post: { required: !1, type: "CreatePostInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkCreate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => ld(this.create, void 0, r));
          return await H(
            this,
            "bulkCreatePosts",
            bt,
            "post",
            "posts",
            !0,
            { inputs: { value: a, ...this.bulkCreate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkCreatePosts",
          namespace: null,
          modelApiIdentifier: Me,
          modelSelectionField: "posts",
          isBulk: !0,
          defaultSelection: bt,
          variables: { inputs: { required: !0, type: "[BulkCreatePostsInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.update = Object.assign(qS, {
        type: "action",
        operationName: "updatePost",
        namespace: null,
        modelApiIdentifier: Me,
        modelSelectionField: Me,
        isBulk: !1,
        defaultSelection: bt,
        variables: { id: { required: !0, type: "GadgetID" }, post: { required: !1, type: "UpdatePostInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkUpdate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => ld(this.update, void 0, r));
          return await H(
            this,
            "bulkUpdatePosts",
            bt,
            "post",
            "posts",
            !0,
            { inputs: { value: a, ...this.bulkUpdate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkUpdatePosts",
          namespace: null,
          modelApiIdentifier: Me,
          modelSelectionField: "posts",
          isBulk: !0,
          defaultSelection: bt,
          variables: { inputs: { required: !0, type: "[BulkUpdatePostsInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.delete = Object.assign(VS, {
        type: "action",
        operationName: "deletePost",
        namespace: null,
        modelApiIdentifier: Me,
        modelSelectionField: Me,
        isBulk: !1,
        defaultSelection: null,
        variables: { id: { required: !0, type: "GadgetID" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !1,
      })),
      (this.bulkDelete = Object.assign(
        async (i, n) =>
          await H(this, "bulkDeletePosts", null, "post", "posts", !0, { ids: { value: i, ...this.bulkDelete.variables.ids } }, n, null, !1),
        {
          type: "action",
          operationName: "bulkDeletePosts",
          namespace: null,
          modelApiIdentifier: Me,
          modelSelectionField: "posts",
          isBulk: !0,
          defaultSelection: null,
          variables: { ids: { required: !0, type: "[GadgetID!]" } },
          hasReturnType: !1,
          acceptsModelInput: !1,
        }
      ));
  }
}
const xf = { __typename: !0, createdAt: !0, id: !0, roles: { key: !0, name: !0 }, updatedAt: !0 };
let $S = class {
  constructor(t) {
    (this.connection = t),
      (this.get = Object.assign(async (i) => await ye(this, "currentSession", void 0, xf, "session", i), {
        type: "get",
        operationName: "currentSession",
        modelApiIdentifier: "session",
        defaultSelection: xf,
      }));
  }
};
var Bg;
const Tf = "production",
  GS = "development",
  jS = Symbol.for("gadget/modelRelationships"),
  zS = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let WS = class {
  constructor(t) {
    var a;
    (this.apiRoots = {
      development: "https://app-with-file-fields--development.gadget.app/",
      production: "https://app-with-file-fields.gadget.app/",
    }),
      (this.applicationId = "121756"),
      (this[Bg] = { session: {}, post: {} }),
      (this.transaction = async (r) => await this.connection.transaction(r)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken),
      (this.environment = ((t == null ? void 0 : t.environment) ?? zS() ?? GS).toLocaleLowerCase());
    let i;
    this.apiRoots[this.environment]
      ? (i = this.apiRoots[this.environment])
      : (i = `https://app-with-file-fields${this.environment == Tf ? "" : `--${this.environment}`}.gadget.app`);
    const n = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== Tf) {
      const r =
        ({ forward: o }) =>
        (s) => {
          const l = o(s);
          return Vn(
            l,
            Bi((d) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const u = new CustomEvent("gadget:devharness:graphqlresult", { detail: d });
                  window.dispatchEvent(u);
                }
              } catch (u) {
                console.warn("[gadget] error dispatching gadget dev harness event", u);
              }
              return d;
            })
          );
        };
      n.beforeAll = [r, ...(n.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", i).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: n,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((a = t == null ? void 0 : t.authenticationMode) != null && a.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.session = new DS(this.connection)),
      (this.post = new _S(this.connection)),
      (this.currentSession = new $S(this.connection)),
      (this.internal = {
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifier: !1 }),
        post: new B("post", this.connection, { pluralApiIdentifier: "posts", hasAmbiguousIdentifier: !1 }),
      });
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
Bg = jS;
const Rn = { __typename: !0, createdAt: !0, id: !0, roles: { key: !0, name: !0 }, updatedAt: !0 },
  ga = "session";
let LS = class {
  constructor(t) {
    (this.connection = t),
      (this.findOne = Object.assign(async (i, n) => await ye(this, "session", i, Rn, ga, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "session",
        modelApiIdentifier: ga,
        defaultSelection: Rn,
      })),
      (this.maybeFindOne = Object.assign(
        async (i, n) => {
          const a = await ye(this, "session", i, Rn, ga, n, !1);
          return a.isEmpty() ? null : a;
        },
        { type: "maybeFindOne", findByVariableName: "id", operationName: "session", modelApiIdentifier: "session", defaultSelection: Rn }
      )),
      (this.findMany = Object.assign(async (i) => await se(this, "sessions", Rn, "session", i), {
        type: "findMany",
        operationName: "sessions",
        modelApiIdentifier: ga,
        defaultSelection: Rn,
      })),
      (this.findFirst = Object.assign(
        async (i) => (await se(this, "sessions", Rn, ga, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !0))[0],
        { type: "findFirst", operationName: "sessions", modelApiIdentifier: ga, defaultSelection: Rn }
      )),
      (this.maybeFindFirst = Object.assign(
        async (i) => {
          const n = await se(this, "sessions", Rn, ga, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !1);
          return (n == null ? void 0 : n[0]) ?? null;
        },
        { type: "maybeFindFirst", operationName: "sessions", modelApiIdentifier: ga, defaultSelection: Rn }
      )),
      (this.findById = Object.assign(async (i, n) => await Ni(this, "sessions", "id", i, Rn, ga, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "sessions",
        modelApiIdentifier: ga,
        defaultSelection: Rn,
      }));
  }
};
const Mf = { __typename: !0, createdAt: !0, id: !0, roles: { key: !0, name: !0 }, updatedAt: !0 };
let HS = class {
  constructor(t) {
    (this.connection = t),
      (this.get = Object.assign(async (i) => await ye(this, "currentSession", void 0, Mf, "session", i), {
        type: "get",
        operationName: "currentSession",
        modelApiIdentifier: "session",
        defaultSelection: Mf,
      }));
  }
};
var Cg;
const Of = "production",
  QS = "development",
  ZS = Symbol.for("gadget/modelRelationships"),
  JS = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let YS = class {
  constructor(t) {
    var a;
    (this.apiRoots = {
      development: "https://app-with-no-user-model--development.gadget.app/",
      production: "https://app-with-no-user-model.gadget.app/",
    }),
      (this.applicationId = "45852"),
      (this[Cg] = { session: {} }),
      (this.transaction = async (r) => await this.connection.transaction(r)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken),
      (this.environment = ((t == null ? void 0 : t.environment) ?? JS() ?? QS).toLocaleLowerCase());
    let i;
    this.apiRoots[this.environment]
      ? (i = this.apiRoots[this.environment])
      : (i = `https://app-with-no-user-model${this.environment == Of ? "" : `--${this.environment}`}.gadget.app`);
    const n = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== Of) {
      const r =
        ({ forward: o }) =>
        (s) => {
          const l = o(s);
          return Vn(
            l,
            Bi((d) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const u = new CustomEvent("gadget:devharness:graphqlresult", { detail: d });
                  window.dispatchEvent(u);
                }
              } catch (u) {
                console.warn("[gadget] error dispatching gadget dev harness event", u);
              }
              return d;
            })
          );
        };
      n.beforeAll = [r, ...(n.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", i).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: n,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((a = t == null ? void 0 : t.authenticationMode) != null && a.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.session = new LS(this.connection)),
      (this.currentSession = new HS(this.connection)),
      (this.internal = { session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifier: !1 }) });
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
Cg = ZS;
const xd = (e, t, i, n) => {
  const a = class {
    constructor(r) {
      this.connection = r;
    }
  };
  for (const r of n)
    switch (r.type) {
      case "maybeFindOne":
      case "findOne": {
        "functionName" in r
          ? (a.prototype[r.functionName] = Object.assign(async function (o, s) {
              return await Ni(this, r.operationName, r.findByField, o, i, e, s);
            }, r))
          : (a.prototype[r.type] = Object.assign(async function (o, s) {
              const l = await ye(this, e, o, i, e, s, r.type != "maybeFindOne");
              return l.isEmpty() ? null : l;
            }, r));
        break;
      }
      case "findMany": {
        a.prototype.findMany = Object.assign(async function (o) {
          return await se(this, t, i, e, o);
        }, r);
        break;
      }
      case "maybeFindFirst":
      case "findFirst": {
        a.prototype[r.type] = Object.assign(async function (o) {
          const s = await se(this, t, i, e, { ...o, first: 1, last: void 0, before: void 0, after: void 0 }, r.type != "maybeFindFirst");
          return (s == null ? void 0 : s[0]) ?? null;
        }, r);
        break;
      }
      case "get": {
        a.prototype.get = Object.assign(async function (o) {
          return await ye(this, r.operationName, void 0, i, e, o);
        }, r);
        break;
      }
      case "action": {
        if (r.isBulk) {
          const o = !!r.variables.ids;
          a.prototype[r.functionName] = Object.assign(async function (s, l) {
            let d;
            return (
              o
                ? (d = { ids: { ...r.variables.ids, value: s } })
                : (d = { inputs: { ...r.variables.inputs, value: s.map((u) => Pg(this[r.singleActionFunctionName], void 0, u)) } }),
              await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !0, d, l, r.namespace, r.hasReturnType)
            );
          }, r);
        } else {
          const o = !!r.variables.id,
            s = Object.keys(r.variables).filter((l) => l != "id").length > 0;
          a.prototype[r.functionName] = Object.assign(async function (...l) {
            const [d, u] = XS(r, o, s, l);
            return await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !1, d, u, r.namespace, r.hasReturnType);
          }, r);
        }
        break;
      }
    }
  return a;
};
function Pg(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
function XS(e, t, i, n) {
  let a, r;
  t && (a = n.shift()), i && (r = n.shift());
  const o = n.shift();
  let s = r;
  (a || r) && (s = Pg(e, a, r));
  const l = {};
  for (const [d, u] of Object.entries(e.variables)) l[d] = { value: d == "id" ? a : s == null ? void 0 : s[d], ...u };
  return [l, o];
}
const zn = { __typename: !0, id: !0, state: !0, createdAt: !0, roles: { key: !0, name: !0 }, updatedAt: !0 },
  wi = "session",
  po = "sessions",
  KS = xd(wi, po, zn, [
    { type: "findOne", operationName: wi, modelApiIdentifier: wi, findByVariableName: "id", defaultSelection: zn },
    { type: "maybeFindOne", operationName: wi, modelApiIdentifier: wi, findByVariableName: "id", defaultSelection: zn },
    { type: "findMany", operationName: po, modelApiIdentifier: wi, defaultSelection: zn },
    { type: "findFirst", operationName: po, modelApiIdentifier: wi, defaultSelection: zn },
    { type: "maybeFindFirst", operationName: po, modelApiIdentifier: wi, defaultSelection: zn },
    {
      type: "findOne",
      operationName: po,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: wi,
      defaultSelection: zn,
    },
    {
      type: "action",
      operationName: "logInViaEmail",
      functionName: "logInViaEmail",
      namespace: "currentSession",
      modelApiIdentifier: wi,
      modelSelectionField: wi,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !1, type: "String" }, password: { required: !1, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: zn,
    },
    {
      type: "action",
      operationName: "bulkLogInViaEmailSessions",
      functionName: "bulkLogInViaEmail",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "logInViaEmail",
      modelApiIdentifier: wi,
      modelSelectionField: po,
      namespace: "currentSession",
      variables: { inputs: { required: !0, type: "[BulkLogInViaEmailSessionsInput!]" } },
      defaultSelection: zn,
    },
    {
      type: "action",
      operationName: "logOut",
      functionName: "logOut",
      namespace: "currentSession",
      modelApiIdentifier: wi,
      modelSelectionField: wi,
      isBulk: !1,
      isDeleter: !1,
      variables: {},
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: zn,
    },
    {
      type: "action",
      operationName: "bulkLogOutSessions",
      functionName: "bulkLogOut",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "logOut",
      modelApiIdentifier: wi,
      modelSelectionField: po,
      namespace: "currentSession",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: zn,
    },
  ]),
  Ei = { __typename: !0, id: !0, createdAt: !0, email: !0, roles: { key: !0, name: !0 }, updatedAt: !0 },
  Ve = "user",
  ha = "users",
  ek = xd(Ve, ha, Ei, [
    { type: "findOne", operationName: Ve, modelApiIdentifier: Ve, findByVariableName: "id", defaultSelection: Ei },
    { type: "maybeFindOne", operationName: Ve, modelApiIdentifier: Ve, findByVariableName: "id", defaultSelection: Ei },
    { type: "findMany", operationName: ha, modelApiIdentifier: Ve, defaultSelection: Ei },
    { type: "findFirst", operationName: ha, modelApiIdentifier: Ve, defaultSelection: Ei },
    { type: "maybeFindFirst", operationName: ha, modelApiIdentifier: Ve, defaultSelection: Ei },
    {
      type: "findOne",
      operationName: ha,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ve,
      defaultSelection: Ei,
    },
    {
      type: "findOne",
      operationName: ha,
      functionName: "findByEmail",
      findByField: "email",
      findByVariableName: "email",
      modelApiIdentifier: Ve,
      defaultSelection: Ei,
    },
    {
      type: "action",
      operationName: "signUpUser",
      functionName: "signUp",
      namespace: null,
      modelApiIdentifier: Ve,
      modelSelectionField: Ve,
      isBulk: !1,
      isDeleter: !1,
      variables: { user: { required: !1, type: "SignUpUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ei,
    },
    {
      type: "action",
      operationName: "bulkSignUpUsers",
      functionName: "bulkSignUp",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "signUp",
      modelApiIdentifier: Ve,
      modelSelectionField: ha,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignUpUsersInput!]" } },
      defaultSelection: Ei,
    },
    {
      type: "action",
      operationName: "updateUser",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Ve,
      modelSelectionField: Ve,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "UpdateUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ei,
    },
    {
      type: "action",
      operationName: "bulkUpdateUsers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Ve,
      modelSelectionField: ha,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateUsersInput!]" } },
      defaultSelection: Ei,
    },
    {
      type: "action",
      operationName: "deleteUser",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Ve,
      modelSelectionField: Ve,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteUsers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Ve,
      modelSelectionField: ha,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "createUser",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Ve,
      modelSelectionField: Ve,
      isBulk: !1,
      isDeleter: !1,
      variables: { user: { required: !1, type: "CreateUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ei,
    },
    {
      type: "action",
      operationName: "bulkCreateUsers",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Ve,
      modelSelectionField: ha,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateUsersInput!]" } },
      defaultSelection: Ei,
    },
  ]),
  In = { __typename: !0, id: !0, createdAt: !0, name: !0, updatedAt: !0 },
  dt = "widget",
  ur = "widgets",
  tk = xd(dt, ur, In, [
    { type: "findOne", operationName: dt, modelApiIdentifier: dt, findByVariableName: "id", defaultSelection: In },
    { type: "maybeFindOne", operationName: dt, modelApiIdentifier: dt, findByVariableName: "id", defaultSelection: In },
    { type: "findMany", operationName: ur, modelApiIdentifier: dt, defaultSelection: In },
    { type: "findFirst", operationName: ur, modelApiIdentifier: dt, defaultSelection: In },
    { type: "maybeFindFirst", operationName: ur, modelApiIdentifier: dt, defaultSelection: In },
    {
      type: "findOne",
      operationName: ur,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: dt,
      defaultSelection: In,
    },
    {
      type: "action",
      operationName: "createWidget",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: dt,
      modelSelectionField: dt,
      isBulk: !1,
      isDeleter: !1,
      variables: { widget: { required: !1, type: "CreateWidgetInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: In,
    },
    {
      type: "action",
      operationName: "bulkCreateWidgets",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: dt,
      modelSelectionField: ur,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateWidgetsInput!]" } },
      defaultSelection: In,
    },
    {
      type: "action",
      operationName: "updateWidget",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: dt,
      modelSelectionField: dt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, widget: { required: !1, type: "UpdateWidgetInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: In,
    },
    {
      type: "action",
      operationName: "bulkUpdateWidgets",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: dt,
      modelSelectionField: ur,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateWidgetsInput!]" } },
      defaultSelection: In,
    },
    {
      type: "action",
      operationName: "deleteWidget",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: dt,
      modelSelectionField: dt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteWidgets",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: dt,
      modelSelectionField: ur,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "flipDownWidget",
      functionName: "flipDown",
      namespace: null,
      modelApiIdentifier: dt,
      modelSelectionField: dt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: In,
    },
    {
      type: "action",
      operationName: "bulkFlipDownWidgets",
      functionName: "bulkFlipDown",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "flipDown",
      modelApiIdentifier: dt,
      modelSelectionField: ur,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: In,
    },
  ]),
  Rf = { __typename: !0, id: !0, state: !0, createdAt: !0, roles: { key: !0, name: !0 }, updatedAt: !0 },
  Bf = "session",
  ik = "sessions",
  nk = xd(Bf, ik, Rf, [{ type: "get", operationName: "currentSession", defaultSelection: Rf, modelApiIdentifier: Bf }]);
var Eg;
const Cf = "production",
  ak = "development",
  rk = Symbol.for("gadget/modelRelationships"),
  ok = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let sk = class {
  constructor(t) {
    var a;
    (this.apiRoots = {
      development: "https://bulk-actions-test--development.gadget.app/",
      production: "https://bulk-actions-test.gadget.app/",
    }),
      (this.applicationId = "6681"),
      (this[Eg] = {
        session: { user: { type: "BelongsTo", model: "user" } },
        user: { sessions: { type: "HasMany", model: "session" } },
        widget: {},
      }),
      (this.flipAll = Object.assign(
        async (r) => await gs(this.connection, "flipAll", { why: { value: r.why, required: !1, type: "String" } }, null),
        { type: "globalAction", operationName: "flipAll", namespace: null, variables: { why: { required: !1, type: "String" } } }
      )),
      (this.transaction = async (r) => await this.connection.transaction(r)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken),
      (this.environment = ((t == null ? void 0 : t.environment) ?? ok() ?? ak).toLocaleLowerCase());
    let i;
    this.apiRoots[this.environment]
      ? (i = this.apiRoots[this.environment])
      : (i = `https://bulk-actions-test${this.environment == Cf ? "" : `--${this.environment}`}.gadget.app`);
    const n = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== Cf) {
      const r =
        ({ forward: o }) =>
        (s) => {
          const l = o(s);
          return Vn(
            l,
            Bi((d) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const u = new CustomEvent("gadget:devharness:graphqlresult", { detail: d });
                  window.dispatchEvent(u);
                }
              } catch (u) {
                console.warn("[gadget] error dispatching gadget dev harness event", u);
              }
              return d;
            })
          );
        };
      n.beforeAll = [r, ...(n.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", i).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: n,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((a = t == null ? void 0 : t.authenticationMode) != null && a.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.session = new KS(this.connection)),
      (this.user = new ek(this.connection)),
      (this.widget = new tk(this.connection)),
      (this.currentSession = new nk(this.connection)),
      (this.internal = {
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifier: !1 }),
        user: new B("user", this.connection, { pluralApiIdentifier: "users", hasAmbiguousIdentifier: !1 }),
        widget: new B("widget", this.connection, { pluralApiIdentifier: "widgets", hasAmbiguousIdentifier: !1 }),
      });
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
Eg = rk;
const $c = (e, t, i, n) => {
  const a = class {
    constructor(r) {
      this.connection = r;
    }
  };
  for (const r of n)
    switch (r.type) {
      case "maybeFindOne":
      case "findOne": {
        "functionName" in r
          ? (a.prototype[r.functionName] = Object.assign(async function (o, s) {
              return await Ni(this, r.operationName, r.findByField, o, i, e, s);
            }, r))
          : (a.prototype[r.type] = Object.assign(async function (o, s) {
              const l = await ye(this, e, o, i, e, s, r.type != "maybeFindOne");
              return l.isEmpty() ? null : l;
            }, r));
        break;
      }
      case "findMany": {
        a.prototype.findMany = Object.assign(async function (o) {
          return await se(this, t, i, e, o);
        }, r);
        break;
      }
      case "maybeFindFirst":
      case "findFirst": {
        a.prototype[r.type] = Object.assign(async function (o) {
          const s = await se(this, t, i, e, { ...o, first: 1, last: void 0, before: void 0, after: void 0 }, r.type != "maybeFindFirst");
          return (s == null ? void 0 : s[0]) ?? null;
        }, r);
        break;
      }
      case "get": {
        a.prototype.get = Object.assign(async function (o) {
          return await ye(this, r.operationName, void 0, i, e, o);
        }, r);
        break;
      }
      case "action": {
        if (r.isBulk) {
          const o = !!r.variables.ids;
          a.prototype[r.functionName] = Object.assign(async function (s, l) {
            let d;
            return (
              o
                ? (d = { ids: { ...r.variables.ids, value: s } })
                : (d = { inputs: { ...r.variables.inputs, value: s.map((u) => Dg(this[r.singleActionFunctionName], void 0, u)) } }),
              await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !0, d, l, r.namespace, r.hasReturnType)
            );
          }, r);
        } else {
          const o = !!r.variables.id,
            s = Object.keys(r.variables).filter((l) => l != "id").length > 0;
          a.prototype[r.functionName] = Object.assign(async function (...l) {
            const [d, u] = lk(r, o, s, l);
            return await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !1, d, u, r.namespace, r.hasReturnType);
          }, r);
        }
        break;
      }
    }
  return a;
};
function Dg(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
function lk(e, t, i, n) {
  let a, r;
  t && (a = n.shift()), i && (r = n.shift());
  const o = n.shift();
  let s = r;
  (a || r) && (s = Dg(e, a, r));
  const l = {};
  for (const [d, u] of Object.entries(e.variables)) l[d] = { value: d == "id" ? a : s == null ? void 0 : s[d], ...u };
  return [l, o];
}
const fo = { __typename: !0, id: !0, state: !0, createdAt: !0, updatedAt: !0 },
  cr = "session",
  Ps = "sessions",
  dk = $c(cr, Ps, fo, [
    { type: "findOne", operationName: cr, modelApiIdentifier: cr, findByVariableName: "id", defaultSelection: fo },
    { type: "maybeFindOne", operationName: cr, modelApiIdentifier: cr, findByVariableName: "id", defaultSelection: fo },
    { type: "findMany", operationName: Ps, modelApiIdentifier: cr, defaultSelection: fo },
    { type: "findFirst", operationName: Ps, modelApiIdentifier: cr, defaultSelection: fo },
    { type: "maybeFindFirst", operationName: Ps, modelApiIdentifier: cr, defaultSelection: fo },
    {
      type: "findOne",
      operationName: Ps,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: cr,
      defaultSelection: fo,
    },
  ]),
  Fe = {
    __typename: !0,
    id: !0,
    createdAt: !0,
    email: !0,
    emailVerificationToken: !0,
    emailVerificationTokenExpiration: !0,
    emailVerified: !0,
    firstName: !0,
    googleImageUrl: !0,
    googleProfileId: !0,
    lastName: !0,
    lastSignedIn: !0,
    resetPasswordToken: !0,
    resetPasswordTokenExpiration: !0,
    roles: { key: !0, name: !0 },
    updatedAt: !0,
  },
  ie = "user",
  pi = "users",
  uk = $c(ie, pi, Fe, [
    { type: "findOne", operationName: ie, modelApiIdentifier: ie, findByVariableName: "id", defaultSelection: Fe },
    { type: "maybeFindOne", operationName: ie, modelApiIdentifier: ie, findByVariableName: "id", defaultSelection: Fe },
    { type: "findMany", operationName: pi, modelApiIdentifier: ie, defaultSelection: Fe },
    { type: "findFirst", operationName: pi, modelApiIdentifier: ie, defaultSelection: Fe },
    { type: "maybeFindFirst", operationName: pi, modelApiIdentifier: ie, defaultSelection: Fe },
    {
      type: "findOne",
      operationName: pi,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ie,
      defaultSelection: Fe,
    },
    {
      type: "findOne",
      operationName: pi,
      functionName: "findByEmail",
      findByField: "email",
      findByVariableName: "email",
      modelApiIdentifier: ie,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "signUpUser",
      functionName: "signUp",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !0, type: "String" }, password: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkSignUpUsers",
      functionName: "bulkSignUp",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      singleActionFunctionName: "signUp",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignUpUsersInput!]" } },
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "signInUser",
      functionName: "signIn",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !0, type: "String" }, password: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkSignInUsers",
      functionName: "bulkSignIn",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "signIn",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignInUsersInput!]" } },
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "signOutUser",
      functionName: "signOut",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "SignOutUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkSignOutUsers",
      functionName: "bulkSignOut",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "signOut",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignOutUsersInput!]" } },
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "updateUser",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "UpdateUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkUpdateUsers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateUsersInput!]" } },
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "deleteUser",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteUsers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "sendVerifyEmailUser",
      functionName: "sendVerifyEmail",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkSendVerifyEmailUsers",
      functionName: "bulkSendVerifyEmail",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      singleActionFunctionName: "sendVerifyEmail",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSendVerifyEmailUsersInput!]" } },
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "verifyEmailUser",
      functionName: "verifyEmail",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: { code: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkVerifyEmailUsers",
      functionName: "bulkVerifyEmail",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      singleActionFunctionName: "verifyEmail",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkVerifyEmailUsersInput!]" } },
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "sendResetPasswordUser",
      functionName: "sendResetPassword",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkSendResetPasswordUsers",
      functionName: "bulkSendResetPassword",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      singleActionFunctionName: "sendResetPassword",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSendResetPasswordUsersInput!]" } },
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "resetPasswordUser",
      functionName: "resetPassword",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: { password: { required: !0, type: "String" }, code: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkResetPasswordUsers",
      functionName: "bulkResetPassword",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      singleActionFunctionName: "resetPassword",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkResetPasswordUsersInput!]" } },
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "changePasswordUser",
      functionName: "changePassword",
      namespace: null,
      modelApiIdentifier: ie,
      modelSelectionField: ie,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        currentPassword: { required: !0, type: "String" },
        newPassword: { required: !0, type: "String" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: Fe,
    },
    {
      type: "action",
      operationName: "bulkChangePasswordUsers",
      functionName: "bulkChangePassword",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "changePassword",
      modelApiIdentifier: ie,
      modelSelectionField: pi,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkChangePasswordUsersInput!]" } },
      defaultSelection: Fe,
    },
  ]),
  Pf = { __typename: !0, id: !0, state: !0, createdAt: !0, updatedAt: !0 },
  Ef = "session",
  ck = "sessions",
  pk = $c(Ef, ck, Pf, [{ type: "get", operationName: "currentSession", defaultSelection: Pf, modelApiIdentifier: Ef }]);
var Ug;
const Df = "production",
  fk = "development",
  mk = Symbol.for("gadget/modelRelationships"),
  yk = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let gk = class {
  constructor(t) {
    var a;
    (this.apiRoots = { development: "https://full-auth--development.gadget.app/", production: "https://full-auth.gadget.app/" }),
      (this.applicationId = "66538"),
      (this[Ug] = { session: { user: { type: "BelongsTo", model: "user" } }, user: {} }),
      (this.transaction = async (r) => await this.connection.transaction(r)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken),
      (this.environment = ((t == null ? void 0 : t.environment) ?? yk() ?? fk).toLocaleLowerCase());
    let i;
    this.apiRoots[this.environment]
      ? (i = this.apiRoots[this.environment])
      : (i = `https://full-auth${this.environment == Df ? "" : `--${this.environment}`}.gadget.app`);
    const n = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== Df) {
      const r =
        ({ forward: o }) =>
        (s) => {
          const l = o(s);
          return Vn(
            l,
            Bi((d) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const u = new CustomEvent("gadget:devharness:graphqlresult", { detail: d });
                  window.dispatchEvent(u);
                }
              } catch (u) {
                console.warn("[gadget] error dispatching gadget dev harness event", u);
              }
              return d;
            })
          );
        };
      n.beforeAll = [r, ...(n.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", i).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: n,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((a = t == null ? void 0 : t.authenticationMode) != null && a.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.session = new dk(this.connection)),
      (this.user = new uk(this.connection)),
      (this.currentSession = new pk(this.connection)),
      (this.internal = {
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifier: !1 }),
        user: new B("user", this.connection, { pluralApiIdentifier: "users", hasAmbiguousIdentifier: !1 }),
      });
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
Ug = mk;
const hk = (e, t = !1) => {
    const i = { ...e };
    return t && (i.__typename = !0), i;
  },
  qg = (e) => Object.fromEntries(Object.entries(e).map(([t, i]) => [t, fe(i)])),
  Vg = (e, t, i, n, a) => {
    let r = { [e]: Jt(i ? qg(i) : {}, hk(n ?? t, !0)) };
    return (
      a && (r = _g(a, r)),
      i ? ni({ type: "query", name: e, fields: r }) : { query: Sy({ type: "query", name: e, fields: r }), variables: {} }
    );
  },
  Uf = async (e, t, i, n, a, r) => {
    const { query: o, variables: s } = Vg(t, i, n, a, r),
      l = await e.currentClient.query(o, s),
      d = $g([t], r);
    return qn(l, d);
  },
  bk = (e, t, i, n) => {
    const a = t,
      r = { query: fe({ type: "String", value: e, required: !0 }) };
    i && (r.variables = fe({ type: "JSONObject", value: i }));
    let o = { [a]: Jt(qg(r)) };
    return n && (o = _g(n, o)), ni({ type: "query", name: a, fields: o });
  },
  vk = async (e, t, i, n, a) => {
    const { query: r, variables: o } = bk(i, t, n, a),
      s = await e.currentClient.query(r, o),
      l = $g([t], a);
    return qn(s, l);
  };
function _g(e, t) {
  if (!e) return t;
  if ((Array.isArray(e) || (e = [e]), e)) for (let i = e.length - 1; i >= 0; i--) t = { [e[i]]: t };
  return t;
}
const $g = (e, t) => (t && e.unshift(...(Array.isArray(t) ? t : [t])), e),
  ce = (e, t, i, n) => {
    const a = class {
      constructor(r) {
        this.connection = r;
      }
    };
    Object.defineProperty(a, "name", { value: `${e}Manager` });
    for (const r of n)
      switch (r.type) {
        case "maybeFindOne":
        case "findOne": {
          const o = !r.type.startsWith("maybe");
          "functionName" in r
            ? (a.prototype[r.functionName] = Object.assign(
                function (s, l) {
                  return Ni(this, r.operationName, r.findByField, s, i, e, l, o, r.namespace);
                },
                r,
                {
                  plan: function (s, l, d) {
                    return Ic(r.operationName, s, l, i, e, d, r.namespace);
                  },
                }
              ))
            : (a.prototype[r.type] = Object.assign(
                function (s, l) {
                  const d = ye(this, e, s, i, e, l, o, r.namespace);
                  return qf(d, (u) => (u.isEmpty() ? null : u));
                },
                r,
                {
                  plan: function (s, l) {
                    return vc(r.operationName, s, i, e, l, r.namespace);
                  },
                }
              ));
          break;
        }
        case "findMany": {
          a.prototype.findMany = Object.assign(
            function (o) {
              return se(this, t, i, e, o, void 0, r.namespace);
            },
            r,
            {
              plan: function (o) {
                return Bo(t, i, e, o, r.namespace);
              },
            }
          );
          break;
        }
        case "maybeFindFirst":
        case "findFirst": {
          a.prototype[r.type] = Object.assign(
            function (o) {
              const s = se(
                this,
                t,
                i,
                e,
                { ...o, first: 1, last: void 0, before: void 0, after: void 0 },
                r.type != "maybeFindFirst",
                r.namespace
              );
              return qf(s, (l) => (l == null ? void 0 : l[0]) ?? null);
            },
            r,
            {
              plan: function (o) {
                return Bo(t, i, e, { ...o, first: 1, last: void 0, before: void 0, after: void 0 }, r.namespace);
              },
            }
          );
          break;
        }
        case "get": {
          a.prototype.get = Object.assign(function (o) {
            return ye(this, r.operationName, void 0, i, e, o, void 0, r.namespace);
          }, r);
          break;
        }
        case "action": {
          if (r.isBulk) {
            const o = !!r.variables.ids;
            a.prototype[r.functionName] = Object.assign(
              async function (s, l) {
                let d;
                return (
                  o
                    ? (d = { ids: { ...r.variables.ids, value: s } })
                    : (d = { inputs: { ...r.variables.inputs, value: s.map((u) => Gg(this[r.singleActionFunctionName], void 0, u)) } }),
                  await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !0, d, l, r.namespace, r.hasReturnType)
                );
              },
              r,
              {
                plan: function (s) {
                  return ol(
                    r.operationName,
                    r.isDeleter ? null : r.defaultSelection,
                    e,
                    r.modelSelectionField,
                    r.variables,
                    s,
                    r.namespace,
                    !0,
                    r.hasReturnType
                  );
                },
              }
            );
          } else {
            const o = !!r.variables.id,
              s = Object.keys(r.variables).filter((l) => l != "id").length > 0;
            a.prototype[r.functionName] = Object.assign(
              async function (...l) {
                const [d, u] = Nk(r, o, s, l);
                return await H(
                  this,
                  r.operationName,
                  r.isDeleter ? null : i,
                  e,
                  r.modelSelectionField,
                  !1,
                  d,
                  u,
                  r.namespace,
                  r.hasReturnType
                );
              },
              r,
              {
                plan: function (l) {
                  return ol(
                    r.operationName,
                    r.isDeleter ? null : r.defaultSelection,
                    e,
                    r.modelSelectionField,
                    r.variables,
                    l,
                    r.namespace,
                    !1,
                    r.hasReturnType
                  );
                },
              }
            );
          }
          break;
        }
        case "stubbedAction": {
          a.prototype[r.functionName] = Object.assign(function (...o) {
            throw (jg(r), new Error(r.errorMessage));
          }, r);
          break;
        }
        case "computedView":
          a.prototype[r.operationName] = kk(r) ? Sk(r) : Ik(r);
      }
    return a;
  },
  ss = (e, t) =>
    t.type == "stubbedAction"
      ? Object.assign((...i) => {
          throw (jg(t), new Error(t.errorMessage));
        }, t)
      : Object.assign(
          async (i = {}) => {
            const n = {};
            for (const [a, r] of Object.entries(t.variables)) n[a] = { value: i[a], ...r };
            return await gs(e.connection, t.operationName, n, t.namespace);
          },
          t,
          {
            plan: function (i, n, a) {
              return Nc(i, n, a);
            },
          }
        );
function Ik(e) {
  const t = e.variables
    ? async function (i = {}, n) {
        let a;
        if (e.variables) {
          a = {};
          for (const [r, o] of Object.entries(e.variables)) a[r] = { value: i[r], ...o };
        }
        return await Uf(this.connection, e.gqlFieldName, e.defaultSelection, a, n == null ? void 0 : n.select, e.namespace);
      }
    : async function (i) {
        return await Uf(this.connection, e.gqlFieldName, e.defaultSelection, void 0, i == null ? void 0 : i.select, e.namespace);
      };
  return Object.assign(t, e, {
    plan: function (i, n, a) {
      return Vg(i, e.defaultSelection, n, void 0, a);
    },
  });
}
function Sk(e) {
  return Object.assign(async function (i, n) {
    return await vk(this.connection, e.gqlFieldName, i, n, e.namespace);
  }, e);
}
function kk(e) {
  return e.functionName == "view";
}
function Gg(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
function Nk(e, t, i, n) {
  let a, r;
  t && (a = n.shift()), i && (r = n.shift());
  const o = n.shift();
  let s = r;
  (a || r) && (s = Gg(e, a, r));
  const l = {};
  for (const [d, u] of Object.entries(e.variables)) l[d] = { value: d == "id" ? a : s == null ? void 0 : s[d], ...u };
  return [l, o];
}
function qf(e, t) {
  return Symbol.asyncIterator in e
    ? {
        [Symbol.asyncIterator]: async function* () {
          for await (const i of e) yield t(i);
        },
      }
    : e.then(t);
}
const jg = (e) => {
    try {
      if (typeof window < "u" && typeof CustomEvent == "function") {
        const t = new CustomEvent("gadget:devharness:stubbedActionError", {
          detail: {
            reason: e.reason,
            action: {
              functionName: e.functionName,
              actionApiIdentifier: e.actionApiIdentifier,
              modelApiIdentifier: e.modelApiIdentifier,
              dataPath: e.dataPath,
            },
          },
        });
        window.dispatchEvent(t);
      }
    } catch (t) {
      console.warn("[gadget] error dispatching gadget dev harness event", t);
    }
  },
  yt = {
    __typename: !0,
    id: !0,
    createdAt: !0,
    email: !0,
    emailVerified: !0,
    firstName: !0,
    googleImageUrl: !0,
    googleProfileId: !0,
    lastName: !0,
    lastSignedIn: !0,
    roles: { key: !0, name: !0 },
    updatedAt: !0,
  },
  he = "user",
  Di = "users",
  Ak = ce(he, Di, yt, [
    { type: "findOne", operationName: he, modelApiIdentifier: he, findByVariableName: "id", defaultSelection: yt, namespace: null },
    { type: "maybeFindOne", operationName: he, modelApiIdentifier: he, findByVariableName: "id", defaultSelection: yt, namespace: null },
    { type: "findMany", operationName: Di, modelApiIdentifier: he, defaultSelection: yt, namespace: null },
    { type: "findFirst", operationName: Di, modelApiIdentifier: he, defaultSelection: yt, namespace: null },
    { type: "maybeFindFirst", operationName: Di, modelApiIdentifier: he, defaultSelection: yt, namespace: null },
    {
      type: "findOne",
      operationName: Di,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: he,
      defaultSelection: yt,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Di,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: he,
      defaultSelection: yt,
      namespace: null,
    },
    {
      type: "findOne",
      operationName: Di,
      functionName: "findByEmail",
      findByField: "email",
      findByVariableName: "email",
      modelApiIdentifier: he,
      defaultSelection: yt,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Di,
      functionName: "maybeFindByEmail",
      findByField: "email",
      findByVariableName: "email",
      modelApiIdentifier: he,
      defaultSelection: yt,
      namespace: null,
    },
    {
      type: "action",
      operationName: "signUpUser",
      operationReturnType: "SignUpUser",
      functionName: "signUp",
      namespace: null,
      modelApiIdentifier: he,
      operatesWithRecordIdentity: !1,
      modelSelectionField: he,
      isBulk: !1,
      isDeleter: !1,
      variables: { user: { required: !1, type: "SignUpUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "bulkSignUpUsers",
      functionName: "bulkSignUp",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "signUp",
      modelApiIdentifier: he,
      modelSelectionField: Di,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignUpUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "signInUser",
      operationReturnType: "SignInUser",
      functionName: "signIn",
      namespace: null,
      modelApiIdentifier: he,
      operatesWithRecordIdentity: !0,
      modelSelectionField: he,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "SignInUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "bulkSignInUsers",
      functionName: "bulkSignIn",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "signIn",
      modelApiIdentifier: he,
      modelSelectionField: Di,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignInUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "signOutUser",
      operationReturnType: "SignOutUser",
      functionName: "signOut",
      namespace: null,
      modelApiIdentifier: he,
      operatesWithRecordIdentity: !0,
      modelSelectionField: he,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "SignOutUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "bulkSignOutUsers",
      functionName: "bulkSignOut",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "signOut",
      modelApiIdentifier: he,
      modelSelectionField: Di,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignOutUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "updateUser",
      operationReturnType: "UpdateUser",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: he,
      operatesWithRecordIdentity: !0,
      modelSelectionField: he,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "UpdateUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "bulkUpdateUsers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: he,
      modelSelectionField: Di,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "deleteUser",
      operationReturnType: "DeleteUser",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: he,
      operatesWithRecordIdentity: !0,
      modelSelectionField: he,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteUsers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: he,
      modelSelectionField: Di,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertUser",
      operationReturnType: "UpsertUser",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: he,
      operatesWithRecordIdentity: !1,
      modelSelectionField: he,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, user: { required: !1, type: "UpsertUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on SignUpUserResult": { hasReturnType: !1 }, "... on UpdateUserResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: yt,
    },
    {
      type: "action",
      operationName: "bulkUpsertUsers",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: he,
      modelSelectionField: Di,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertUsersInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: yt,
    },
  ]),
  xr = {
    __typename: !0,
    id: !0,
    state: !0,
    createdAt: !0,
    roles: { key: !0, name: !0 },
    shopId: !0,
    shopifySID: !0,
    updatedAt: !0,
    userId: !0,
  },
  ba = "session",
  zo = "sessions",
  Fk = ce(ba, zo, xr, [
    { type: "findOne", operationName: ba, modelApiIdentifier: ba, findByVariableName: "id", defaultSelection: xr, namespace: null },
    { type: "maybeFindOne", operationName: ba, modelApiIdentifier: ba, findByVariableName: "id", defaultSelection: xr, namespace: null },
    { type: "findMany", operationName: zo, modelApiIdentifier: ba, defaultSelection: xr, namespace: null },
    { type: "findFirst", operationName: zo, modelApiIdentifier: ba, defaultSelection: xr, namespace: null },
    { type: "maybeFindFirst", operationName: zo, modelApiIdentifier: ba, defaultSelection: xr, namespace: null },
    {
      type: "findOne",
      operationName: zo,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ba,
      defaultSelection: xr,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: zo,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ba,
      defaultSelection: xr,
      namespace: null,
    },
  ]),
  Vf = {
    __typename: !0,
    id: !0,
    state: !0,
    createdAt: !0,
    roles: { key: !0, name: !0 },
    shopId: !0,
    shopifySID: !0,
    updatedAt: !0,
    userId: !0,
  },
  _f = "session",
  wk = "sessions",
  xk = ce(_f, wk, Vf, [{ type: "get", operationName: "currentSession", defaultSelection: Vf, modelApiIdentifier: _f, namespace: null }]),
  _e = {
    __typename: !0,
    id: !0,
    anything: !0,
    birthday: !0,
    category: !0,
    color: !0,
    createdAt: !0,
    description: { markdown: !0, truncatedHTML: !0 },
    embedding: !0,
    inStock: !0,
    inventoryCount: !0,
    isChecked: !0,
    metafields: !0,
    mustBeLongString: !0,
    name: !0,
    roles: { key: !0, name: !0 },
    secretKey: !0,
    sectionId: !0,
    startsAt: !0,
    updatedAt: !0,
  },
  pe = "widget",
  Ui = "widgets",
  Tk = ce(pe, Ui, _e, [
    { type: "findOne", operationName: pe, modelApiIdentifier: pe, findByVariableName: "id", defaultSelection: _e, namespace: null },
    { type: "maybeFindOne", operationName: pe, modelApiIdentifier: pe, findByVariableName: "id", defaultSelection: _e, namespace: null },
    { type: "findMany", operationName: Ui, modelApiIdentifier: pe, defaultSelection: _e, namespace: null },
    { type: "findFirst", operationName: Ui, modelApiIdentifier: pe, defaultSelection: _e, namespace: null },
    { type: "maybeFindFirst", operationName: Ui, modelApiIdentifier: pe, defaultSelection: _e, namespace: null },
    {
      type: "findOne",
      operationName: Ui,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: pe,
      defaultSelection: _e,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Ui,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: pe,
      defaultSelection: _e,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createWidget",
      operationReturnType: "CreateWidget",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: pe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: pe,
      isBulk: !1,
      isDeleter: !1,
      variables: { widget: { required: !1, type: "CreateWidgetInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "bulkCreateWidgets",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: pe,
      modelSelectionField: Ui,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateWidgetsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "updateWidget",
      operationReturnType: "UpdateWidget",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: pe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: pe,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, widget: { required: !1, type: "UpdateWidgetInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "bulkUpdateWidgets",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: pe,
      modelSelectionField: Ui,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateWidgetsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "deleteWidget",
      operationReturnType: "DeleteWidget",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: pe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: pe,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteWidgets",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: pe,
      modelSelectionField: Ui,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "addInventoryWidget",
      operationReturnType: "AddInventoryWidget",
      functionName: "addInventory",
      namespace: null,
      modelApiIdentifier: pe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: pe,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, count: { required: !1, type: "Float" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["count"],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "bulkAddInventoryWidgets",
      functionName: "bulkAddInventory",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "addInventory",
      modelApiIdentifier: pe,
      modelSelectionField: Ui,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkAddInventoryWidgetsInput!]" } },
      paramOnlyVariables: ["count"],
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "alwaysThrowErrorWidget",
      operationReturnType: "AlwaysThrowErrorWidget",
      functionName: "alwaysThrowError",
      namespace: null,
      modelApiIdentifier: pe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: pe,
      isBulk: !1,
      isDeleter: !1,
      variables: { widget: { required: !1, type: "AlwaysThrowErrorWidgetInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "bulkAlwaysThrowErrorWidgets",
      functionName: "bulkAlwaysThrowError",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "alwaysThrowError",
      modelApiIdentifier: pe,
      modelSelectionField: Ui,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkAlwaysThrowErrorWidgetsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "createWithCustomParamsWidget",
      operationReturnType: "CreateWithCustomParamsWidget",
      functionName: "createWithCustomParams",
      namespace: null,
      modelApiIdentifier: pe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: pe,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        widget: { required: !1, type: "CreateWithCustomParamsWidgetInput" },
        customStringParam: { required: !1, type: "String" },
        customNumberParam: { required: !1, type: "Float" },
        customBooleanParam: { required: !1, type: "Boolean" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["customStringParam", "customNumberParam", "customBooleanParam"],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "bulkCreateWithCustomParamsWidgets",
      functionName: "bulkCreateWithCustomParams",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "createWithCustomParams",
      modelApiIdentifier: pe,
      modelSelectionField: Ui,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateWithCustomParamsWidgetsInput!]" } },
      paramOnlyVariables: ["customStringParam", "customNumberParam", "customBooleanParam"],
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "updateWithCustomParamsWidget",
      operationReturnType: "UpdateWithCustomParamsWidget",
      functionName: "updateWithCustomParams",
      namespace: null,
      modelApiIdentifier: pe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: pe,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        widget: { required: !1, type: "UpdateWithCustomParamsWidgetInput" },
        customStringParam: { required: !1, type: "String" },
        customNumberParam: { required: !1, type: "Float" },
        customBooleanParam: { required: !1, type: "Boolean" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["customStringParam", "customNumberParam", "customBooleanParam"],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "bulkUpdateWithCustomParamsWidgets",
      functionName: "bulkUpdateWithCustomParams",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "updateWithCustomParams",
      modelApiIdentifier: pe,
      modelSelectionField: Ui,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateWithCustomParamsWidgetsInput!]" } },
      paramOnlyVariables: ["customStringParam", "customNumberParam", "customBooleanParam"],
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "upsertWidget",
      operationReturnType: "UpsertWidget",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: pe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: pe,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, widget: { required: !1, type: "UpsertWidgetInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateWidgetResult": { hasReturnType: !1 }, "... on UpdateWidgetResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: _e,
    },
    {
      type: "action",
      operationName: "bulkUpsertWidgets",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: pe,
      modelSelectionField: Ui,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertWidgetsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: _e,
    },
  ]),
  qi = {
    __typename: !0,
    id: !0,
    attachment: { url: !0, mimeType: !0, fileName: !0 },
    createdAt: !0,
    name: !0,
    orientation: !0,
    updatedAt: !0,
    widgetId: !0,
  },
  $e = "gizmo",
  va = "gizmos",
  Mk = ce($e, va, qi, [
    { type: "findOne", operationName: $e, modelApiIdentifier: $e, findByVariableName: "id", defaultSelection: qi, namespace: null },
    { type: "maybeFindOne", operationName: $e, modelApiIdentifier: $e, findByVariableName: "id", defaultSelection: qi, namespace: null },
    { type: "findMany", operationName: va, modelApiIdentifier: $e, defaultSelection: qi, namespace: null },
    { type: "findFirst", operationName: va, modelApiIdentifier: $e, defaultSelection: qi, namespace: null },
    { type: "maybeFindFirst", operationName: va, modelApiIdentifier: $e, defaultSelection: qi, namespace: null },
    {
      type: "findOne",
      operationName: va,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: $e,
      defaultSelection: qi,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: va,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: $e,
      defaultSelection: qi,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createGizmo",
      operationReturnType: "CreateGizmo",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: $e,
      operatesWithRecordIdentity: !1,
      modelSelectionField: $e,
      isBulk: !1,
      isDeleter: !1,
      variables: { gizmo: { required: !1, type: "CreateGizmoInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: qi,
    },
    {
      type: "action",
      operationName: "bulkCreateGizmos",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: $e,
      modelSelectionField: va,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateGizmosInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: qi,
    },
    {
      type: "action",
      operationName: "updateGizmo",
      operationReturnType: "UpdateGizmo",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: $e,
      operatesWithRecordIdentity: !0,
      modelSelectionField: $e,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, gizmo: { required: !1, type: "UpdateGizmoInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: qi,
    },
    {
      type: "action",
      operationName: "bulkUpdateGizmos",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: $e,
      modelSelectionField: va,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateGizmosInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: qi,
    },
    {
      type: "action",
      operationName: "deleteGizmo",
      operationReturnType: "DeleteGizmo",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: $e,
      operatesWithRecordIdentity: !0,
      modelSelectionField: $e,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteGizmos",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: $e,
      modelSelectionField: va,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertGizmo",
      operationReturnType: "UpsertGizmo",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: $e,
      operatesWithRecordIdentity: !1,
      modelSelectionField: $e,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, gizmo: { required: !1, type: "UpsertGizmoInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateGizmoResult": { hasReturnType: !1 }, "... on UpdateGizmoResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: qi,
    },
    {
      type: "action",
      operationName: "bulkUpsertGizmos",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: $e,
      modelSelectionField: va,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertGizmosInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: qi,
    },
  ]),
  Vi = { __typename: !0, id: !0, createdAt: !0, label: !0, name: !0, updatedAt: !0 },
  Ge = "section",
  Ia = "sections",
  Ok = ce(Ge, Ia, Vi, [
    { type: "findOne", operationName: Ge, modelApiIdentifier: Ge, findByVariableName: "id", defaultSelection: Vi, namespace: null },
    { type: "maybeFindOne", operationName: Ge, modelApiIdentifier: Ge, findByVariableName: "id", defaultSelection: Vi, namespace: null },
    { type: "findMany", operationName: Ia, modelApiIdentifier: Ge, defaultSelection: Vi, namespace: null },
    { type: "findFirst", operationName: Ia, modelApiIdentifier: Ge, defaultSelection: Vi, namespace: null },
    { type: "maybeFindFirst", operationName: Ia, modelApiIdentifier: Ge, defaultSelection: Vi, namespace: null },
    {
      type: "findOne",
      operationName: Ia,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ge,
      defaultSelection: Vi,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Ia,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ge,
      defaultSelection: Vi,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createSection",
      operationReturnType: "CreateSection",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Ge,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ge,
      isBulk: !1,
      isDeleter: !1,
      variables: { section: { required: !1, type: "CreateSectionInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Vi,
    },
    {
      type: "action",
      operationName: "bulkCreateSections",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Ge,
      modelSelectionField: Ia,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateSectionsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Vi,
    },
    {
      type: "action",
      operationName: "updateSection",
      operationReturnType: "UpdateSection",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Ge,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ge,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, section: { required: !1, type: "UpdateSectionInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Vi,
    },
    {
      type: "action",
      operationName: "bulkUpdateSections",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Ge,
      modelSelectionField: Ia,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateSectionsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Vi,
    },
    {
      type: "action",
      operationName: "deleteSection",
      operationReturnType: "DeleteSection",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Ge,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ge,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteSections",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Ge,
      modelSelectionField: Ia,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertSection",
      operationReturnType: "UpsertSection",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: Ge,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ge,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, section: { required: !1, type: "UpsertSectionInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateSectionResult": { hasReturnType: !1 }, "... on UpdateSectionResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Vi,
    },
    {
      type: "action",
      operationName: "bulkUpsertSections",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Ge,
      modelSelectionField: Ia,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertSectionsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Vi,
    },
  ]),
  _i = { __typename: !0, id: !0, createdAt: !0, updatedAt: !0 },
  je = "modelA",
  Sa = "modelAs",
  Rk = ce(je, Sa, _i, [
    { type: "findOne", operationName: je, modelApiIdentifier: je, findByVariableName: "id", defaultSelection: _i, namespace: null },
    { type: "maybeFindOne", operationName: je, modelApiIdentifier: je, findByVariableName: "id", defaultSelection: _i, namespace: null },
    { type: "findMany", operationName: Sa, modelApiIdentifier: je, defaultSelection: _i, namespace: null },
    { type: "findFirst", operationName: Sa, modelApiIdentifier: je, defaultSelection: _i, namespace: null },
    { type: "maybeFindFirst", operationName: Sa, modelApiIdentifier: je, defaultSelection: _i, namespace: null },
    {
      type: "findOne",
      operationName: Sa,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: je,
      defaultSelection: _i,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Sa,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: je,
      defaultSelection: _i,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createModelA",
      operationReturnType: "CreateModelA",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: je,
      operatesWithRecordIdentity: !1,
      modelSelectionField: je,
      isBulk: !1,
      isDeleter: !1,
      variables: {},
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: _i,
    },
    {
      type: "action",
      operationName: "bulkCreateModelAs",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: je,
      modelSelectionField: Sa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[JSON!]" } },
      paramOnlyVariables: [],
      defaultSelection: _i,
    },
    {
      type: "action",
      operationName: "updateModelA",
      operationReturnType: "UpdateModelA",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: je,
      operatesWithRecordIdentity: !0,
      modelSelectionField: je,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: _i,
    },
    {
      type: "action",
      operationName: "bulkUpdateModelAs",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: je,
      modelSelectionField: Sa,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: _i,
    },
    {
      type: "action",
      operationName: "deleteModelA",
      operationReturnType: "DeleteModelA",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: je,
      operatesWithRecordIdentity: !0,
      modelSelectionField: je,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteModelAs",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: je,
      modelSelectionField: Sa,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertModelA",
      operationReturnType: "UpsertModelA",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: je,
      operatesWithRecordIdentity: !1,
      modelSelectionField: je,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, modelA: { required: !1, type: "UpsertModelAInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateModelAResult": { hasReturnType: !1 }, "... on UpdateModelAResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: _i,
    },
    {
      type: "action",
      operationName: "bulkUpsertModelAs",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: je,
      modelSelectionField: Sa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertModelAsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: _i,
    },
  ]),
  $i = { __typename: !0, id: !0, count: !0, createdAt: !0, name: !0, notes: !0, updatedAt: !0 },
  ze = "part",
  ka = "parts",
  Bk = ce(ze, ka, $i, [
    { type: "findOne", operationName: ze, modelApiIdentifier: ze, findByVariableName: "id", defaultSelection: $i, namespace: null },
    { type: "maybeFindOne", operationName: ze, modelApiIdentifier: ze, findByVariableName: "id", defaultSelection: $i, namespace: null },
    { type: "findMany", operationName: ka, modelApiIdentifier: ze, defaultSelection: $i, namespace: null },
    { type: "findFirst", operationName: ka, modelApiIdentifier: ze, defaultSelection: $i, namespace: null },
    { type: "maybeFindFirst", operationName: ka, modelApiIdentifier: ze, defaultSelection: $i, namespace: null },
    {
      type: "findOne",
      operationName: ka,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ze,
      defaultSelection: $i,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: ka,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ze,
      defaultSelection: $i,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createPart",
      operationReturnType: "CreatePart",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: ze,
      operatesWithRecordIdentity: !1,
      modelSelectionField: ze,
      isBulk: !1,
      isDeleter: !1,
      variables: { part: { required: !1, type: "CreatePartInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: $i,
    },
    {
      type: "action",
      operationName: "bulkCreateParts",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: ze,
      modelSelectionField: ka,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreatePartsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: $i,
    },
    {
      type: "action",
      operationName: "updatePart",
      operationReturnType: "UpdatePart",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: ze,
      operatesWithRecordIdentity: !0,
      modelSelectionField: ze,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, part: { required: !1, type: "UpdatePartInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: $i,
    },
    {
      type: "action",
      operationName: "bulkUpdateParts",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: ze,
      modelSelectionField: ka,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdatePartsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: $i,
    },
    {
      type: "action",
      operationName: "deletePart",
      operationReturnType: "DeletePart",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: ze,
      operatesWithRecordIdentity: !0,
      modelSelectionField: ze,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteParts",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: ze,
      modelSelectionField: ka,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertPart",
      operationReturnType: "UpsertPart",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: ze,
      operatesWithRecordIdentity: !1,
      modelSelectionField: ze,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, part: { required: !1, type: "UpsertPartInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreatePartResult": { hasReturnType: !1 }, "... on UpdatePartResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: $i,
    },
    {
      type: "action",
      operationName: "bulkUpsertParts",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: ze,
      modelSelectionField: ka,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertPartsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: $i,
    },
  ]),
  gt = {
    __typename: !0,
    id: !0,
    bool: !0,
    computed: !0,
    createdAt: !0,
    dt: !0,
    email: !0,
    enum: !0,
    es: !0,
    file: { url: !0, mimeType: !0, fileName: !0 },
    json: !0,
    num: !0,
    rl: { key: !0, name: !0 },
    rt: { markdown: !0, truncatedHTML: !0 },
    str: !0,
    updatedAt: !0,
    url: !0,
    vect: !0,
  },
  me = "autoTableTest",
  Sn = "autoTableTests",
  Ck = ce(me, Sn, gt, [
    { type: "findOne", operationName: me, modelApiIdentifier: me, findByVariableName: "id", defaultSelection: gt, namespace: null },
    { type: "maybeFindOne", operationName: me, modelApiIdentifier: me, findByVariableName: "id", defaultSelection: gt, namespace: null },
    { type: "findMany", operationName: Sn, modelApiIdentifier: me, defaultSelection: gt, namespace: null },
    { type: "findFirst", operationName: Sn, modelApiIdentifier: me, defaultSelection: gt, namespace: null },
    { type: "maybeFindFirst", operationName: Sn, modelApiIdentifier: me, defaultSelection: gt, namespace: null },
    {
      type: "findOne",
      operationName: Sn,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: me,
      defaultSelection: gt,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Sn,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: me,
      defaultSelection: gt,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createAutoTableTest",
      operationReturnType: "CreateAutoTableTest",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: me,
      operatesWithRecordIdentity: !1,
      modelSelectionField: me,
      isBulk: !1,
      isDeleter: !1,
      variables: { autoTableTest: { required: !1, type: "CreateAutoTableTestInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "bulkCreateAutoTableTests",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: me,
      modelSelectionField: Sn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateAutoTableTestsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "updateAutoTableTest",
      operationReturnType: "UpdateAutoTableTest",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: me,
      operatesWithRecordIdentity: !0,
      modelSelectionField: me,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, autoTableTest: { required: !1, type: "UpdateAutoTableTestInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "bulkUpdateAutoTableTests",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: me,
      modelSelectionField: Sn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateAutoTableTestsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "deleteAutoTableTest",
      operationReturnType: "DeleteAutoTableTest",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: me,
      operatesWithRecordIdentity: !0,
      modelSelectionField: me,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteAutoTableTests",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: me,
      modelSelectionField: Sn,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "customActionAutoTableTest",
      operationReturnType: "CustomActionAutoTableTest",
      functionName: "customAction",
      namespace: null,
      modelApiIdentifier: me,
      operatesWithRecordIdentity: !0,
      modelSelectionField: me,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "bulkCustomActionAutoTableTests",
      functionName: "bulkCustomAction",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "customAction",
      modelApiIdentifier: me,
      modelSelectionField: Sn,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "customActionWithParamsAutoTableTest",
      operationReturnType: "CustomActionWithParamsAutoTableTest",
      functionName: "customActionWithParams",
      namespace: null,
      modelApiIdentifier: me,
      operatesWithRecordIdentity: !0,
      modelSelectionField: me,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        stringParam1: { required: !1, type: "String" },
        numberParam1: { required: !1, type: "Float" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["stringParam1", "numberParam1"],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "bulkCustomActionWithParamsAutoTableTests",
      functionName: "bulkCustomActionWithParams",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "customActionWithParams",
      modelApiIdentifier: me,
      modelSelectionField: Sn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCustomActionWithParamsAutoTableTestsInput!]" } },
      paramOnlyVariables: ["stringParam1", "numberParam1"],
      defaultSelection: gt,
    },
    {
      type: "stubbedAction",
      operationName: "noTriggerActionAutoTableTest",
      functionName: "noTriggerAction",
      errorMessage:
        "The action noTriggerAction on model autoTableTest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "noTriggerAction",
      modelApiIdentifier: me,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "autoTableTest.noTriggerAction",
    },
    {
      type: "stubbedAction",
      operationName: "bulkNoTriggerActionAutoTableTests",
      functionName: "bulkNoTriggerAction",
      errorMessage:
        "The action noTriggerAction on model autoTableTest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "noTriggerAction",
      modelApiIdentifier: me,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "autoTableTest.bulkNoTriggerAction",
    },
    {
      type: "action",
      operationName: "updateWithCustomParamsAutoTableTest",
      operationReturnType: "UpdateWithCustomParamsAutoTableTest",
      functionName: "updateWithCustomParams",
      namespace: null,
      modelApiIdentifier: me,
      operatesWithRecordIdentity: !0,
      modelSelectionField: me,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        autoTableTest: { required: !1, type: "UpdateWithCustomParamsAutoTableTestInput" },
        stringParam1: { required: !1, type: "String" },
        str: { required: !1, type: "String" },
        numberParam1: { required: !1, type: "Float" },
        num: { required: !1, type: "Float" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["stringParam1", "str", "numberParam1", "num"],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "bulkUpdateWithCustomParamsAutoTableTests",
      functionName: "bulkUpdateWithCustomParams",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "updateWithCustomParams",
      modelApiIdentifier: me,
      modelSelectionField: Sn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateWithCustomParamsAutoTableTestsInput!]" } },
      paramOnlyVariables: ["stringParam1", "str", "numberParam1", "num"],
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "upsertAutoTableTest",
      operationReturnType: "UpsertAutoTableTest",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: me,
      operatesWithRecordIdentity: !1,
      modelSelectionField: me,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, autoTableTest: { required: !1, type: "UpsertAutoTableTestInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateAutoTableTestResult": { hasReturnType: !1 },
        "... on UpdateAutoTableTestResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: gt,
    },
    {
      type: "action",
      operationName: "bulkUpsertAutoTableTests",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: me,
      modelSelectionField: Sn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertAutoTableTestsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: gt,
    },
  ]),
  Gi = {
    __typename: !0,
    id: !0,
    belongsToParentId: !0,
    createdAt: !0,
    manyBelongsToParentId: !0,
    name: !0,
    someBool: !0,
    someNumber: !0,
    updatedAt: !0,
  },
  We = "_autoTableTestRelatedModel",
  Na = "_autoTableTestRelatedModels",
  Pk = ce(We, Na, Gi, [
    { type: "findOne", operationName: We, modelApiIdentifier: We, findByVariableName: "id", defaultSelection: Gi, namespace: null },
    { type: "maybeFindOne", operationName: We, modelApiIdentifier: We, findByVariableName: "id", defaultSelection: Gi, namespace: null },
    { type: "findMany", operationName: Na, modelApiIdentifier: We, defaultSelection: Gi, namespace: null },
    { type: "findFirst", operationName: Na, modelApiIdentifier: We, defaultSelection: Gi, namespace: null },
    { type: "maybeFindFirst", operationName: Na, modelApiIdentifier: We, defaultSelection: Gi, namespace: null },
    {
      type: "findOne",
      operationName: Na,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: We,
      defaultSelection: Gi,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Na,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: We,
      defaultSelection: Gi,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createAutoTableTestRelatedModel",
      operationReturnType: "CreateAutoTableTestRelatedModel",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: We,
      operatesWithRecordIdentity: !1,
      modelSelectionField: We,
      isBulk: !1,
      isDeleter: !1,
      variables: { _autoTableTestRelatedModel: { required: !1, type: "CreateAutoTableTestRelatedModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Gi,
    },
    {
      type: "action",
      operationName: "bulkCreateAutoTableTestRelatedModels",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: We,
      modelSelectionField: Na,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateAutoTableTestRelatedModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Gi,
    },
    {
      type: "action",
      operationName: "updateAutoTableTestRelatedModel",
      operationReturnType: "UpdateAutoTableTestRelatedModel",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: We,
      operatesWithRecordIdentity: !0,
      modelSelectionField: We,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        _autoTableTestRelatedModel: { required: !1, type: "UpdateAutoTableTestRelatedModelInput" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Gi,
    },
    {
      type: "action",
      operationName: "bulkUpdateAutoTableTestRelatedModels",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: We,
      modelSelectionField: Na,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateAutoTableTestRelatedModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Gi,
    },
    {
      type: "action",
      operationName: "deleteAutoTableTestRelatedModel",
      operationReturnType: "DeleteAutoTableTestRelatedModel",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: We,
      operatesWithRecordIdentity: !0,
      modelSelectionField: We,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteAutoTableTestRelatedModels",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: We,
      modelSelectionField: Na,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertAutoTableTestRelatedModel",
      operationReturnType: "UpsertAutoTableTestRelatedModel",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: We,
      operatesWithRecordIdentity: !1,
      modelSelectionField: We,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        on: { required: !1, type: "[String!]" },
        _autoTableTestRelatedModel: { required: !1, type: "UpsertAutoTableTestRelatedModelInput" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateAutoTableTestRelatedModelResult": { hasReturnType: !1 },
        "... on UpdateAutoTableTestRelatedModelResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Gi,
    },
    {
      type: "action",
      operationName: "bulkUpsertAutoTableTestRelatedModels",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: We,
      modelSelectionField: Na,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertAutoTableTestRelatedModelsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Gi,
    },
  ]),
  Tr = { __typename: !0, id: !0, createdAt: !0, payload: !0, shopId: !0, topic: !0, updatedAt: !0 },
  ji = "shopifyGdprRequest",
  Wo = "shopifyGdprRequests",
  Ek = ce(ji, Wo, Tr, [
    { type: "findOne", operationName: ji, modelApiIdentifier: ji, findByVariableName: "id", defaultSelection: Tr, namespace: null },
    { type: "maybeFindOne", operationName: ji, modelApiIdentifier: ji, findByVariableName: "id", defaultSelection: Tr, namespace: null },
    { type: "findMany", operationName: Wo, modelApiIdentifier: ji, defaultSelection: Tr, namespace: null },
    { type: "findFirst", operationName: Wo, modelApiIdentifier: ji, defaultSelection: Tr, namespace: null },
    { type: "maybeFindFirst", operationName: Wo, modelApiIdentifier: ji, defaultSelection: Tr, namespace: null },
    {
      type: "findOne",
      operationName: Wo,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ji,
      defaultSelection: Tr,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Wo,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ji,
      defaultSelection: Tr,
      namespace: null,
    },
    {
      type: "stubbedAction",
      operationName: "createShopifyGdprRequest",
      functionName: "create",
      errorMessage:
        "The action create on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: ji,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyGdprRequest.create",
    },
    {
      type: "stubbedAction",
      operationName: "bulkCreateShopifyGdprRequests",
      functionName: "bulkCreate",
      errorMessage:
        "The action create on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: ji,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyGdprRequest.bulkCreate",
    },
    {
      type: "stubbedAction",
      operationName: "updateShopifyGdprRequest",
      functionName: "update",
      errorMessage:
        "The action update on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: ji,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyGdprRequest.update",
    },
    {
      type: "stubbedAction",
      operationName: "bulkUpdateShopifyGdprRequests",
      functionName: "bulkUpdate",
      errorMessage:
        "The action update on model shopifyGdprRequest does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: ji,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyGdprRequest.bulkUpdate",
    },
  ]),
  Mr = {
    __typename: !0,
    id: !0,
    body: !0,
    category: !0,
    compareAtPriceRange: !0,
    createdAt: !0,
    handle: !0,
    productCategory: !0,
    productType: !0,
    publishedAt: !0,
    shopId: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    status: !0,
    tags: !0,
    templateSuffix: !0,
    title: !0,
    updatedAt: !0,
    vendor: !0,
  },
  fi = "shopifyProduct",
  Lo = "shopifyProducts",
  Dk = ce(fi, Lo, Mr, [
    { type: "findOne", operationName: fi, modelApiIdentifier: fi, findByVariableName: "id", defaultSelection: Mr, namespace: null },
    { type: "maybeFindOne", operationName: fi, modelApiIdentifier: fi, findByVariableName: "id", defaultSelection: Mr, namespace: null },
    { type: "findMany", operationName: Lo, modelApiIdentifier: fi, defaultSelection: Mr, namespace: null },
    { type: "findFirst", operationName: Lo, modelApiIdentifier: fi, defaultSelection: Mr, namespace: null },
    { type: "maybeFindFirst", operationName: Lo, modelApiIdentifier: fi, defaultSelection: Mr, namespace: null },
    {
      type: "findOne",
      operationName: Lo,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: fi,
      defaultSelection: Mr,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Lo,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: fi,
      defaultSelection: Mr,
      namespace: null,
    },
    {
      type: "stubbedAction",
      operationName: "createShopifyProduct",
      functionName: "create",
      errorMessage:
        "The action create on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: fi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProduct.create",
    },
    {
      type: "stubbedAction",
      operationName: "bulkCreateShopifyProducts",
      functionName: "bulkCreate",
      errorMessage:
        "The action create on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: fi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProduct.bulkCreate",
    },
    {
      type: "stubbedAction",
      operationName: "updateShopifyProduct",
      functionName: "update",
      errorMessage:
        "The action update on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: fi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProduct.update",
    },
    {
      type: "stubbedAction",
      operationName: "bulkUpdateShopifyProducts",
      functionName: "bulkUpdate",
      errorMessage:
        "The action update on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: fi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProduct.bulkUpdate",
    },
    {
      type: "stubbedAction",
      operationName: "deleteShopifyProduct",
      functionName: "delete",
      errorMessage:
        "The action delete on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "delete",
      modelApiIdentifier: fi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProduct.delete",
    },
    {
      type: "stubbedAction",
      operationName: "bulkDeleteShopifyProducts",
      functionName: "bulkDelete",
      errorMessage:
        "The action delete on model shopifyProduct does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "delete",
      modelApiIdentifier: fi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProduct.bulkDelete",
    },
  ]),
  Or = {
    __typename: !0,
    id: !0,
    alt: !0,
    createdAt: !0,
    height: !0,
    position: !0,
    productId: !0,
    shopId: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    source: !0,
    updatedAt: !0,
    width: !0,
  },
  mi = "shopifyProductImage",
  Ho = "shopifyProductImages",
  Uk = ce(mi, Ho, Or, [
    { type: "findOne", operationName: mi, modelApiIdentifier: mi, findByVariableName: "id", defaultSelection: Or, namespace: null },
    { type: "maybeFindOne", operationName: mi, modelApiIdentifier: mi, findByVariableName: "id", defaultSelection: Or, namespace: null },
    { type: "findMany", operationName: Ho, modelApiIdentifier: mi, defaultSelection: Or, namespace: null },
    { type: "findFirst", operationName: Ho, modelApiIdentifier: mi, defaultSelection: Or, namespace: null },
    { type: "maybeFindFirst", operationName: Ho, modelApiIdentifier: mi, defaultSelection: Or, namespace: null },
    {
      type: "findOne",
      operationName: Ho,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: mi,
      defaultSelection: Or,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Ho,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: mi,
      defaultSelection: Or,
      namespace: null,
    },
    {
      type: "stubbedAction",
      operationName: "createShopifyProductImage",
      functionName: "create",
      errorMessage:
        "The action create on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: mi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductImage.create",
    },
    {
      type: "stubbedAction",
      operationName: "bulkCreateShopifyProductImages",
      functionName: "bulkCreate",
      errorMessage:
        "The action create on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: mi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductImage.bulkCreate",
    },
    {
      type: "stubbedAction",
      operationName: "updateShopifyProductImage",
      functionName: "update",
      errorMessage:
        "The action update on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: mi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductImage.update",
    },
    {
      type: "stubbedAction",
      operationName: "bulkUpdateShopifyProductImages",
      functionName: "bulkUpdate",
      errorMessage:
        "The action update on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: mi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductImage.bulkUpdate",
    },
    {
      type: "stubbedAction",
      operationName: "deleteShopifyProductImage",
      functionName: "delete",
      errorMessage:
        "The action delete on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "delete",
      modelApiIdentifier: mi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductImage.delete",
    },
    {
      type: "stubbedAction",
      operationName: "bulkDeleteShopifyProductImages",
      functionName: "bulkDelete",
      errorMessage:
        "The action delete on model shopifyProductImage does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "delete",
      modelApiIdentifier: mi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductImage.bulkDelete",
    },
  ]),
  Rr = { __typename: !0, id: !0, createdAt: !0, name: !0, position: !0, productId: !0, shopId: !0, updatedAt: !0, values: !0 },
  yi = "shopifyProductOption",
  Qo = "shopifyProductOptions",
  qk = ce(yi, Qo, Rr, [
    { type: "findOne", operationName: yi, modelApiIdentifier: yi, findByVariableName: "id", defaultSelection: Rr, namespace: null },
    { type: "maybeFindOne", operationName: yi, modelApiIdentifier: yi, findByVariableName: "id", defaultSelection: Rr, namespace: null },
    { type: "findMany", operationName: Qo, modelApiIdentifier: yi, defaultSelection: Rr, namespace: null },
    { type: "findFirst", operationName: Qo, modelApiIdentifier: yi, defaultSelection: Rr, namespace: null },
    { type: "maybeFindFirst", operationName: Qo, modelApiIdentifier: yi, defaultSelection: Rr, namespace: null },
    {
      type: "findOne",
      operationName: Qo,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: yi,
      defaultSelection: Rr,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Qo,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: yi,
      defaultSelection: Rr,
      namespace: null,
    },
    {
      type: "stubbedAction",
      operationName: "createShopifyProductOption",
      functionName: "create",
      errorMessage:
        "The action create on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: yi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductOption.create",
    },
    {
      type: "stubbedAction",
      operationName: "bulkCreateShopifyProductOptions",
      functionName: "bulkCreate",
      errorMessage:
        "The action create on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: yi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductOption.bulkCreate",
    },
    {
      type: "stubbedAction",
      operationName: "updateShopifyProductOption",
      functionName: "update",
      errorMessage:
        "The action update on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: yi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductOption.update",
    },
    {
      type: "stubbedAction",
      operationName: "bulkUpdateShopifyProductOptions",
      functionName: "bulkUpdate",
      errorMessage:
        "The action update on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: yi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductOption.bulkUpdate",
    },
    {
      type: "stubbedAction",
      operationName: "deleteShopifyProductOption",
      functionName: "delete",
      errorMessage:
        "The action delete on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "delete",
      modelApiIdentifier: yi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductOption.delete",
    },
    {
      type: "stubbedAction",
      operationName: "bulkDeleteShopifyProductOptions",
      functionName: "bulkDelete",
      errorMessage:
        "The action delete on model shopifyProductOption does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "delete",
      modelApiIdentifier: yi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductOption.bulkDelete",
    },
  ]),
  Br = {
    __typename: !0,
    id: !0,
    barcode: !0,
    compareAtPrice: !0,
    createdAt: !0,
    inventoryPolicy: !0,
    inventoryQuantity: !0,
    option1: !0,
    option2: !0,
    option3: !0,
    position: !0,
    presentmentPrices: !0,
    price: !0,
    productId: !0,
    productImageId: !0,
    selectedOptions: !0,
    shopId: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    sku: !0,
    taxCode: !0,
    taxable: !0,
    title: !0,
    updatedAt: !0,
  },
  gi = "shopifyProductVariant",
  Zo = "shopifyProductVariants",
  Vk = ce(gi, Zo, Br, [
    { type: "findOne", operationName: gi, modelApiIdentifier: gi, findByVariableName: "id", defaultSelection: Br, namespace: null },
    { type: "maybeFindOne", operationName: gi, modelApiIdentifier: gi, findByVariableName: "id", defaultSelection: Br, namespace: null },
    { type: "findMany", operationName: Zo, modelApiIdentifier: gi, defaultSelection: Br, namespace: null },
    { type: "findFirst", operationName: Zo, modelApiIdentifier: gi, defaultSelection: Br, namespace: null },
    { type: "maybeFindFirst", operationName: Zo, modelApiIdentifier: gi, defaultSelection: Br, namespace: null },
    {
      type: "findOne",
      operationName: Zo,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: gi,
      defaultSelection: Br,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Zo,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: gi,
      defaultSelection: Br,
      namespace: null,
    },
    {
      type: "stubbedAction",
      operationName: "createShopifyProductVariant",
      functionName: "create",
      errorMessage:
        "The action create on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: gi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductVariant.create",
    },
    {
      type: "stubbedAction",
      operationName: "bulkCreateShopifyProductVariants",
      functionName: "bulkCreate",
      errorMessage:
        "The action create on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "create",
      modelApiIdentifier: gi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductVariant.bulkCreate",
    },
    {
      type: "stubbedAction",
      operationName: "updateShopifyProductVariant",
      functionName: "update",
      errorMessage:
        "The action update on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: gi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductVariant.update",
    },
    {
      type: "stubbedAction",
      operationName: "bulkUpdateShopifyProductVariants",
      functionName: "bulkUpdate",
      errorMessage:
        "The action update on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: gi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductVariant.bulkUpdate",
    },
    {
      type: "stubbedAction",
      operationName: "deleteShopifyProductVariant",
      functionName: "delete",
      errorMessage:
        "The action delete on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "delete",
      modelApiIdentifier: gi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductVariant.delete",
    },
    {
      type: "stubbedAction",
      operationName: "bulkDeleteShopifyProductVariants",
      functionName: "bulkDelete",
      errorMessage:
        "The action delete on model shopifyProductVariant does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "delete",
      modelApiIdentifier: gi,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyProductVariant.bulkDelete",
    },
  ]),
  Cr = {
    __typename: !0,
    id: !0,
    state: !0,
    address1: !0,
    address2: !0,
    checkoutApiSupported: !0,
    city: !0,
    cookieConsentLevel: !0,
    country: !0,
    countryCode: !0,
    countryName: !0,
    countyTaxes: !0,
    createdAt: !0,
    currency: !0,
    customerAccountsV2: !0,
    customerEmail: !0,
    disabledWebhooks: !0,
    domain: !0,
    eligibleForCardReaderGiveaway: !0,
    eligibleForPayments: !0,
    email: !0,
    enabledPresentmentCurrencies: !0,
    finances: !0,
    forceSsl: !0,
    googleAppsDomain: !0,
    googleAppsLoginEnabled: !0,
    grantedScopes: !0,
    hasDiscounts: !0,
    hasGiftCards: !0,
    hasStorefront: !0,
    ianaTimezone: !0,
    installedViaApiKey: !0,
    latitude: !0,
    longitude: !0,
    marketingSmsContentEnabledAtCheckout: !0,
    moneyFormat: !0,
    moneyInEmailsFormat: !0,
    moneyWithCurrencyFormat: !0,
    moneyWithCurrencyInEmailsFormat: !0,
    multiLocationEnabled: !0,
    myshopifyDomain: !0,
    name: !0,
    passwordEnabled: !0,
    phone: !0,
    planDisplayName: !0,
    planName: !0,
    preLaunchEnabled: !0,
    primaryLocale: !0,
    province: !0,
    provinceCode: !0,
    registeredWebhooks: !0,
    requiresExtraPaymentsAgreement: !0,
    setupRequired: !0,
    shopOwner: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    source: !0,
    taxShipping: !0,
    taxesIncluded: !0,
    timezone: !0,
    transactionalSmsDisabled: !0,
    updatedAt: !0,
    weightUnit: !0,
    zipCode: !0,
  },
  Rt = "shopifyShop",
  Jo = "shopifyShops",
  _k = ce(Rt, Jo, Cr, [
    { type: "findOne", operationName: Rt, modelApiIdentifier: Rt, findByVariableName: "id", defaultSelection: Cr, namespace: null },
    { type: "maybeFindOne", operationName: Rt, modelApiIdentifier: Rt, findByVariableName: "id", defaultSelection: Cr, namespace: null },
    { type: "findMany", operationName: Jo, modelApiIdentifier: Rt, defaultSelection: Cr, namespace: null },
    { type: "findFirst", operationName: Jo, modelApiIdentifier: Rt, defaultSelection: Cr, namespace: null },
    { type: "maybeFindFirst", operationName: Jo, modelApiIdentifier: Rt, defaultSelection: Cr, namespace: null },
    {
      type: "findOne",
      operationName: Jo,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Rt,
      defaultSelection: Cr,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Jo,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Rt,
      defaultSelection: Cr,
      namespace: null,
    },
    {
      type: "stubbedAction",
      operationName: "updateShopifyShop",
      functionName: "update",
      errorMessage:
        "The action update on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: Rt,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyShop.update",
    },
    {
      type: "stubbedAction",
      operationName: "bulkUpdateShopifyShops",
      functionName: "bulkUpdate",
      errorMessage:
        "The action update on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "update",
      modelApiIdentifier: Rt,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyShop.bulkUpdate",
    },
    {
      type: "stubbedAction",
      operationName: "installShopifyShop",
      functionName: "install",
      errorMessage:
        "The action install on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "install",
      modelApiIdentifier: Rt,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyShop.install",
    },
    {
      type: "stubbedAction",
      operationName: "bulkInstallShopifyShops",
      functionName: "bulkInstall",
      errorMessage:
        "The action install on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "install",
      modelApiIdentifier: Rt,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyShop.bulkInstall",
    },
    {
      type: "stubbedAction",
      operationName: "reinstallShopifyShop",
      functionName: "reinstall",
      errorMessage:
        "The action reinstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "reinstall",
      modelApiIdentifier: Rt,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyShop.reinstall",
    },
    {
      type: "stubbedAction",
      operationName: "bulkReinstallShopifyShops",
      functionName: "bulkReinstall",
      errorMessage:
        "The action reinstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "reinstall",
      modelApiIdentifier: Rt,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyShop.bulkReinstall",
    },
    {
      type: "stubbedAction",
      operationName: "uninstallShopifyShop",
      functionName: "uninstall",
      errorMessage:
        "The action uninstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "uninstall",
      modelApiIdentifier: Rt,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyShop.uninstall",
    },
    {
      type: "stubbedAction",
      operationName: "bulkUninstallShopifyShops",
      functionName: "bulkUninstall",
      errorMessage:
        "The action uninstall on model shopifyShop does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
      actionApiIdentifier: "uninstall",
      modelApiIdentifier: Rt,
      variables: {},
      reason: "MissingApiTrigger",
      dataPath: "shopifyShop.bulkUninstall",
    },
  ]),
  Bt = {
    __typename: !0,
    id: !0,
    state: !0,
    createdAt: !0,
    domain: !0,
    errorDetails: !0,
    errorMessage: !0,
    force: !0,
    models: !0,
    shopId: !0,
    syncSince: !0,
    updatedAt: !0,
  },
  xe = "shopifySync",
  Wn = "shopifySyncs",
  $k = ce(xe, Wn, Bt, [
    { type: "findOne", operationName: xe, modelApiIdentifier: xe, findByVariableName: "id", defaultSelection: Bt, namespace: null },
    { type: "maybeFindOne", operationName: xe, modelApiIdentifier: xe, findByVariableName: "id", defaultSelection: Bt, namespace: null },
    { type: "findMany", operationName: Wn, modelApiIdentifier: xe, defaultSelection: Bt, namespace: null },
    { type: "findFirst", operationName: Wn, modelApiIdentifier: xe, defaultSelection: Bt, namespace: null },
    { type: "maybeFindFirst", operationName: Wn, modelApiIdentifier: xe, defaultSelection: Bt, namespace: null },
    {
      type: "findOne",
      operationName: Wn,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: xe,
      defaultSelection: Bt,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Wn,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: xe,
      defaultSelection: Bt,
      namespace: null,
    },
    {
      type: "action",
      operationName: "abortShopifySync",
      operationReturnType: "AbortShopifySync",
      functionName: "abort",
      namespace: null,
      modelApiIdentifier: xe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: xe,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifySync: { required: !1, type: "AbortShopifySyncInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "bulkAbortShopifySyncs",
      functionName: "bulkAbort",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "abort",
      modelApiIdentifier: xe,
      modelSelectionField: Wn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkAbortShopifySyncsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "completeShopifySync",
      operationReturnType: "CompleteShopifySync",
      functionName: "complete",
      namespace: null,
      modelApiIdentifier: xe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: xe,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifySync: { required: !1, type: "CompleteShopifySyncInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "bulkCompleteShopifySyncs",
      functionName: "bulkComplete",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "complete",
      modelApiIdentifier: xe,
      modelSelectionField: Wn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCompleteShopifySyncsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "errorShopifySync",
      operationReturnType: "ErrorShopifySync",
      functionName: "error",
      namespace: null,
      modelApiIdentifier: xe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: xe,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifySync: { required: !1, type: "ErrorShopifySyncInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "bulkErrorShopifySyncs",
      functionName: "bulkError",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "error",
      modelApiIdentifier: xe,
      modelSelectionField: Wn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkErrorShopifySyncsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "runShopifySync",
      operationReturnType: "RunShopifySync",
      functionName: "run",
      namespace: null,
      modelApiIdentifier: xe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: xe,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifySync: { required: !1, type: "RunShopifySyncInput" }, startReason: { required: !1, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "bulkRunShopifySyncs",
      functionName: "bulkRun",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "run",
      modelApiIdentifier: xe,
      modelSelectionField: Wn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkRunShopifySyncsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "upsertShopifySync",
      operationReturnType: "UpsertShopifySync",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: xe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: xe,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        on: { required: !1, type: "[String!]" },
        shopifySync: { required: !1, type: "UpsertShopifySyncInput" },
        startReason: { required: !1, type: "String" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on RunShopifySyncResult": { hasReturnType: !1 }, "... on AbortShopifySyncResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Bt,
    },
    {
      type: "action",
      operationName: "bulkUpsertShopifySyncs",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: xe,
      modelSelectionField: Wn,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertShopifySyncsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Bt,
    },
  ]),
  zi = { __typename: !0, id: !0, active: !0, createdAt: !0, gizmoId: !0, name: !0, size: !0, updatedAt: !0, weight: !0, widgetId: !0 },
  Le = "doodad",
  Aa = "doodads",
  Gk = ce(Le, Aa, zi, [
    { type: "findOne", operationName: Le, modelApiIdentifier: Le, findByVariableName: "id", defaultSelection: zi, namespace: null },
    { type: "maybeFindOne", operationName: Le, modelApiIdentifier: Le, findByVariableName: "id", defaultSelection: zi, namespace: null },
    { type: "findMany", operationName: Aa, modelApiIdentifier: Le, defaultSelection: zi, namespace: null },
    { type: "findFirst", operationName: Aa, modelApiIdentifier: Le, defaultSelection: zi, namespace: null },
    { type: "maybeFindFirst", operationName: Aa, modelApiIdentifier: Le, defaultSelection: zi, namespace: null },
    {
      type: "findOne",
      operationName: Aa,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Le,
      defaultSelection: zi,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Aa,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Le,
      defaultSelection: zi,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createDoodad",
      operationReturnType: "CreateDoodad",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Le,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Le,
      isBulk: !1,
      isDeleter: !1,
      variables: { doodad: { required: !1, type: "CreateDoodadInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: zi,
    },
    {
      type: "action",
      operationName: "bulkCreateDoodads",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Le,
      modelSelectionField: Aa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateDoodadsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: zi,
    },
    {
      type: "action",
      operationName: "updateDoodad",
      operationReturnType: "UpdateDoodad",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Le,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Le,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, doodad: { required: !1, type: "UpdateDoodadInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: zi,
    },
    {
      type: "action",
      operationName: "bulkUpdateDoodads",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Le,
      modelSelectionField: Aa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateDoodadsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: zi,
    },
    {
      type: "action",
      operationName: "deleteDoodad",
      operationReturnType: "DeleteDoodad",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Le,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Le,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteDoodads",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Le,
      modelSelectionField: Aa,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertDoodad",
      operationReturnType: "UpsertDoodad",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: Le,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Le,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, doodad: { required: !1, type: "UpsertDoodadInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateDoodadResult": { hasReturnType: !1 }, "... on UpdateDoodadResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: zi,
    },
    {
      type: "action",
      operationName: "bulkUpsertDoodads",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Le,
      modelSelectionField: Aa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertDoodadsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: zi,
    },
  ]),
  Wi = { __typename: !0, id: !0, createdAt: !0, ended: !0, followeeId: !0, followerId: !0, started: !0, updatedAt: !0 },
  He = "friendship",
  Fa = "friendships",
  jk = ce(He, Fa, Wi, [
    { type: "findOne", operationName: He, modelApiIdentifier: He, findByVariableName: "id", defaultSelection: Wi, namespace: null },
    { type: "maybeFindOne", operationName: He, modelApiIdentifier: He, findByVariableName: "id", defaultSelection: Wi, namespace: null },
    { type: "findMany", operationName: Fa, modelApiIdentifier: He, defaultSelection: Wi, namespace: null },
    { type: "findFirst", operationName: Fa, modelApiIdentifier: He, defaultSelection: Wi, namespace: null },
    { type: "maybeFindFirst", operationName: Fa, modelApiIdentifier: He, defaultSelection: Wi, namespace: null },
    {
      type: "findOne",
      operationName: Fa,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: He,
      defaultSelection: Wi,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Fa,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: He,
      defaultSelection: Wi,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createFriendship",
      operationReturnType: "CreateFriendship",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: He,
      operatesWithRecordIdentity: !1,
      modelSelectionField: He,
      isBulk: !1,
      isDeleter: !1,
      variables: { friendship: { required: !1, type: "CreateFriendshipInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Wi,
    },
    {
      type: "action",
      operationName: "bulkCreateFriendships",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: He,
      modelSelectionField: Fa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateFriendshipsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Wi,
    },
    {
      type: "action",
      operationName: "updateFriendship",
      operationReturnType: "UpdateFriendship",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: He,
      operatesWithRecordIdentity: !0,
      modelSelectionField: He,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, friendship: { required: !1, type: "UpdateFriendshipInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Wi,
    },
    {
      type: "action",
      operationName: "bulkUpdateFriendships",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: He,
      modelSelectionField: Fa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateFriendshipsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Wi,
    },
    {
      type: "action",
      operationName: "deleteFriendship",
      operationReturnType: "DeleteFriendship",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: He,
      operatesWithRecordIdentity: !0,
      modelSelectionField: He,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteFriendships",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: He,
      modelSelectionField: Fa,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertFriendship",
      operationReturnType: "UpsertFriendship",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: He,
      operatesWithRecordIdentity: !1,
      modelSelectionField: He,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, friendship: { required: !1, type: "UpsertFriendshipInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateFriendshipResult": { hasReturnType: !1 }, "... on UpdateFriendshipResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Wi,
    },
    {
      type: "action",
      operationName: "bulkUpsertFriendships",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: He,
      modelSelectionField: Fa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertFriendshipsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Wi,
    },
  ]),
  Li = { __typename: !0, id: !0, cityId: !0, createdAt: !0, name: !0, updatedAt: !0 },
  Qe = "tweeter",
  wa = "tweeters",
  zk = ce(Qe, wa, Li, [
    { type: "findOne", operationName: Qe, modelApiIdentifier: Qe, findByVariableName: "id", defaultSelection: Li, namespace: null },
    { type: "maybeFindOne", operationName: Qe, modelApiIdentifier: Qe, findByVariableName: "id", defaultSelection: Li, namespace: null },
    { type: "findMany", operationName: wa, modelApiIdentifier: Qe, defaultSelection: Li, namespace: null },
    { type: "findFirst", operationName: wa, modelApiIdentifier: Qe, defaultSelection: Li, namespace: null },
    { type: "maybeFindFirst", operationName: wa, modelApiIdentifier: Qe, defaultSelection: Li, namespace: null },
    {
      type: "findOne",
      operationName: wa,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Qe,
      defaultSelection: Li,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: wa,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Qe,
      defaultSelection: Li,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createTweeter",
      operationReturnType: "CreateTweeter",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Qe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Qe,
      isBulk: !1,
      isDeleter: !1,
      variables: { tweeter: { required: !1, type: "CreateTweeterInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Li,
    },
    {
      type: "action",
      operationName: "bulkCreateTweeters",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Qe,
      modelSelectionField: wa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateTweetersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Li,
    },
    {
      type: "action",
      operationName: "updateTweeter",
      operationReturnType: "UpdateTweeter",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Qe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Qe,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, tweeter: { required: !1, type: "UpdateTweeterInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Li,
    },
    {
      type: "action",
      operationName: "bulkUpdateTweeters",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Qe,
      modelSelectionField: wa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateTweetersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Li,
    },
    {
      type: "action",
      operationName: "deleteTweeter",
      operationReturnType: "DeleteTweeter",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Qe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Qe,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteTweeters",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Qe,
      modelSelectionField: wa,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertTweeter",
      operationReturnType: "UpsertTweeter",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: Qe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Qe,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, tweeter: { required: !1, type: "UpsertTweeterInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateTweeterResult": { hasReturnType: !1 }, "... on UpdateTweeterResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Li,
    },
    {
      type: "action",
      operationName: "bulkUpsertTweeters",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Qe,
      modelSelectionField: wa,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertTweetersInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Li,
    },
  ]),
  Hi = { __typename: !0, id: !0, createdAt: !0, currentRoundId: !0, name: !0, updatedAt: !0 },
  Ze = "player",
  xa = "players",
  Wk = ce(Ze, xa, Hi, [
    { type: "findOne", operationName: Ze, modelApiIdentifier: Ze, findByVariableName: "id", defaultSelection: Hi, namespace: "game" },
    { type: "maybeFindOne", operationName: Ze, modelApiIdentifier: Ze, findByVariableName: "id", defaultSelection: Hi, namespace: "game" },
    { type: "findMany", operationName: xa, modelApiIdentifier: Ze, defaultSelection: Hi, namespace: "game" },
    { type: "findFirst", operationName: xa, modelApiIdentifier: Ze, defaultSelection: Hi, namespace: "game" },
    { type: "maybeFindFirst", operationName: xa, modelApiIdentifier: Ze, defaultSelection: Hi, namespace: "game" },
    {
      type: "findOne",
      operationName: xa,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ze,
      defaultSelection: Hi,
      namespace: "game",
    },
    {
      type: "maybeFindOne",
      operationName: xa,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ze,
      defaultSelection: Hi,
      namespace: "game",
    },
    {
      type: "action",
      operationName: "createPlayer",
      operationReturnType: "CreateGamePlayer",
      functionName: "create",
      namespace: "game",
      modelApiIdentifier: Ze,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ze,
      isBulk: !1,
      isDeleter: !1,
      variables: { player: { required: !1, type: "CreateGamePlayerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Hi,
    },
    {
      type: "action",
      operationName: "bulkCreatePlayers",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Ze,
      modelSelectionField: xa,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkCreateGamePlayersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Hi,
    },
    {
      type: "action",
      operationName: "updatePlayer",
      operationReturnType: "UpdateGamePlayer",
      functionName: "update",
      namespace: "game",
      modelApiIdentifier: Ze,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ze,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, player: { required: !1, type: "UpdateGamePlayerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Hi,
    },
    {
      type: "action",
      operationName: "bulkUpdatePlayers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Ze,
      modelSelectionField: xa,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpdateGamePlayersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Hi,
    },
    {
      type: "action",
      operationName: "deletePlayer",
      operationReturnType: "DeleteGamePlayer",
      functionName: "delete",
      namespace: "game",
      modelApiIdentifier: Ze,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ze,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeletePlayers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Ze,
      modelSelectionField: xa,
      namespace: "game",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertPlayer",
      operationReturnType: "UpsertGamePlayer",
      functionName: "upsert",
      namespace: "game",
      modelApiIdentifier: Ze,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ze,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, player: { required: !1, type: "UpsertGamePlayerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateGamePlayerResult": { hasReturnType: !1 }, "... on UpdateGamePlayerResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Hi,
    },
    {
      type: "action",
      operationName: "bulkUpsertPlayers",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Ze,
      modelSelectionField: xa,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpsertGamePlayersInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Hi,
    },
  ]),
  Qi = { __typename: !0, id: !0, createdAt: !0, name: !0, stadiumId: !0, updatedAt: !0 },
  Je = "round",
  Ta = "rounds",
  Lk = ce(Je, Ta, Qi, [
    { type: "findOne", operationName: Je, modelApiIdentifier: Je, findByVariableName: "id", defaultSelection: Qi, namespace: "game" },
    { type: "maybeFindOne", operationName: Je, modelApiIdentifier: Je, findByVariableName: "id", defaultSelection: Qi, namespace: "game" },
    { type: "findMany", operationName: Ta, modelApiIdentifier: Je, defaultSelection: Qi, namespace: "game" },
    { type: "findFirst", operationName: Ta, modelApiIdentifier: Je, defaultSelection: Qi, namespace: "game" },
    { type: "maybeFindFirst", operationName: Ta, modelApiIdentifier: Je, defaultSelection: Qi, namespace: "game" },
    {
      type: "findOne",
      operationName: Ta,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Je,
      defaultSelection: Qi,
      namespace: "game",
    },
    {
      type: "maybeFindOne",
      operationName: Ta,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Je,
      defaultSelection: Qi,
      namespace: "game",
    },
    {
      type: "action",
      operationName: "createRound",
      operationReturnType: "CreateGameRound",
      functionName: "create",
      namespace: "game",
      modelApiIdentifier: Je,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Je,
      isBulk: !1,
      isDeleter: !1,
      variables: { round: { required: !1, type: "CreateGameRoundInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Qi,
    },
    {
      type: "action",
      operationName: "bulkCreateRounds",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Je,
      modelSelectionField: Ta,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkCreateGameRoundsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Qi,
    },
    {
      type: "action",
      operationName: "updateRound",
      operationReturnType: "UpdateGameRound",
      functionName: "update",
      namespace: "game",
      modelApiIdentifier: Je,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Je,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, round: { required: !1, type: "UpdateGameRoundInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Qi,
    },
    {
      type: "action",
      operationName: "bulkUpdateRounds",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Je,
      modelSelectionField: Ta,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpdateGameRoundsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Qi,
    },
    {
      type: "action",
      operationName: "deleteRound",
      operationReturnType: "DeleteGameRound",
      functionName: "delete",
      namespace: "game",
      modelApiIdentifier: Je,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Je,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteRounds",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Je,
      modelSelectionField: Ta,
      namespace: "game",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertRound",
      operationReturnType: "UpsertGameRound",
      functionName: "upsert",
      namespace: "game",
      modelApiIdentifier: Je,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Je,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, round: { required: !1, type: "UpsertGameRoundInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateGameRoundResult": { hasReturnType: !1 }, "... on UpdateGameRoundResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Qi,
    },
    {
      type: "action",
      operationName: "bulkUpsertRounds",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Je,
      modelSelectionField: Ta,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpsertGameRoundsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Qi,
    },
  ]),
  Zi = {
    __typename: !0,
    id: !0,
    cityId: !0,
    createdAt: !0,
    name: !0,
    photo: { url: !0, mimeType: !0, fileName: !0 },
    tags: !0,
    type: !0,
    updatedAt: !0,
  },
  Ye = "stadium",
  Ma = "stadia",
  Hk = ce(Ye, Ma, Zi, [
    { type: "findOne", operationName: Ye, modelApiIdentifier: Ye, findByVariableName: "id", defaultSelection: Zi, namespace: "game" },
    { type: "maybeFindOne", operationName: Ye, modelApiIdentifier: Ye, findByVariableName: "id", defaultSelection: Zi, namespace: "game" },
    { type: "findMany", operationName: Ma, modelApiIdentifier: Ye, defaultSelection: Zi, namespace: "game" },
    { type: "findFirst", operationName: Ma, modelApiIdentifier: Ye, defaultSelection: Zi, namespace: "game" },
    { type: "maybeFindFirst", operationName: Ma, modelApiIdentifier: Ye, defaultSelection: Zi, namespace: "game" },
    {
      type: "findOne",
      operationName: Ma,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ye,
      defaultSelection: Zi,
      namespace: "game",
    },
    {
      type: "maybeFindOne",
      operationName: Ma,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ye,
      defaultSelection: Zi,
      namespace: "game",
    },
    {
      type: "action",
      operationName: "createStadium",
      operationReturnType: "CreateGameStadium",
      functionName: "create",
      namespace: "game",
      modelApiIdentifier: Ye,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ye,
      isBulk: !1,
      isDeleter: !1,
      variables: { stadium: { required: !1, type: "CreateGameStadiumInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Zi,
    },
    {
      type: "action",
      operationName: "bulkCreateStadia",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Ye,
      modelSelectionField: Ma,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkCreateGameStadiaInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Zi,
    },
    {
      type: "action",
      operationName: "updateStadium",
      operationReturnType: "UpdateGameStadium",
      functionName: "update",
      namespace: "game",
      modelApiIdentifier: Ye,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ye,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, stadium: { required: !1, type: "UpdateGameStadiumInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Zi,
    },
    {
      type: "action",
      operationName: "bulkUpdateStadia",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Ye,
      modelSelectionField: Ma,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpdateGameStadiaInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Zi,
    },
    {
      type: "action",
      operationName: "deleteStadium",
      operationReturnType: "DeleteGameStadium",
      functionName: "delete",
      namespace: "game",
      modelApiIdentifier: Ye,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ye,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteStadia",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Ye,
      modelSelectionField: Ma,
      namespace: "game",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertStadium",
      operationReturnType: "UpsertGameStadium",
      functionName: "upsert",
      namespace: "game",
      modelApiIdentifier: Ye,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ye,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, stadium: { required: !1, type: "UpsertGameStadiumInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateGameStadiumResult": { hasReturnType: !1 }, "... on UpdateGameStadiumResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Zi,
    },
    {
      type: "action",
      operationName: "bulkUpsertStadia",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Ye,
      modelSelectionField: Ma,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpsertGameStadiaInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Zi,
    },
  ]),
  hi = { __typename: !0, id: !0, createdAt: !0, name: !0, updatedAt: !0 },
  Te = "city",
  Ln = "cities",
  Qk = ce(Te, Ln, hi, [
    { type: "findOne", operationName: Te, modelApiIdentifier: Te, findByVariableName: "id", defaultSelection: hi, namespace: "game" },
    { type: "maybeFindOne", operationName: Te, modelApiIdentifier: Te, findByVariableName: "id", defaultSelection: hi, namespace: "game" },
    { type: "findMany", operationName: Ln, modelApiIdentifier: Te, defaultSelection: hi, namespace: "game" },
    { type: "findFirst", operationName: Ln, modelApiIdentifier: Te, defaultSelection: hi, namespace: "game" },
    { type: "maybeFindFirst", operationName: Ln, modelApiIdentifier: Te, defaultSelection: hi, namespace: "game" },
    {
      type: "findOne",
      operationName: Ln,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Te,
      defaultSelection: hi,
      namespace: "game",
    },
    {
      type: "maybeFindOne",
      operationName: Ln,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Te,
      defaultSelection: hi,
      namespace: "game",
    },
    {
      type: "action",
      operationName: "createCity",
      operationReturnType: "CreateGameCity",
      functionName: "create",
      namespace: "game",
      modelApiIdentifier: Te,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Te,
      isBulk: !1,
      isDeleter: !1,
      variables: { city: { required: !1, type: "CreateGameCityInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: hi,
    },
    {
      type: "action",
      operationName: "bulkCreateCities",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Te,
      modelSelectionField: Ln,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkCreateGameCitiesInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: hi,
    },
    {
      type: "action",
      operationName: "updateCity",
      operationReturnType: "UpdateGameCity",
      functionName: "update",
      namespace: "game",
      modelApiIdentifier: Te,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Te,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, city: { required: !1, type: "UpdateGameCityInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: hi,
    },
    {
      type: "action",
      operationName: "bulkUpdateCities",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Te,
      modelSelectionField: Ln,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpdateGameCitiesInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: hi,
    },
    {
      type: "action",
      operationName: "deleteCity",
      operationReturnType: "DeleteGameCity",
      functionName: "delete",
      namespace: "game",
      modelApiIdentifier: Te,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Te,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteCities",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Te,
      modelSelectionField: Ln,
      namespace: "game",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "customObjectParamsCity",
      operationReturnType: "CustomObjectParamsGameCity",
      functionName: "customObjectParams",
      namespace: "game",
      modelApiIdentifier: Te,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Te,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        city: { required: !1, type: "CustomObjectParamsGameCityInput" },
        objParam: { required: !1, type: "CustomObjectParamsObjParamInput" },
        rootLevelStr: { required: !1, type: "String" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["objParam", "rootLevelStr"],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: hi,
    },
    {
      type: "action",
      operationName: "bulkCustomObjectParamsCities",
      functionName: "bulkCustomObjectParams",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "customObjectParams",
      modelApiIdentifier: Te,
      modelSelectionField: Ln,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkCustomObjectParamsGameCitiesInput!]" } },
      paramOnlyVariables: ["objParam", "rootLevelStr"],
      defaultSelection: hi,
    },
    {
      type: "action",
      operationName: "upsertCity",
      operationReturnType: "UpsertGameCity",
      functionName: "upsert",
      namespace: "game",
      modelApiIdentifier: Te,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Te,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, city: { required: !1, type: "UpsertGameCityInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateGameCityResult": { hasReturnType: !1 }, "... on UpdateGameCityResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: hi,
    },
    {
      type: "action",
      operationName: "bulkUpsertCities",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Te,
      modelSelectionField: Ln,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpsertGameCitiesInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: hi,
    },
  ]);
let Zk = class {
  constructor(t) {
    (this.clientOrParent = t),
      (this.connection = this.clientOrParent.connection),
      (this.player = new Wk(this.connection)),
      (this.round = new Lk(this.connection)),
      (this.stadium = new Hk(this.connection)),
      (this.city = new Qk(this.connection));
  }
};
const Ji = { __typename: !0, id: !0, baseModelName: !0, createdAt: !0, updatedAt: !0 },
  Xe = "baseModel",
  Oa = "baseModels",
  Jk = ce(Xe, Oa, Ji, [
    {
      type: "findOne",
      operationName: Xe,
      modelApiIdentifier: Xe,
      findByVariableName: "id",
      defaultSelection: Ji,
      namespace: "hasManyThrough",
    },
    {
      type: "maybeFindOne",
      operationName: Xe,
      modelApiIdentifier: Xe,
      findByVariableName: "id",
      defaultSelection: Ji,
      namespace: "hasManyThrough",
    },
    { type: "findMany", operationName: Oa, modelApiIdentifier: Xe, defaultSelection: Ji, namespace: "hasManyThrough" },
    { type: "findFirst", operationName: Oa, modelApiIdentifier: Xe, defaultSelection: Ji, namespace: "hasManyThrough" },
    { type: "maybeFindFirst", operationName: Oa, modelApiIdentifier: Xe, defaultSelection: Ji, namespace: "hasManyThrough" },
    {
      type: "findOne",
      operationName: Oa,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Xe,
      defaultSelection: Ji,
      namespace: "hasManyThrough",
    },
    {
      type: "maybeFindOne",
      operationName: Oa,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Xe,
      defaultSelection: Ji,
      namespace: "hasManyThrough",
    },
    {
      type: "action",
      operationName: "createBaseModel",
      operationReturnType: "CreateHasManyThroughBaseModel",
      functionName: "create",
      namespace: "hasManyThrough",
      modelApiIdentifier: Xe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Xe,
      isBulk: !1,
      isDeleter: !1,
      variables: { baseModel: { required: !1, type: "CreateHasManyThroughBaseModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ji,
    },
    {
      type: "action",
      operationName: "bulkCreateBaseModels",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Xe,
      modelSelectionField: Oa,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkCreateHasManyThroughBaseModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Ji,
    },
    {
      type: "action",
      operationName: "updateBaseModel",
      operationReturnType: "UpdateHasManyThroughBaseModel",
      functionName: "update",
      namespace: "hasManyThrough",
      modelApiIdentifier: Xe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Xe,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, baseModel: { required: !1, type: "UpdateHasManyThroughBaseModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ji,
    },
    {
      type: "action",
      operationName: "bulkUpdateBaseModels",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Xe,
      modelSelectionField: Oa,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkUpdateHasManyThroughBaseModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Ji,
    },
    {
      type: "action",
      operationName: "deleteBaseModel",
      operationReturnType: "DeleteHasManyThroughBaseModel",
      functionName: "delete",
      namespace: "hasManyThrough",
      modelApiIdentifier: Xe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Xe,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteBaseModels",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Xe,
      modelSelectionField: Oa,
      namespace: "hasManyThrough",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertBaseModel",
      operationReturnType: "UpsertHasManyThroughBaseModel",
      functionName: "upsert",
      namespace: "hasManyThrough",
      modelApiIdentifier: Xe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Xe,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, baseModel: { required: !1, type: "UpsertHasManyThroughBaseModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateHasManyThroughBaseModelResult": { hasReturnType: !1 },
        "... on UpdateHasManyThroughBaseModelResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ji,
    },
    {
      type: "action",
      operationName: "bulkUpsertBaseModels",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Xe,
      modelSelectionField: Oa,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkUpsertHasManyThroughBaseModelsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Ji,
    },
  ]),
  Yi = { __typename: !0, id: !0, createdAt: !0, joinerBelongsToBaseId: !0, joinerBelongsToSiblingId: !0, updatedAt: !0 },
  Ke = "joinerModel",
  Ra = "joinerModels",
  Yk = ce(Ke, Ra, Yi, [
    {
      type: "findOne",
      operationName: Ke,
      modelApiIdentifier: Ke,
      findByVariableName: "id",
      defaultSelection: Yi,
      namespace: "hasManyThrough",
    },
    {
      type: "maybeFindOne",
      operationName: Ke,
      modelApiIdentifier: Ke,
      findByVariableName: "id",
      defaultSelection: Yi,
      namespace: "hasManyThrough",
    },
    { type: "findMany", operationName: Ra, modelApiIdentifier: Ke, defaultSelection: Yi, namespace: "hasManyThrough" },
    { type: "findFirst", operationName: Ra, modelApiIdentifier: Ke, defaultSelection: Yi, namespace: "hasManyThrough" },
    { type: "maybeFindFirst", operationName: Ra, modelApiIdentifier: Ke, defaultSelection: Yi, namespace: "hasManyThrough" },
    {
      type: "findOne",
      operationName: Ra,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ke,
      defaultSelection: Yi,
      namespace: "hasManyThrough",
    },
    {
      type: "maybeFindOne",
      operationName: Ra,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ke,
      defaultSelection: Yi,
      namespace: "hasManyThrough",
    },
    {
      type: "action",
      operationName: "createJoinerModel",
      operationReturnType: "CreateHasManyThroughJoinerModel",
      functionName: "create",
      namespace: "hasManyThrough",
      modelApiIdentifier: Ke,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ke,
      isBulk: !1,
      isDeleter: !1,
      variables: { joinerModel: { required: !1, type: "CreateHasManyThroughJoinerModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Yi,
    },
    {
      type: "action",
      operationName: "bulkCreateJoinerModels",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Ke,
      modelSelectionField: Ra,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkCreateHasManyThroughJoinerModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Yi,
    },
    {
      type: "action",
      operationName: "updateJoinerModel",
      operationReturnType: "UpdateHasManyThroughJoinerModel",
      functionName: "update",
      namespace: "hasManyThrough",
      modelApiIdentifier: Ke,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ke,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, joinerModel: { required: !1, type: "UpdateHasManyThroughJoinerModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Yi,
    },
    {
      type: "action",
      operationName: "bulkUpdateJoinerModels",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Ke,
      modelSelectionField: Ra,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkUpdateHasManyThroughJoinerModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Yi,
    },
    {
      type: "action",
      operationName: "deleteJoinerModel",
      operationReturnType: "DeleteHasManyThroughJoinerModel",
      functionName: "delete",
      namespace: "hasManyThrough",
      modelApiIdentifier: Ke,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ke,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteJoinerModels",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Ke,
      modelSelectionField: Ra,
      namespace: "hasManyThrough",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertJoinerModel",
      operationReturnType: "UpsertHasManyThroughJoinerModel",
      functionName: "upsert",
      namespace: "hasManyThrough",
      modelApiIdentifier: Ke,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ke,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, joinerModel: { required: !1, type: "UpsertHasManyThroughJoinerModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateHasManyThroughJoinerModelResult": { hasReturnType: !1 },
        "... on UpdateHasManyThroughJoinerModelResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Yi,
    },
    {
      type: "action",
      operationName: "bulkUpsertJoinerModels",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Ke,
      modelSelectionField: Ra,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkUpsertHasManyThroughJoinerModelsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Yi,
    },
  ]),
  Xi = { __typename: !0, id: !0, createdAt: !0, siblingName: !0, updatedAt: !0 },
  et = "siblingModel",
  Ba = "siblingModels",
  Xk = ce(et, Ba, Xi, [
    {
      type: "findOne",
      operationName: et,
      modelApiIdentifier: et,
      findByVariableName: "id",
      defaultSelection: Xi,
      namespace: "hasManyThrough",
    },
    {
      type: "maybeFindOne",
      operationName: et,
      modelApiIdentifier: et,
      findByVariableName: "id",
      defaultSelection: Xi,
      namespace: "hasManyThrough",
    },
    { type: "findMany", operationName: Ba, modelApiIdentifier: et, defaultSelection: Xi, namespace: "hasManyThrough" },
    { type: "findFirst", operationName: Ba, modelApiIdentifier: et, defaultSelection: Xi, namespace: "hasManyThrough" },
    { type: "maybeFindFirst", operationName: Ba, modelApiIdentifier: et, defaultSelection: Xi, namespace: "hasManyThrough" },
    {
      type: "findOne",
      operationName: Ba,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: et,
      defaultSelection: Xi,
      namespace: "hasManyThrough",
    },
    {
      type: "maybeFindOne",
      operationName: Ba,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: et,
      defaultSelection: Xi,
      namespace: "hasManyThrough",
    },
    {
      type: "action",
      operationName: "createSiblingModel",
      operationReturnType: "CreateHasManyThroughSiblingModel",
      functionName: "create",
      namespace: "hasManyThrough",
      modelApiIdentifier: et,
      operatesWithRecordIdentity: !1,
      modelSelectionField: et,
      isBulk: !1,
      isDeleter: !1,
      variables: { siblingModel: { required: !1, type: "CreateHasManyThroughSiblingModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Xi,
    },
    {
      type: "action",
      operationName: "bulkCreateSiblingModels",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: et,
      modelSelectionField: Ba,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkCreateHasManyThroughSiblingModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Xi,
    },
    {
      type: "action",
      operationName: "updateSiblingModel",
      operationReturnType: "UpdateHasManyThroughSiblingModel",
      functionName: "update",
      namespace: "hasManyThrough",
      modelApiIdentifier: et,
      operatesWithRecordIdentity: !0,
      modelSelectionField: et,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, siblingModel: { required: !1, type: "UpdateHasManyThroughSiblingModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Xi,
    },
    {
      type: "action",
      operationName: "bulkUpdateSiblingModels",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: et,
      modelSelectionField: Ba,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkUpdateHasManyThroughSiblingModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Xi,
    },
    {
      type: "action",
      operationName: "deleteSiblingModel",
      operationReturnType: "DeleteHasManyThroughSiblingModel",
      functionName: "delete",
      namespace: "hasManyThrough",
      modelApiIdentifier: et,
      operatesWithRecordIdentity: !0,
      modelSelectionField: et,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteSiblingModels",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: et,
      modelSelectionField: Ba,
      namespace: "hasManyThrough",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertSiblingModel",
      operationReturnType: "UpsertHasManyThroughSiblingModel",
      functionName: "upsert",
      namespace: "hasManyThrough",
      modelApiIdentifier: et,
      operatesWithRecordIdentity: !1,
      modelSelectionField: et,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, siblingModel: { required: !1, type: "UpsertHasManyThroughSiblingModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateHasManyThroughSiblingModelResult": { hasReturnType: !1 },
        "... on UpdateHasManyThroughSiblingModelResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Xi,
    },
    {
      type: "action",
      operationName: "bulkUpsertSiblingModels",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: et,
      modelSelectionField: Ba,
      namespace: "hasManyThrough",
      variables: { inputs: { required: !0, type: "[BulkUpsertHasManyThroughSiblingModelsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Xi,
    },
  ]);
class Kk {
  constructor(t) {
    (this.clientOrParent = t),
      (this.connection = this.clientOrParent.connection),
      (this.baseModel = new Jk(this.connection)),
      (this.joinerModel = new Yk(this.connection)),
      (this.siblingModel = new Xk(this.connection));
  }
}
const ht = {
    __typename: !0,
    id: !0,
    createdAt: !0,
    nonUniqueString: !0,
    uniqueBelongsToId: !0,
    uniqueEmail: !0,
    uniqueString: !0,
    updatedAt: !0,
  },
  ke = "mainModel",
  bi = "mainModels",
  eN = ce(ke, bi, ht, [
    {
      type: "findOne",
      operationName: ke,
      modelApiIdentifier: ke,
      findByVariableName: "id",
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: ke,
      modelApiIdentifier: ke,
      findByVariableName: "id",
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    { type: "findMany", operationName: bi, modelApiIdentifier: ke, defaultSelection: ht, namespace: "uniqueFields" },
    { type: "findFirst", operationName: bi, modelApiIdentifier: ke, defaultSelection: ht, namespace: "uniqueFields" },
    { type: "maybeFindFirst", operationName: bi, modelApiIdentifier: ke, defaultSelection: ht, namespace: "uniqueFields" },
    {
      type: "findOne",
      operationName: bi,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ke,
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: bi,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ke,
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "findOne",
      operationName: bi,
      functionName: "findByUniqueString",
      findByField: "uniqueString",
      findByVariableName: "uniqueString",
      modelApiIdentifier: ke,
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: bi,
      functionName: "maybeFindByUniqueString",
      findByField: "uniqueString",
      findByVariableName: "uniqueString",
      modelApiIdentifier: ke,
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "findOne",
      operationName: bi,
      functionName: "findByUniqueEmail",
      findByField: "uniqueEmail",
      findByVariableName: "uniqueEmail",
      modelApiIdentifier: ke,
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: bi,
      functionName: "maybeFindByUniqueEmail",
      findByField: "uniqueEmail",
      findByVariableName: "uniqueEmail",
      modelApiIdentifier: ke,
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "findOne",
      operationName: bi,
      functionName: "findByUniqueBelongsTo",
      findByField: "uniqueBelongsToId",
      findByVariableName: "uniqueBelongsToId",
      modelApiIdentifier: ke,
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: bi,
      functionName: "maybeFindByUniqueBelongsTo",
      findByField: "uniqueBelongsToId",
      findByVariableName: "uniqueBelongsToId",
      modelApiIdentifier: ke,
      defaultSelection: ht,
      namespace: "uniqueFields",
    },
    {
      type: "action",
      operationName: "createMainModel",
      operationReturnType: "CreateUniqueFieldsMainModel",
      functionName: "create",
      namespace: "uniqueFields",
      modelApiIdentifier: ke,
      operatesWithRecordIdentity: !1,
      modelSelectionField: ke,
      isBulk: !1,
      isDeleter: !1,
      variables: { mainModel: { required: !1, type: "CreateUniqueFieldsMainModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ht,
    },
    {
      type: "action",
      operationName: "bulkCreateMainModels",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: ke,
      modelSelectionField: bi,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkCreateUniqueFieldsMainModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: ht,
    },
    {
      type: "action",
      operationName: "updateMainModel",
      operationReturnType: "UpdateUniqueFieldsMainModel",
      functionName: "update",
      namespace: "uniqueFields",
      modelApiIdentifier: ke,
      operatesWithRecordIdentity: !0,
      modelSelectionField: ke,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, mainModel: { required: !1, type: "UpdateUniqueFieldsMainModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ht,
    },
    {
      type: "action",
      operationName: "bulkUpdateMainModels",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: ke,
      modelSelectionField: bi,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkUpdateUniqueFieldsMainModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: ht,
    },
    {
      type: "action",
      operationName: "deleteMainModel",
      operationReturnType: "DeleteUniqueFieldsMainModel",
      functionName: "delete",
      namespace: "uniqueFields",
      modelApiIdentifier: ke,
      operatesWithRecordIdentity: !0,
      modelSelectionField: ke,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteMainModels",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: ke,
      modelSelectionField: bi,
      namespace: "uniqueFields",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertMainModel",
      operationReturnType: "UpsertUniqueFieldsMainModel",
      functionName: "upsert",
      namespace: "uniqueFields",
      modelApiIdentifier: ke,
      operatesWithRecordIdentity: !1,
      modelSelectionField: ke,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, mainModel: { required: !1, type: "UpsertUniqueFieldsMainModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateUniqueFieldsMainModelResult": { hasReturnType: !1 },
        "... on UpdateUniqueFieldsMainModelResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ht,
    },
    {
      type: "action",
      operationName: "bulkUpsertMainModels",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: ke,
      modelSelectionField: bi,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkUpsertUniqueFieldsMainModelsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: ht,
    },
  ]),
  vi = { __typename: !0, id: !0, createdAt: !0, parentNonUniqueString: !0, parentUniqueString: !0, updatedAt: !0 },
  Pe = "parentModel",
  Bn = "parentModels",
  tN = ce(Pe, Bn, vi, [
    {
      type: "findOne",
      operationName: Pe,
      modelApiIdentifier: Pe,
      findByVariableName: "id",
      defaultSelection: vi,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: Pe,
      modelApiIdentifier: Pe,
      findByVariableName: "id",
      defaultSelection: vi,
      namespace: "uniqueFields",
    },
    { type: "findMany", operationName: Bn, modelApiIdentifier: Pe, defaultSelection: vi, namespace: "uniqueFields" },
    { type: "findFirst", operationName: Bn, modelApiIdentifier: Pe, defaultSelection: vi, namespace: "uniqueFields" },
    { type: "maybeFindFirst", operationName: Bn, modelApiIdentifier: Pe, defaultSelection: vi, namespace: "uniqueFields" },
    {
      type: "findOne",
      operationName: Bn,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Pe,
      defaultSelection: vi,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: Bn,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Pe,
      defaultSelection: vi,
      namespace: "uniqueFields",
    },
    {
      type: "findOne",
      operationName: Bn,
      functionName: "findByParentUniqueString",
      findByField: "parentUniqueString",
      findByVariableName: "parentUniqueString",
      modelApiIdentifier: Pe,
      defaultSelection: vi,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: Bn,
      functionName: "maybeFindByParentUniqueString",
      findByField: "parentUniqueString",
      findByVariableName: "parentUniqueString",
      modelApiIdentifier: Pe,
      defaultSelection: vi,
      namespace: "uniqueFields",
    },
    {
      type: "action",
      operationName: "createParentModel",
      operationReturnType: "CreateUniqueFieldsParentModel",
      functionName: "create",
      namespace: "uniqueFields",
      modelApiIdentifier: Pe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Pe,
      isBulk: !1,
      isDeleter: !1,
      variables: { parentModel: { required: !1, type: "CreateUniqueFieldsParentModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: vi,
    },
    {
      type: "action",
      operationName: "bulkCreateParentModels",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Pe,
      modelSelectionField: Bn,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkCreateUniqueFieldsParentModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: vi,
    },
    {
      type: "action",
      operationName: "updateParentModel",
      operationReturnType: "UpdateUniqueFieldsParentModel",
      functionName: "update",
      namespace: "uniqueFields",
      modelApiIdentifier: Pe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Pe,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, parentModel: { required: !1, type: "UpdateUniqueFieldsParentModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: vi,
    },
    {
      type: "action",
      operationName: "bulkUpdateParentModels",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Pe,
      modelSelectionField: Bn,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkUpdateUniqueFieldsParentModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: vi,
    },
    {
      type: "action",
      operationName: "deleteParentModel",
      operationReturnType: "DeleteUniqueFieldsParentModel",
      functionName: "delete",
      namespace: "uniqueFields",
      modelApiIdentifier: Pe,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Pe,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteParentModels",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Pe,
      modelSelectionField: Bn,
      namespace: "uniqueFields",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertParentModel",
      operationReturnType: "UpsertUniqueFieldsParentModel",
      functionName: "upsert",
      namespace: "uniqueFields",
      modelApiIdentifier: Pe,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Pe,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, parentModel: { required: !1, type: "UpsertUniqueFieldsParentModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateUniqueFieldsParentModelResult": { hasReturnType: !1 },
        "... on UpdateUniqueFieldsParentModelResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: vi,
    },
    {
      type: "action",
      operationName: "bulkUpsertParentModels",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Pe,
      modelSelectionField: Bn,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkUpsertUniqueFieldsParentModelsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: vi,
    },
  ]),
  Ki = { __typename: !0, id: !0, alias: !0, createdAt: !0, mainModelParentId: !0, updatedAt: !0 },
  tt = "childModel",
  Ca = "childModels",
  iN = ce(tt, Ca, Ki, [
    {
      type: "findOne",
      operationName: tt,
      modelApiIdentifier: tt,
      findByVariableName: "id",
      defaultSelection: Ki,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: tt,
      modelApiIdentifier: tt,
      findByVariableName: "id",
      defaultSelection: Ki,
      namespace: "uniqueFields",
    },
    { type: "findMany", operationName: Ca, modelApiIdentifier: tt, defaultSelection: Ki, namespace: "uniqueFields" },
    { type: "findFirst", operationName: Ca, modelApiIdentifier: tt, defaultSelection: Ki, namespace: "uniqueFields" },
    { type: "maybeFindFirst", operationName: Ca, modelApiIdentifier: tt, defaultSelection: Ki, namespace: "uniqueFields" },
    {
      type: "findOne",
      operationName: Ca,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: tt,
      defaultSelection: Ki,
      namespace: "uniqueFields",
    },
    {
      type: "maybeFindOne",
      operationName: Ca,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: tt,
      defaultSelection: Ki,
      namespace: "uniqueFields",
    },
    {
      type: "action",
      operationName: "createChildModel",
      operationReturnType: "CreateUniqueFieldsChildModel",
      functionName: "create",
      namespace: "uniqueFields",
      modelApiIdentifier: tt,
      operatesWithRecordIdentity: !1,
      modelSelectionField: tt,
      isBulk: !1,
      isDeleter: !1,
      variables: { childModel: { required: !1, type: "CreateUniqueFieldsChildModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ki,
    },
    {
      type: "action",
      operationName: "bulkCreateChildModels",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: tt,
      modelSelectionField: Ca,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkCreateUniqueFieldsChildModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Ki,
    },
    {
      type: "action",
      operationName: "updateChildModel",
      operationReturnType: "UpdateUniqueFieldsChildModel",
      functionName: "update",
      namespace: "uniqueFields",
      modelApiIdentifier: tt,
      operatesWithRecordIdentity: !0,
      modelSelectionField: tt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, childModel: { required: !1, type: "UpdateUniqueFieldsChildModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ki,
    },
    {
      type: "action",
      operationName: "bulkUpdateChildModels",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: tt,
      modelSelectionField: Ca,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkUpdateUniqueFieldsChildModelsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Ki,
    },
    {
      type: "action",
      operationName: "deleteChildModel",
      operationReturnType: "DeleteUniqueFieldsChildModel",
      functionName: "delete",
      namespace: "uniqueFields",
      modelApiIdentifier: tt,
      operatesWithRecordIdentity: !0,
      modelSelectionField: tt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteChildModels",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: tt,
      modelSelectionField: Ca,
      namespace: "uniqueFields",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertChildModel",
      operationReturnType: "UpsertUniqueFieldsChildModel",
      functionName: "upsert",
      namespace: "uniqueFields",
      modelApiIdentifier: tt,
      operatesWithRecordIdentity: !1,
      modelSelectionField: tt,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, childModel: { required: !1, type: "UpsertUniqueFieldsChildModelInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateUniqueFieldsChildModelResult": { hasReturnType: !1 },
        "... on UpdateUniqueFieldsChildModelResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ki,
    },
    {
      type: "action",
      operationName: "bulkUpsertChildModels",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: tt,
      modelSelectionField: Ca,
      namespace: "uniqueFields",
      variables: { inputs: { required: !0, type: "[BulkUpsertUniqueFieldsChildModelsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Ki,
    },
  ]);
class nN {
  constructor(t) {
    (this.clientOrParent = t),
      (this.connection = this.clientOrParent.connection),
      (this.mainModel = new eN(this.connection)),
      (this.parentModel = new tN(this.connection)),
      (this.childModel = new iN(this.connection));
  }
}
const en = { __typename: !0, id: !0, createdAt: !0, department: !0, firstName: !0, lastName: !0, updatedAt: !0, year: !0 },
  it = "student",
  Pa = "students",
  aN = ce(it, Pa, en, [
    { type: "findOne", operationName: it, modelApiIdentifier: it, findByVariableName: "id", defaultSelection: en, namespace: "university" },
    {
      type: "maybeFindOne",
      operationName: it,
      modelApiIdentifier: it,
      findByVariableName: "id",
      defaultSelection: en,
      namespace: "university",
    },
    { type: "findMany", operationName: Pa, modelApiIdentifier: it, defaultSelection: en, namespace: "university" },
    { type: "findFirst", operationName: Pa, modelApiIdentifier: it, defaultSelection: en, namespace: "university" },
    { type: "maybeFindFirst", operationName: Pa, modelApiIdentifier: it, defaultSelection: en, namespace: "university" },
    {
      type: "findOne",
      operationName: Pa,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: it,
      defaultSelection: en,
      namespace: "university",
    },
    {
      type: "maybeFindOne",
      operationName: Pa,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: it,
      defaultSelection: en,
      namespace: "university",
    },
    {
      type: "action",
      operationName: "createStudent",
      operationReturnType: "CreateUniversityStudent",
      functionName: "create",
      namespace: "university",
      modelApiIdentifier: it,
      operatesWithRecordIdentity: !1,
      modelSelectionField: it,
      isBulk: !1,
      isDeleter: !1,
      variables: { student: { required: !1, type: "CreateUniversityStudentInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: en,
    },
    {
      type: "action",
      operationName: "bulkCreateStudents",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: it,
      modelSelectionField: Pa,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkCreateUniversityStudentsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: en,
    },
    {
      type: "action",
      operationName: "updateStudent",
      operationReturnType: "UpdateUniversityStudent",
      functionName: "update",
      namespace: "university",
      modelApiIdentifier: it,
      operatesWithRecordIdentity: !0,
      modelSelectionField: it,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, student: { required: !1, type: "UpdateUniversityStudentInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: en,
    },
    {
      type: "action",
      operationName: "bulkUpdateStudents",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: it,
      modelSelectionField: Pa,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpdateUniversityStudentsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: en,
    },
    {
      type: "action",
      operationName: "deleteStudent",
      operationReturnType: "DeleteUniversityStudent",
      functionName: "delete",
      namespace: "university",
      modelApiIdentifier: it,
      operatesWithRecordIdentity: !0,
      modelSelectionField: it,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteStudents",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: it,
      modelSelectionField: Pa,
      namespace: "university",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertStudent",
      operationReturnType: "UpsertUniversityStudent",
      functionName: "upsert",
      namespace: "university",
      modelApiIdentifier: it,
      operatesWithRecordIdentity: !1,
      modelSelectionField: it,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, student: { required: !1, type: "UpsertUniversityStudentInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateUniversityStudentResult": { hasReturnType: !1 },
        "... on UpdateUniversityStudentResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: en,
    },
    {
      type: "action",
      operationName: "bulkUpsertStudents",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: it,
      modelSelectionField: Pa,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpsertUniversityStudentsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: en,
    },
  ]),
  tn = { __typename: !0, id: !0, createdAt: !0, description: { markdown: !0, truncatedHTML: !0 }, title: !0, updatedAt: !0 },
  nt = "course",
  Ea = "courses",
  rN = ce(nt, Ea, tn, [
    { type: "findOne", operationName: nt, modelApiIdentifier: nt, findByVariableName: "id", defaultSelection: tn, namespace: "university" },
    {
      type: "maybeFindOne",
      operationName: nt,
      modelApiIdentifier: nt,
      findByVariableName: "id",
      defaultSelection: tn,
      namespace: "university",
    },
    { type: "findMany", operationName: Ea, modelApiIdentifier: nt, defaultSelection: tn, namespace: "university" },
    { type: "findFirst", operationName: Ea, modelApiIdentifier: nt, defaultSelection: tn, namespace: "university" },
    { type: "maybeFindFirst", operationName: Ea, modelApiIdentifier: nt, defaultSelection: tn, namespace: "university" },
    {
      type: "findOne",
      operationName: Ea,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: nt,
      defaultSelection: tn,
      namespace: "university",
    },
    {
      type: "maybeFindOne",
      operationName: Ea,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: nt,
      defaultSelection: tn,
      namespace: "university",
    },
    {
      type: "action",
      operationName: "createCourse",
      operationReturnType: "CreateUniversityCourse",
      functionName: "create",
      namespace: "university",
      modelApiIdentifier: nt,
      operatesWithRecordIdentity: !1,
      modelSelectionField: nt,
      isBulk: !1,
      isDeleter: !1,
      variables: { course: { required: !1, type: "CreateUniversityCourseInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: tn,
    },
    {
      type: "action",
      operationName: "bulkCreateCourses",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: nt,
      modelSelectionField: Ea,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkCreateUniversityCoursesInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: tn,
    },
    {
      type: "action",
      operationName: "updateCourse",
      operationReturnType: "UpdateUniversityCourse",
      functionName: "update",
      namespace: "university",
      modelApiIdentifier: nt,
      operatesWithRecordIdentity: !0,
      modelSelectionField: nt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, course: { required: !1, type: "UpdateUniversityCourseInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: tn,
    },
    {
      type: "action",
      operationName: "bulkUpdateCourses",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: nt,
      modelSelectionField: Ea,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpdateUniversityCoursesInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: tn,
    },
    {
      type: "action",
      operationName: "deleteCourse",
      operationReturnType: "DeleteUniversityCourse",
      functionName: "delete",
      namespace: "university",
      modelApiIdentifier: nt,
      operatesWithRecordIdentity: !0,
      modelSelectionField: nt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteCourses",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: nt,
      modelSelectionField: Ea,
      namespace: "university",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertCourse",
      operationReturnType: "UpsertUniversityCourse",
      functionName: "upsert",
      namespace: "university",
      modelApiIdentifier: nt,
      operatesWithRecordIdentity: !1,
      modelSelectionField: nt,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, course: { required: !1, type: "UpsertUniversityCourseInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateUniversityCourseResult": { hasReturnType: !1 },
        "... on UpdateUniversityCourseResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: tn,
    },
    {
      type: "action",
      operationName: "bulkUpsertCourses",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: nt,
      modelSelectionField: Ea,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpsertUniversityCoursesInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: tn,
    },
  ]),
  nn = { __typename: !0, id: !0, courseId: !0, createdAt: !0, effectiveFrom: !0, effectiveTo: !0, studentId: !0, updatedAt: !0 },
  at = "registration",
  Da = "registrations",
  oN = ce(at, Da, nn, [
    { type: "findOne", operationName: at, modelApiIdentifier: at, findByVariableName: "id", defaultSelection: nn, namespace: "university" },
    {
      type: "maybeFindOne",
      operationName: at,
      modelApiIdentifier: at,
      findByVariableName: "id",
      defaultSelection: nn,
      namespace: "university",
    },
    { type: "findMany", operationName: Da, modelApiIdentifier: at, defaultSelection: nn, namespace: "university" },
    { type: "findFirst", operationName: Da, modelApiIdentifier: at, defaultSelection: nn, namespace: "university" },
    { type: "maybeFindFirst", operationName: Da, modelApiIdentifier: at, defaultSelection: nn, namespace: "university" },
    {
      type: "findOne",
      operationName: Da,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: at,
      defaultSelection: nn,
      namespace: "university",
    },
    {
      type: "maybeFindOne",
      operationName: Da,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: at,
      defaultSelection: nn,
      namespace: "university",
    },
    {
      type: "action",
      operationName: "createRegistration",
      operationReturnType: "CreateUniversityRegistration",
      functionName: "create",
      namespace: "university",
      modelApiIdentifier: at,
      operatesWithRecordIdentity: !1,
      modelSelectionField: at,
      isBulk: !1,
      isDeleter: !1,
      variables: { registration: { required: !1, type: "CreateUniversityRegistrationInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: nn,
    },
    {
      type: "action",
      operationName: "bulkCreateRegistrations",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: at,
      modelSelectionField: Da,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkCreateUniversityRegistrationsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: nn,
    },
    {
      type: "action",
      operationName: "updateRegistration",
      operationReturnType: "UpdateUniversityRegistration",
      functionName: "update",
      namespace: "university",
      modelApiIdentifier: at,
      operatesWithRecordIdentity: !0,
      modelSelectionField: at,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, registration: { required: !1, type: "UpdateUniversityRegistrationInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: nn,
    },
    {
      type: "action",
      operationName: "bulkUpdateRegistrations",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: at,
      modelSelectionField: Da,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpdateUniversityRegistrationsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: nn,
    },
    {
      type: "action",
      operationName: "deleteRegistration",
      operationReturnType: "DeleteUniversityRegistration",
      functionName: "delete",
      namespace: "university",
      modelApiIdentifier: at,
      operatesWithRecordIdentity: !0,
      modelSelectionField: at,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteRegistrations",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: at,
      modelSelectionField: Da,
      namespace: "university",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertRegistration",
      operationReturnType: "UpsertUniversityRegistration",
      functionName: "upsert",
      namespace: "university",
      modelApiIdentifier: at,
      operatesWithRecordIdentity: !1,
      modelSelectionField: at,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, registration: { required: !1, type: "UpsertUniversityRegistrationInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateUniversityRegistrationResult": { hasReturnType: !1 },
        "... on UpdateUniversityRegistrationResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: nn,
    },
    {
      type: "action",
      operationName: "bulkUpsertRegistrations",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: at,
      modelSelectionField: Da,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpsertUniversityRegistrationsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: nn,
    },
  ]),
  an = { __typename: !0, id: !0, createdAt: !0, firstName: !0, lastName: !0, title: !0, updatedAt: !0 },
  rt = "professor",
  Ua = "professors",
  sN = ce(rt, Ua, an, [
    { type: "findOne", operationName: rt, modelApiIdentifier: rt, findByVariableName: "id", defaultSelection: an, namespace: "university" },
    {
      type: "maybeFindOne",
      operationName: rt,
      modelApiIdentifier: rt,
      findByVariableName: "id",
      defaultSelection: an,
      namespace: "university",
    },
    { type: "findMany", operationName: Ua, modelApiIdentifier: rt, defaultSelection: an, namespace: "university" },
    { type: "findFirst", operationName: Ua, modelApiIdentifier: rt, defaultSelection: an, namespace: "university" },
    { type: "maybeFindFirst", operationName: Ua, modelApiIdentifier: rt, defaultSelection: an, namespace: "university" },
    {
      type: "findOne",
      operationName: Ua,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: rt,
      defaultSelection: an,
      namespace: "university",
    },
    {
      type: "maybeFindOne",
      operationName: Ua,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: rt,
      defaultSelection: an,
      namespace: "university",
    },
    {
      type: "action",
      operationName: "createProfessor",
      operationReturnType: "CreateUniversityProfessor",
      functionName: "create",
      namespace: "university",
      modelApiIdentifier: rt,
      operatesWithRecordIdentity: !1,
      modelSelectionField: rt,
      isBulk: !1,
      isDeleter: !1,
      variables: { professor: { required: !1, type: "CreateUniversityProfessorInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: an,
    },
    {
      type: "action",
      operationName: "bulkCreateProfessors",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: rt,
      modelSelectionField: Ua,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkCreateUniversityProfessorsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: an,
    },
    {
      type: "action",
      operationName: "updateProfessor",
      operationReturnType: "UpdateUniversityProfessor",
      functionName: "update",
      namespace: "university",
      modelApiIdentifier: rt,
      operatesWithRecordIdentity: !0,
      modelSelectionField: rt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, professor: { required: !1, type: "UpdateUniversityProfessorInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: an,
    },
    {
      type: "action",
      operationName: "bulkUpdateProfessors",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: rt,
      modelSelectionField: Ua,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpdateUniversityProfessorsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: an,
    },
    {
      type: "action",
      operationName: "deleteProfessor",
      operationReturnType: "DeleteUniversityProfessor",
      functionName: "delete",
      namespace: "university",
      modelApiIdentifier: rt,
      operatesWithRecordIdentity: !0,
      modelSelectionField: rt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteProfessors",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: rt,
      modelSelectionField: Ua,
      namespace: "university",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertProfessor",
      operationReturnType: "UpsertUniversityProfessor",
      functionName: "upsert",
      namespace: "university",
      modelApiIdentifier: rt,
      operatesWithRecordIdentity: !1,
      modelSelectionField: rt,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, professor: { required: !1, type: "UpsertUniversityProfessorInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateUniversityProfessorResult": { hasReturnType: !1 },
        "... on UpdateUniversityProfessorResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: an,
    },
    {
      type: "action",
      operationName: "bulkUpsertProfessors",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: rt,
      modelSelectionField: Ua,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpsertUniversityProfessorsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: an,
    },
  ]),
  rn = { __typename: !0, id: !0, courseId: !0, createdAt: !0, professorId: !0, updatedAt: !0 },
  ot = "assignment",
  qa = "assignments",
  lN = ce(ot, qa, rn, [
    { type: "findOne", operationName: ot, modelApiIdentifier: ot, findByVariableName: "id", defaultSelection: rn, namespace: "university" },
    {
      type: "maybeFindOne",
      operationName: ot,
      modelApiIdentifier: ot,
      findByVariableName: "id",
      defaultSelection: rn,
      namespace: "university",
    },
    { type: "findMany", operationName: qa, modelApiIdentifier: ot, defaultSelection: rn, namespace: "university" },
    { type: "findFirst", operationName: qa, modelApiIdentifier: ot, defaultSelection: rn, namespace: "university" },
    { type: "maybeFindFirst", operationName: qa, modelApiIdentifier: ot, defaultSelection: rn, namespace: "university" },
    {
      type: "findOne",
      operationName: qa,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ot,
      defaultSelection: rn,
      namespace: "university",
    },
    {
      type: "maybeFindOne",
      operationName: qa,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ot,
      defaultSelection: rn,
      namespace: "university",
    },
    {
      type: "action",
      operationName: "createAssignment",
      operationReturnType: "CreateUniversityAssignment",
      functionName: "create",
      namespace: "university",
      modelApiIdentifier: ot,
      operatesWithRecordIdentity: !1,
      modelSelectionField: ot,
      isBulk: !1,
      isDeleter: !1,
      variables: { assignment: { required: !1, type: "CreateUniversityAssignmentInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: rn,
    },
    {
      type: "action",
      operationName: "bulkCreateAssignments",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: ot,
      modelSelectionField: qa,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkCreateUniversityAssignmentsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: rn,
    },
    {
      type: "action",
      operationName: "updateAssignment",
      operationReturnType: "UpdateUniversityAssignment",
      functionName: "update",
      namespace: "university",
      modelApiIdentifier: ot,
      operatesWithRecordIdentity: !0,
      modelSelectionField: ot,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, assignment: { required: !1, type: "UpdateUniversityAssignmentInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: rn,
    },
    {
      type: "action",
      operationName: "bulkUpdateAssignments",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: ot,
      modelSelectionField: qa,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpdateUniversityAssignmentsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: rn,
    },
    {
      type: "action",
      operationName: "deleteAssignment",
      operationReturnType: "DeleteUniversityAssignment",
      functionName: "delete",
      namespace: "university",
      modelApiIdentifier: ot,
      operatesWithRecordIdentity: !0,
      modelSelectionField: ot,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteAssignments",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: ot,
      modelSelectionField: qa,
      namespace: "university",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertAssignment",
      operationReturnType: "UpsertUniversityAssignment",
      functionName: "upsert",
      namespace: "university",
      modelApiIdentifier: ot,
      operatesWithRecordIdentity: !1,
      modelSelectionField: ot,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, assignment: { required: !1, type: "UpsertUniversityAssignmentInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateUniversityAssignmentResult": { hasReturnType: !1 },
        "... on UpdateUniversityAssignmentResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: rn,
    },
    {
      type: "action",
      operationName: "bulkUpsertAssignments",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: ot,
      modelSelectionField: qa,
      namespace: "university",
      variables: { inputs: { required: !0, type: "[BulkUpsertUniversityAssignmentsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: rn,
    },
  ]);
class dN {
  constructor(t) {
    (this.clientOrParent = t),
      (this.connection = this.clientOrParent.connection),
      (this.student = new aN(this.connection)),
      (this.course = new rN(this.connection)),
      (this.registration = new oN(this.connection)),
      (this.professor = new sN(this.connection)),
      (this.assignment = new lN(this.connection));
  }
}
class uN {
  constructor(t) {
    (this.clientOrParent = t),
      (this.actionA = ss(this, {
        type: "globalAction",
        functionName: "actionA",
        operationName: "actionA",
        operationReturnType: "NameSpacedActionA",
        namespace: ["name", "spaced"],
        variables: {},
      })),
      (this.customObjectParams = ss(this, {
        type: "globalAction",
        functionName: "customObjectParams",
        operationName: "customObjectParams",
        operationReturnType: "NameSpacedCustomObjectParams",
        namespace: ["name", "spaced"],
        variables: {
          objParam: { required: !1, type: "NameSpacedCustomObjectParamsObjParamInput" },
          rootLevelStr: { required: !1, type: "String" },
        },
      })),
      (this.noTriggerGlobalAction = ss(this, {
        type: "stubbedAction",
        functionName: "noTriggerGlobalAction",
        actionApiIdentifier: "noTriggerGlobalAction",
        dataPath: "name.spaced.noTriggerGlobalAction",
        errorMessage:
          "The action name/spaced/noTriggerGlobalAction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
        variables: {},
        reason: "MissingApiTrigger",
      })),
      (this.connection = this.clientOrParent.connection);
  }
}
class cN {
  constructor(t) {
    (this.clientOrParent = t), (this.connection = this.clientOrParent.connection), (this.spaced = new uN(this));
  }
}
const $f = "production",
  pN = "development",
  fN = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let zg = class zu {
  constructor(t) {
    var r, o;
    (this.options = t),
      (this.createTestData = ss(this, {
        type: "globalAction",
        functionName: "createTestData",
        operationName: "createTestData",
        operationReturnType: "CreateTestData",
        namespace: null,
        variables: {},
      })),
      (this.flipAll = ss(this, {
        type: "globalAction",
        functionName: "flipAll",
        operationName: "flipAll",
        operationReturnType: "FlipAll",
        namespace: null,
        variables: { inventoryCount: { required: !1, type: "Float" }, title: { required: !1, type: "String" } },
      })),
      (this.noTriggerGlobalAction = ss(this, {
        type: "stubbedAction",
        functionName: "noTriggerGlobalAction",
        actionApiIdentifier: "noTriggerGlobalAction",
        dataPath: "noTriggerGlobalAction",
        errorMessage:
          "The action noTriggerGlobalAction does not have an api trigger and cannot be called from this api client. If you are the developer of this application and want api clients to call this action add an api trigger to the action. For more information see: https://docs.gadget.dev/guides/actions/triggers",
        variables: {},
        reason: "MissingApiTrigger",
      })),
      (this.apiRoots = {
        development: "https://js-clients-test--development.gadget.app/",
        production: "https://js-clients-test.gadget.app/",
      }),
      (this.applicationId = "57882"),
      (this.transaction = async (s) => await this.connection.transaction(s)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken);
    let i = !1;
    try {
      i = !!({ BASE_URL: "./", MODE: "production", DEV: !1, PROD: !0, SSR: !1, STORYBOOK: "true" } && !1);
    } catch {}
    if (i) {
      const s = (r = globalThis.GadgetGlobals) == null ? void 0 : r.api;
      if (s) return s.actAsSession;
    }
    this.environment = ((t == null ? void 0 : t.environment) ?? fN() ?? pN).toLocaleLowerCase();
    let n;
    this.apiRoots[this.environment]
      ? (n = this.apiRoots[this.environment])
      : (n = `https://js-clients-test${this.environment == $f ? "" : `--${this.environment}`}.gadget.app`);
    const a = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== $f) {
      const s =
        ({ forward: l }) =>
        (d) => {
          const u = l(d);
          return Vn(
            u,
            Bi((f) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const p = new CustomEvent("gadget:devharness:graphqlresult", { detail: f });
                  window.dispatchEvent(p);
                }
              } catch (p) {
                console.warn("[gadget] error dispatching gadget dev harness event", p);
              }
              return f;
            })
          );
        };
      a.beforeAll = [s, ...(a.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", n).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: a,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((o = t == null ? void 0 : t.authenticationMode) != null && o.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.user = new Ak(this.connection)),
      (this.session = new Fk(this.connection)),
      (this.currentSession = new xk(this.connection)),
      (this.widget = new Tk(this.connection)),
      (this.gizmo = new Mk(this.connection)),
      (this.section = new Ok(this.connection)),
      (this.modelA = new Rk(this.connection)),
      (this.part = new Bk(this.connection)),
      (this.autoTableTest = new Ck(this.connection)),
      (this._autoTableTestRelatedModel = new Pk(this.connection)),
      (this.shopifyGdprRequest = new Ek(this.connection)),
      (this.shopifyProduct = new Dk(this.connection)),
      (this.shopifyProductImage = new Uk(this.connection)),
      (this.shopifyProductOption = new qk(this.connection)),
      (this.shopifyProductVariant = new Vk(this.connection)),
      (this.shopifyShop = new _k(this.connection)),
      (this.shopifySync = new $k(this.connection)),
      (this.doodad = new Gk(this.connection)),
      (this.friendship = new jk(this.connection)),
      (this.tweeter = new zk(this.connection)),
      (this.game = new Zk(this)),
      (this.hasManyThrough = new Kk(this)),
      (this.uniqueFields = new nN(this)),
      (this.university = new dN(this)),
      (this.name = new cN(this)),
      (this.internal = {
        user: new B("user", this.connection, { pluralApiIdentifier: "users", hasAmbiguousIdentifiers: !1, namespace: [] }),
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifiers: !1, namespace: [] }),
        widget: new B("widget", this.connection, { pluralApiIdentifier: "widgets", hasAmbiguousIdentifiers: !1, namespace: [] }),
        gizmo: new B("gizmo", this.connection, { pluralApiIdentifier: "gizmos", hasAmbiguousIdentifiers: !1, namespace: [] }),
        section: new B("section", this.connection, { pluralApiIdentifier: "sections", hasAmbiguousIdentifiers: !1, namespace: [] }),
        modelA: new B("modelA", this.connection, { pluralApiIdentifier: "modelAs", hasAmbiguousIdentifiers: !1, namespace: [] }),
        part: new B("part", this.connection, { pluralApiIdentifier: "parts", hasAmbiguousIdentifiers: !1, namespace: [] }),
        autoTableTest: new B("autoTableTest", this.connection, {
          pluralApiIdentifier: "autoTableTests",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        _autoTableTestRelatedModel: new B("_autoTableTestRelatedModel", this.connection, {
          pluralApiIdentifier: "_autoTableTestRelatedModels",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        shopifyGdprRequest: new B("shopifyGdprRequest", this.connection, {
          pluralApiIdentifier: "shopifyGdprRequests",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        shopifyProduct: new B("shopifyProduct", this.connection, {
          pluralApiIdentifier: "shopifyProducts",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        shopifyProductImage: new B("shopifyProductImage", this.connection, {
          pluralApiIdentifier: "shopifyProductImages",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        shopifyProductOption: new B("shopifyProductOption", this.connection, {
          pluralApiIdentifier: "shopifyProductOptions",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        shopifyProductVariant: new B("shopifyProductVariant", this.connection, {
          pluralApiIdentifier: "shopifyProductVariants",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        shopifyShop: new B("shopifyShop", this.connection, {
          pluralApiIdentifier: "shopifyShops",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        shopifySync: new B("shopifySync", this.connection, {
          pluralApiIdentifier: "shopifySyncs",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        doodad: new B("doodad", this.connection, { pluralApiIdentifier: "doodads", hasAmbiguousIdentifiers: !1, namespace: [] }),
        friendship: new B("friendship", this.connection, {
          pluralApiIdentifier: "friendships",
          hasAmbiguousIdentifiers: !1,
          namespace: [],
        }),
        tweeter: new B("tweeter", this.connection, { pluralApiIdentifier: "tweeters", hasAmbiguousIdentifiers: !1, namespace: [] }),
        game: {
          player: new B("player", this.connection, { pluralApiIdentifier: "players", hasAmbiguousIdentifiers: !1, namespace: ["game"] }),
          round: new B("round", this.connection, { pluralApiIdentifier: "rounds", hasAmbiguousIdentifiers: !1, namespace: ["game"] }),
          stadium: new B("stadium", this.connection, { pluralApiIdentifier: "stadia", hasAmbiguousIdentifiers: !1, namespace: ["game"] }),
          city: new B("city", this.connection, { pluralApiIdentifier: "cities", hasAmbiguousIdentifiers: !1, namespace: ["game"] }),
        },
        hasManyThrough: {
          baseModel: new B("baseModel", this.connection, {
            pluralApiIdentifier: "baseModels",
            hasAmbiguousIdentifiers: !1,
            namespace: ["hasManyThrough"],
          }),
          joinerModel: new B("joinerModel", this.connection, {
            pluralApiIdentifier: "joinerModels",
            hasAmbiguousIdentifiers: !1,
            namespace: ["hasManyThrough"],
          }),
          siblingModel: new B("siblingModel", this.connection, {
            pluralApiIdentifier: "siblingModels",
            hasAmbiguousIdentifiers: !1,
            namespace: ["hasManyThrough"],
          }),
        },
        uniqueFields: {
          mainModel: new B("mainModel", this.connection, {
            pluralApiIdentifier: "mainModels",
            hasAmbiguousIdentifiers: !1,
            namespace: ["uniqueFields"],
          }),
          parentModel: new B("parentModel", this.connection, {
            pluralApiIdentifier: "parentModels",
            hasAmbiguousIdentifiers: !1,
            namespace: ["uniqueFields"],
          }),
          childModel: new B("childModel", this.connection, {
            pluralApiIdentifier: "childModels",
            hasAmbiguousIdentifiers: !1,
            namespace: ["uniqueFields"],
          }),
        },
        university: {
          student: new B("student", this.connection, {
            pluralApiIdentifier: "students",
            hasAmbiguousIdentifiers: !1,
            namespace: ["university"],
          }),
          course: new B("course", this.connection, {
            pluralApiIdentifier: "courses",
            hasAmbiguousIdentifiers: !1,
            namespace: ["university"],
          }),
          registration: new B("registration", this.connection, {
            pluralApiIdentifier: "registrations",
            hasAmbiguousIdentifiers: !1,
            namespace: ["university"],
          }),
          professor: new B("professor", this.connection, {
            pluralApiIdentifier: "professors",
            hasAmbiguousIdentifiers: !1,
            namespace: ["university"],
          }),
          assignment: new B("assignment", this.connection, {
            pluralApiIdentifier: "assignments",
            hasAmbiguousIdentifiers: !1,
            namespace: ["university"],
          }),
        },
        name: { spaced: {} },
      });
  }
  get actAsAdmin() {
    var t, i;
    return (
      mt(
        (i = (t = this.options) == null ? void 0 : t.authenticationMode) == null ? void 0 : i.internal,
        "actAsAdmin can only be used for API clients using internal authentication"
      ),
      new zu({ ...this.options, authenticationMode: { internal: { ...this.options.authenticationMode.internal, actAsSession: !1 } } })
    );
  }
  get actAsSession() {
    var t, i;
    return (
      mt(
        (i = (t = this.options) == null ? void 0 : t.authenticationMode) == null ? void 0 : i.internal,
        "actAsSession can only be used for API clients using internal authentication"
      ),
      new zu({ ...this.options, authenticationMode: { internal: { ...this.options.authenticationMode.internal, actAsSession: !0 } } })
    );
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
zg.prototype[Symbol.for("gadget/modelRelationships")] = {
  user: {},
  session: { user: { type: "BelongsTo", model: "user" }, shop: { type: "BelongsTo", model: "shopifyShop" } },
  widget: {
    gizmos: { type: "HasMany", model: "gizmo" },
    section: { type: "BelongsTo", model: "section" },
    doodad: { type: "HasOne", model: "doodad" },
  },
  gizmo: { widget: { type: "BelongsTo", model: "widget" }, doodads: { type: "HasMany", model: "doodad" } },
  section: { widgets: { type: "HasMany", model: "widget" } },
  modelA: {},
  player: { currentRound: { type: "BelongsTo", model: "round" } },
  round: { stadium: { type: "BelongsTo", model: "stadium" }, players: { type: "HasMany", model: "player" } },
  stadium: { rounds: { type: "HasMany", model: "round" }, city: { type: "BelongsTo", model: "city" } },
  city: { stadium: { type: "HasOne", model: "stadium" }, tweeters: { type: "HasMany", model: "tweeter" } },
  part: {},
  autoTableTest: {
    hasOne: { type: "HasOne", model: "_autoTableTestRelatedModel" },
    hasMany: { type: "HasMany", model: "_autoTableTestRelatedModel" },
  },
  _autoTableTestRelatedModel: {
    belongsToParent: { type: "BelongsTo", model: "autoTableTest" },
    manyBelongsToParent: { type: "BelongsTo", model: "autoTableTest" },
  },
  shopifyGdprRequest: { shop: { type: "BelongsTo", model: "shopifyShop" } },
  shopifyProduct: {
    images: { type: "HasMany", model: "shopifyProductImage" },
    options: { type: "HasMany", model: "shopifyProductOption" },
    variants: { type: "HasMany", model: "shopifyProductVariant" },
    shop: { type: "BelongsTo", model: "shopifyShop" },
  },
  shopifyProductImage: {
    variants: { type: "HasMany", model: "shopifyProductVariant" },
    product: { type: "BelongsTo", model: "shopifyProduct" },
    shop: { type: "BelongsTo", model: "shopifyShop" },
  },
  shopifyProductOption: { product: { type: "BelongsTo", model: "shopifyProduct" }, shop: { type: "BelongsTo", model: "shopifyShop" } },
  shopifyProductVariant: {
    product: { type: "BelongsTo", model: "shopifyProduct" },
    productImage: { type: "BelongsTo", model: "shopifyProductImage" },
    shop: { type: "BelongsTo", model: "shopifyShop" },
  },
  shopifyShop: {
    productOptions: { type: "HasMany", model: "shopifyProductOption" },
    productImages: { type: "HasMany", model: "shopifyProductImage" },
    productVariants: { type: "HasMany", model: "shopifyProductVariant" },
    products: { type: "HasMany", model: "shopifyProduct" },
    syncs: { type: "HasMany", model: "shopifySync" },
    gdprRequests: { type: "HasMany", model: "shopifyGdprRequest" },
  },
  shopifySync: { shop: { type: "BelongsTo", model: "shopifyShop" } },
  baseModel: {
    joinerModels: { type: "HasMany", model: "joinerModel" },
    baseModelHmtField: { type: "HasManyThrough", model: "siblingModel", through: "joinerModel" },
  },
  joinerModel: {
    joinerBelongsToSibling: { type: "BelongsTo", model: "siblingModel" },
    joinerBelongsToBase: { type: "BelongsTo", model: "baseModel" },
  },
  siblingModel: {
    joinerModels: { type: "HasMany", model: "joinerModel" },
    siblingModelHmtField: { type: "HasManyThrough", model: "baseModel", through: "joinerModel" },
  },
  mainModel: { uniqueBelongsTo: { type: "BelongsTo", model: "parentModel" }, childModelEntries: { type: "HasMany", model: "childModel" } },
  parentModel: { baseModel: { type: "HasOne", model: "mainModel" } },
  childModel: { mainModelParent: { type: "BelongsTo", model: "mainModel" } },
  student: {
    registrations: { type: "HasMany", model: "registration" },
    courses: { type: "HasManyThrough", model: "course", through: "registration" },
  },
  course: {
    registrations: { type: "HasMany", model: "registration" },
    students: { type: "HasManyThrough", model: "student", through: "registration" },
    assignments: { type: "HasMany", model: "assignment" },
    professors: { type: "HasManyThrough", model: "professor", through: "assignment" },
  },
  registration: { student: { type: "BelongsTo", model: "student" }, course: { type: "BelongsTo", model: "course" } },
  professor: {
    assignments: { type: "HasMany", model: "assignment" },
    courses: { type: "HasManyThrough", model: "course", through: "assignment" },
  },
  assignment: { course: { type: "BelongsTo", model: "course" }, professor: { type: "BelongsTo", model: "professor" } },
  doodad: { widget: { type: "BelongsTo", model: "widget" }, gizmo: { type: "BelongsTo", model: "gizmo" } },
  friendship: { follower: { type: "BelongsTo", model: "tweeter" }, followee: { type: "BelongsTo", model: "tweeter" } },
  tweeter: {
    followerFriendships: { type: "HasMany", model: "friendship" },
    followers: { type: "HasManyThrough", model: "tweeter", through: "friendship" },
    followeeFriendships: { type: "HasMany", model: "friendship" },
    followees: { type: "HasManyThrough", model: "tweeter", through: "friendship" },
    city: { type: "BelongsTo", model: "city" },
  },
};
const Uo = (e, t, i, n) => {
    const a = class {
      constructor(r) {
        this.connection = r;
      }
    };
    Object.defineProperty(a, "name", { value: `${e}Manager` });
    for (const r of n)
      switch (r.type) {
        case "maybeFindOne":
        case "findOne": {
          const o = !r.type.startsWith("maybe");
          "functionName" in r
            ? (a.prototype[r.functionName] = Object.assign(
                function (s, l) {
                  return Ni(this, r.operationName, r.findByField, s, i, e, l, o, r.namespace);
                },
                r,
                {
                  plan: function (s, l, d) {
                    return Ic(r.operationName, s, l, i, e, d, r.namespace);
                  },
                }
              ))
            : (a.prototype[r.type] = Object.assign(
                function (s, l) {
                  const d = ye(this, e, s, i, e, l, o, r.namespace);
                  return Gf(d, (u) => (u.isEmpty() ? null : u));
                },
                r,
                {
                  plan: function (s, l) {
                    return vc(r.operationName, s, i, e, l, r.namespace);
                  },
                }
              ));
          break;
        }
        case "findMany": {
          a.prototype.findMany = Object.assign(
            function (o) {
              return se(this, t, i, e, o, void 0, r.namespace);
            },
            r,
            {
              plan: function (o) {
                return Bo(t, i, e, o, r.namespace);
              },
            }
          );
          break;
        }
        case "maybeFindFirst":
        case "findFirst": {
          a.prototype[r.type] = Object.assign(
            function (o) {
              const s = se(
                this,
                t,
                i,
                e,
                { ...o, first: 1, last: void 0, before: void 0, after: void 0 },
                r.type != "maybeFindFirst",
                r.namespace
              );
              return Gf(s, (l) => (l == null ? void 0 : l[0]) ?? null);
            },
            r,
            {
              plan: function (o) {
                return Bo(t, i, e, { ...o, first: 1, last: void 0, before: void 0, after: void 0 }, r.namespace);
              },
            }
          );
          break;
        }
        case "get": {
          a.prototype.get = Object.assign(function (o) {
            return ye(this, r.operationName, void 0, i, e, o, void 0, r.namespace);
          }, r);
          break;
        }
        case "action": {
          if (r.isBulk) {
            const o = !!r.variables.ids;
            a.prototype[r.functionName] = Object.assign(
              async function (s, l) {
                let d;
                return (
                  o
                    ? (d = { ids: { ...r.variables.ids, value: s } })
                    : (d = { inputs: { ...r.variables.inputs, value: s.map((u) => Wg(this[r.singleActionFunctionName], void 0, u)) } }),
                  await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !0, d, l, r.namespace, r.hasReturnType)
                );
              },
              r,
              {
                plan: function (s) {
                  return ol(
                    r.operationName,
                    r.isDeleter ? null : r.defaultSelection,
                    e,
                    r.modelSelectionField,
                    r.variables,
                    s,
                    r.namespace,
                    !0,
                    r.hasReturnType
                  );
                },
              }
            );
          } else {
            const o = !!r.variables.id,
              s = Object.keys(r.variables).filter((l) => l != "id").length > 0;
            a.prototype[r.functionName] = Object.assign(
              async function (...l) {
                const [d, u] = yN(r, o, s, l);
                return await H(
                  this,
                  r.operationName,
                  r.isDeleter ? null : i,
                  e,
                  r.modelSelectionField,
                  !1,
                  d,
                  u,
                  r.namespace,
                  r.hasReturnType
                );
              },
              r,
              {
                plan: function (l) {
                  return ol(
                    r.operationName,
                    r.isDeleter ? null : r.defaultSelection,
                    e,
                    r.modelSelectionField,
                    r.variables,
                    l,
                    r.namespace,
                    !1,
                    r.hasReturnType
                  );
                },
              }
            );
          }
          break;
        }
        case "stubbedAction": {
          a.prototype[r.functionName] = Object.assign(function (...o) {
            throw (Lg(r), new Error(r.errorMessage));
          }, r);
          break;
        }
      }
    return a;
  },
  mN = (e, t) =>
    t.type == "stubbedAction"
      ? Object.assign((...i) => {
          throw (Lg(t), new Error(t.errorMessage));
        }, t)
      : Object.assign(
          async (i = {}) => {
            const n = {};
            for (const [a, r] of Object.entries(t.variables)) n[a] = { value: i[a], ...r };
            return await gs(e.connection, t.operationName, n, t.namespace);
          },
          t,
          {
            plan: function (i, n, a) {
              return Nc(i, n, a);
            },
          }
        );
function Wg(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
function yN(e, t, i, n) {
  let a, r;
  t && (a = n.shift()), i && (r = n.shift());
  const o = n.shift();
  let s = r;
  (a || r) && (s = Wg(e, a, r));
  const l = {};
  for (const [d, u] of Object.entries(e.variables)) l[d] = { value: d == "id" ? a : s == null ? void 0 : s[d], ...u };
  return [l, o];
}
function Gf(e, t) {
  return Symbol.asyncIterator in e
    ? {
        [Symbol.asyncIterator]: async function* () {
          for await (const i of e) yield t(i);
        },
      }
    : e.then(t);
}
const Lg = (e) => {
    try {
      if (typeof window < "u" && typeof CustomEvent == "function") {
        const t = new CustomEvent("gadget:devharness:stubbedActionError", {
          detail: {
            reason: e.reason,
            action: {
              functionName: e.functionName,
              actionApiIdentifier: e.actionApiIdentifier,
              modelApiIdentifier: e.modelApiIdentifier,
              dataPath: e.dataPath,
            },
          },
        });
        window.dispatchEvent(t);
      }
    } catch (t) {
      console.warn("[gadget] error dispatching gadget dev harness event", t);
    }
  },
  Pr = { __typename: !0, id: !0, createdAt: !0, updatedAt: !0, userId: !0 },
  Va = "session",
  Yo = "sessions",
  gN = Uo(Va, Yo, Pr, [
    { type: "findOne", operationName: Va, modelApiIdentifier: Va, findByVariableName: "id", defaultSelection: Pr, namespace: null },
    { type: "maybeFindOne", operationName: Va, modelApiIdentifier: Va, findByVariableName: "id", defaultSelection: Pr, namespace: null },
    { type: "findMany", operationName: Yo, modelApiIdentifier: Va, defaultSelection: Pr, namespace: null },
    { type: "findFirst", operationName: Yo, modelApiIdentifier: Va, defaultSelection: Pr, namespace: null },
    { type: "maybeFindFirst", operationName: Yo, modelApiIdentifier: Va, defaultSelection: Pr, namespace: null },
    {
      type: "findOne",
      operationName: Yo,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Va,
      defaultSelection: Pr,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Yo,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Va,
      defaultSelection: Pr,
      namespace: null,
    },
  ]),
  jf = { __typename: !0, id: !0, createdAt: !0, updatedAt: !0, userId: !0 },
  zf = "session",
  hN = "sessions",
  bN = Uo(zf, hN, jf, [{ type: "get", operationName: "currentSession", defaultSelection: jf, modelApiIdentifier: zf, namespace: null }]),
  be = {
    __typename: !0,
    id: !0,
    createdAt: !0,
    email: !0,
    emailVerificationToken: !0,
    emailVerificationTokenExpiration: !0,
    emailVerified: !0,
    firstName: !0,
    googleImageUrl: !0,
    googleProfileId: !0,
    lastName: !0,
    lastSignedIn: !0,
    resetPasswordToken: !0,
    resetPasswordTokenExpiration: !0,
    roles: { key: !0, name: !0 },
    updatedAt: !0,
  },
  Y = "user",
  Tt = "users",
  vN = Uo(Y, Tt, be, [
    { type: "findOne", operationName: Y, modelApiIdentifier: Y, findByVariableName: "id", defaultSelection: be, namespace: null },
    { type: "maybeFindOne", operationName: Y, modelApiIdentifier: Y, findByVariableName: "id", defaultSelection: be, namespace: null },
    { type: "findMany", operationName: Tt, modelApiIdentifier: Y, defaultSelection: be, namespace: null },
    { type: "findFirst", operationName: Tt, modelApiIdentifier: Y, defaultSelection: be, namespace: null },
    { type: "maybeFindFirst", operationName: Tt, modelApiIdentifier: Y, defaultSelection: be, namespace: null },
    {
      type: "findOne",
      operationName: Tt,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Y,
      defaultSelection: be,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Tt,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Y,
      defaultSelection: be,
      namespace: null,
    },
    {
      type: "findOne",
      operationName: Tt,
      functionName: "findByEmail",
      findByField: "email",
      findByVariableName: "email",
      modelApiIdentifier: Y,
      defaultSelection: be,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Tt,
      functionName: "maybeFindByEmail",
      findByField: "email",
      findByVariableName: "email",
      modelApiIdentifier: Y,
      defaultSelection: be,
      namespace: null,
    },
    {
      type: "action",
      operationName: "signUpUser",
      operationReturnType: "SignUpUser",
      functionName: "signUp",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !0, type: "String" }, password: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkSignUpUsers",
      functionName: "bulkSignUp",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "signUp",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignUpUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "signInUser",
      operationReturnType: "SignInUser",
      functionName: "signIn",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !0, type: "String" }, password: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkSignInUsers",
      functionName: "bulkSignIn",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "signIn",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignInUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "signOutUser",
      operationReturnType: "SignOutUser",
      functionName: "signOut",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkSignOutUsers",
      functionName: "bulkSignOut",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "signOut",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "updateUser",
      operationReturnType: "UpdateUser",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "UpdateUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkUpdateUsers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "deleteUser",
      operationReturnType: "DeleteUser",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteUsers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "sendVerifyEmailUser",
      operationReturnType: "SendVerifyEmailUser",
      functionName: "sendVerifyEmail",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkSendVerifyEmailUsers",
      functionName: "bulkSendVerifyEmail",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "sendVerifyEmail",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSendVerifyEmailUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "verifyEmailUser",
      operationReturnType: "VerifyEmailUser",
      functionName: "verifyEmail",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: { code: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkVerifyEmailUsers",
      functionName: "bulkVerifyEmail",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "verifyEmail",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkVerifyEmailUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "sendResetPasswordUser",
      operationReturnType: "SendResetPasswordUser",
      functionName: "sendResetPassword",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkSendResetPasswordUsers",
      functionName: "bulkSendResetPassword",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "sendResetPassword",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSendResetPasswordUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "resetPasswordUser",
      operationReturnType: "ResetPasswordUser",
      functionName: "resetPassword",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: { password: { required: !0, type: "String" }, code: { required: !0, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !0,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkResetPasswordUsers",
      functionName: "bulkResetPassword",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !0,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "resetPassword",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkResetPasswordUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "changePasswordUser",
      operationReturnType: "ChangePasswordUser",
      functionName: "changePassword",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        currentPassword: { required: !0, type: "String" },
        newPassword: { required: !0, type: "String" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkChangePasswordUsers",
      functionName: "bulkChangePassword",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "changePassword",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkChangePasswordUsersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "upsertUser",
      operationReturnType: "UpsertUser",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: Y,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Y,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        on: { required: !1, type: "[String!]" },
        user: { required: !1, type: "UpsertUserInput" },
        email: { required: !0, type: "String" },
        password: { required: !0, type: "String" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on SignUpUserResult": { hasReturnType: !0 }, "... on UpdateUserResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: be,
    },
    {
      type: "action",
      operationName: "bulkUpsertUsers",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: { users: { hasReturnType: { "... on User": { select: !0 }, "... on UpsertUserReturnType": { hasReturnType: !0 } } } },
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Y,
      modelSelectionField: Tt,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertUsersInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: be,
    },
  ]),
  on = {
    __typename: !0,
    id: !0,
    birthday: !0,
    category: !0,
    checked: !0,
    createdAt: !0,
    embedding: !0,
    image: { url: !0, mimeType: !0, fileName: !0 },
    inStock: !0,
    inventoryCount: !0,
    lastRestockedAt: !0,
    metafields: !0,
    name: !0,
    ownerEmail: !0,
    productURL: !0,
    reallyReallyReallyLongFieldName: !0,
    secret: !0,
    tags: !0,
    updatedAt: !0,
  },
  st = "widget",
  _a = "widgets",
  IN = Uo(st, _a, on, [
    { type: "findOne", operationName: st, modelApiIdentifier: st, findByVariableName: "id", defaultSelection: on, namespace: null },
    { type: "maybeFindOne", operationName: st, modelApiIdentifier: st, findByVariableName: "id", defaultSelection: on, namespace: null },
    { type: "findMany", operationName: _a, modelApiIdentifier: st, defaultSelection: on, namespace: null },
    { type: "findFirst", operationName: _a, modelApiIdentifier: st, defaultSelection: on, namespace: null },
    { type: "maybeFindFirst", operationName: _a, modelApiIdentifier: st, defaultSelection: on, namespace: null },
    {
      type: "findOne",
      operationName: _a,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: st,
      defaultSelection: on,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: _a,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: st,
      defaultSelection: on,
      namespace: null,
    },
    {
      type: "action",
      operationName: "createWidget",
      operationReturnType: "CreateWidget",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: st,
      operatesWithRecordIdentity: !1,
      modelSelectionField: st,
      isBulk: !1,
      isDeleter: !1,
      variables: { widget: { required: !1, type: "CreateWidgetInput" }, foobar: { required: !1, type: "CreateFoobarInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["foobar"],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: on,
    },
    {
      type: "action",
      operationName: "bulkCreateWidgets",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: st,
      modelSelectionField: _a,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateWidgetsInput!]" } },
      paramOnlyVariables: ["foobar"],
      defaultSelection: on,
    },
    {
      type: "action",
      operationName: "updateWidget",
      operationReturnType: "UpdateWidget",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: st,
      operatesWithRecordIdentity: !0,
      modelSelectionField: st,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, widget: { required: !1, type: "UpdateWidgetInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: on,
    },
    {
      type: "action",
      operationName: "bulkUpdateWidgets",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: st,
      modelSelectionField: _a,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateWidgetsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: on,
    },
    {
      type: "action",
      operationName: "deleteWidget",
      operationReturnType: "DeleteWidget",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: st,
      operatesWithRecordIdentity: !0,
      modelSelectionField: st,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteWidgets",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: st,
      modelSelectionField: _a,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertWidget",
      operationReturnType: "UpsertWidget",
      functionName: "upsert",
      namespace: null,
      modelApiIdentifier: st,
      operatesWithRecordIdentity: !1,
      modelSelectionField: st,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        on: { required: !1, type: "[String!]" },
        widget: { required: !1, type: "UpsertWidgetInput" },
        foobar: { required: !1, type: "UpsertFoobarInput" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on", "foobar"],
      hasReturnType: { "... on CreateWidgetResult": { hasReturnType: !1 }, "... on UpdateWidgetResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: on,
    },
    {
      type: "action",
      operationName: "bulkUpsertWidgets",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: st,
      modelSelectionField: _a,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpsertWidgetsInput!]" } },
      paramOnlyVariables: ["on", "foobar"],
      defaultSelection: on,
    },
  ]),
  Er = { __typename: !0, id: !0, bar: !0, createdAt: !0, foo: !0, updatedAt: !0 },
  $a = "test",
  Xo = "tests",
  SN = Uo($a, Xo, Er, [
    { type: "findOne", operationName: $a, modelApiIdentifier: $a, findByVariableName: "id", defaultSelection: Er, namespace: null },
    { type: "maybeFindOne", operationName: $a, modelApiIdentifier: $a, findByVariableName: "id", defaultSelection: Er, namespace: null },
    { type: "findMany", operationName: Xo, modelApiIdentifier: $a, defaultSelection: Er, namespace: null },
    { type: "findFirst", operationName: Xo, modelApiIdentifier: $a, defaultSelection: Er, namespace: null },
    { type: "maybeFindFirst", operationName: Xo, modelApiIdentifier: $a, defaultSelection: Er, namespace: null },
    {
      type: "findOne",
      operationName: Xo,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: $a,
      defaultSelection: Er,
      namespace: null,
    },
    {
      type: "maybeFindOne",
      operationName: Xo,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: $a,
      defaultSelection: Er,
      namespace: null,
    },
  ]),
  Ii = { __typename: !0, id: !0, createdAt: !0, name: !0, number: !0, updatedAt: !0 },
  Ee = "player",
  Cn = "players",
  kN = Uo(Ee, Cn, Ii, [
    { type: "findOne", operationName: Ee, modelApiIdentifier: Ee, findByVariableName: "id", defaultSelection: Ii, namespace: "game" },
    { type: "maybeFindOne", operationName: Ee, modelApiIdentifier: Ee, findByVariableName: "id", defaultSelection: Ii, namespace: "game" },
    { type: "findMany", operationName: Cn, modelApiIdentifier: Ee, defaultSelection: Ii, namespace: "game" },
    { type: "findFirst", operationName: Cn, modelApiIdentifier: Ee, defaultSelection: Ii, namespace: "game" },
    { type: "maybeFindFirst", operationName: Cn, modelApiIdentifier: Ee, defaultSelection: Ii, namespace: "game" },
    {
      type: "findOne",
      operationName: Cn,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ee,
      defaultSelection: Ii,
      namespace: "game",
    },
    {
      type: "maybeFindOne",
      operationName: Cn,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ee,
      defaultSelection: Ii,
      namespace: "game",
    },
    {
      type: "findOne",
      operationName: Cn,
      functionName: "findByName",
      findByField: "name",
      findByVariableName: "name",
      modelApiIdentifier: Ee,
      defaultSelection: Ii,
      namespace: "game",
    },
    {
      type: "maybeFindOne",
      operationName: Cn,
      functionName: "maybeFindByName",
      findByField: "name",
      findByVariableName: "name",
      modelApiIdentifier: Ee,
      defaultSelection: Ii,
      namespace: "game",
    },
    {
      type: "action",
      operationName: "createPlayer",
      operationReturnType: "CreateGamePlayer",
      functionName: "create",
      namespace: "game",
      modelApiIdentifier: Ee,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ee,
      isBulk: !1,
      isDeleter: !1,
      variables: { player: { required: !1, type: "CreateGamePlayerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ii,
    },
    {
      type: "action",
      operationName: "bulkCreatePlayers",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: Ee,
      modelSelectionField: Cn,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkCreateGamePlayersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Ii,
    },
    {
      type: "action",
      operationName: "updatePlayer",
      operationReturnType: "UpdateGamePlayer",
      functionName: "update",
      namespace: "game",
      modelApiIdentifier: Ee,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ee,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, player: { required: !1, type: "UpdateGamePlayerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ii,
    },
    {
      type: "action",
      operationName: "bulkUpdatePlayers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Ee,
      modelSelectionField: Cn,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpdateGamePlayersInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: Ii,
    },
    {
      type: "action",
      operationName: "deletePlayer",
      operationReturnType: "DeleteGamePlayer",
      functionName: "delete",
      namespace: "game",
      modelApiIdentifier: Ee,
      operatesWithRecordIdentity: !0,
      modelSelectionField: Ee,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeletePlayers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Ee,
      modelSelectionField: Cn,
      namespace: "game",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertPlayer",
      operationReturnType: "UpsertGamePlayer",
      functionName: "upsert",
      namespace: "game",
      modelApiIdentifier: Ee,
      operatesWithRecordIdentity: !1,
      modelSelectionField: Ee,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, player: { required: !1, type: "UpsertGamePlayerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: { "... on CreateGamePlayerResult": { hasReturnType: !1 }, "... on UpdateGamePlayerResult": { hasReturnType: !1 } },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ii,
    },
    {
      type: "action",
      operationName: "bulkUpsertPlayers",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: Ee,
      modelSelectionField: Cn,
      namespace: "game",
      variables: { inputs: { required: !0, type: "[BulkUpsertGamePlayersInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: Ii,
    },
  ]),
  sn = { __typename: !0, id: !0, createdAt: !0, foo: !0, updatedAt: !0 },
  lt = "test",
  Ga = "tests",
  NN = Uo(lt, Ga, sn, [
    {
      type: "findOne",
      operationName: lt,
      modelApiIdentifier: lt,
      findByVariableName: "id",
      defaultSelection: sn,
      namespace: ["game", "inner"],
    },
    {
      type: "maybeFindOne",
      operationName: lt,
      modelApiIdentifier: lt,
      findByVariableName: "id",
      defaultSelection: sn,
      namespace: ["game", "inner"],
    },
    { type: "findMany", operationName: Ga, modelApiIdentifier: lt, defaultSelection: sn, namespace: ["game", "inner"] },
    { type: "findFirst", operationName: Ga, modelApiIdentifier: lt, defaultSelection: sn, namespace: ["game", "inner"] },
    { type: "maybeFindFirst", operationName: Ga, modelApiIdentifier: lt, defaultSelection: sn, namespace: ["game", "inner"] },
    {
      type: "findOne",
      operationName: Ga,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: lt,
      defaultSelection: sn,
      namespace: ["game", "inner"],
    },
    {
      type: "maybeFindOne",
      operationName: Ga,
      functionName: "maybeFindById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: lt,
      defaultSelection: sn,
      namespace: ["game", "inner"],
    },
    {
      type: "action",
      operationName: "createTest",
      operationReturnType: "CreateGameInnerTest",
      functionName: "create",
      namespace: ["game", "inner"],
      modelApiIdentifier: lt,
      operatesWithRecordIdentity: !1,
      modelSelectionField: lt,
      isBulk: !1,
      isDeleter: !1,
      variables: { test: { required: !1, type: "CreateGameInnerTestInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: sn,
    },
    {
      type: "action",
      operationName: "bulkCreateTests",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "create",
      modelApiIdentifier: lt,
      modelSelectionField: Ga,
      namespace: ["game", "inner"],
      variables: { inputs: { required: !0, type: "[BulkCreateGameInnerTestsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: sn,
    },
    {
      type: "action",
      operationName: "updateTest",
      operationReturnType: "UpdateGameInnerTest",
      functionName: "update",
      namespace: ["game", "inner"],
      modelApiIdentifier: lt,
      operatesWithRecordIdentity: !0,
      modelSelectionField: lt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, test: { required: !1, type: "UpdateGameInnerTestInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: sn,
    },
    {
      type: "action",
      operationName: "bulkUpdateTests",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: lt,
      modelSelectionField: Ga,
      namespace: ["game", "inner"],
      variables: { inputs: { required: !0, type: "[BulkUpdateGameInnerTestsInput!]" } },
      paramOnlyVariables: [],
      defaultSelection: sn,
    },
    {
      type: "action",
      operationName: "deleteTest",
      operationReturnType: "DeleteGameInnerTest",
      functionName: "delete",
      namespace: ["game", "inner"],
      modelApiIdentifier: lt,
      operatesWithRecordIdentity: !0,
      modelSelectionField: lt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteTests",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      operatesWithRecordIdentity: !0,
      singleActionFunctionName: "delete",
      modelApiIdentifier: lt,
      modelSelectionField: Ga,
      namespace: ["game", "inner"],
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      paramOnlyVariables: [],
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "upsertTest",
      operationReturnType: "UpsertGameInnerTest",
      functionName: "upsert",
      namespace: ["game", "inner"],
      modelApiIdentifier: lt,
      operatesWithRecordIdentity: !1,
      modelSelectionField: lt,
      isBulk: !1,
      isDeleter: !1,
      variables: { on: { required: !1, type: "[String!]" }, test: { required: !1, type: "UpsertGameInnerTestInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: ["on"],
      hasReturnType: {
        "... on CreateGameInnerTestResult": { hasReturnType: !1 },
        "... on UpdateGameInnerTestResult": { hasReturnType: !1 },
      },
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: sn,
    },
    {
      type: "action",
      operationName: "bulkUpsertTests",
      functionName: "bulkUpsert",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      operatesWithRecordIdentity: !1,
      singleActionFunctionName: "upsert",
      modelApiIdentifier: lt,
      modelSelectionField: Ga,
      namespace: ["game", "inner"],
      variables: { inputs: { required: !0, type: "[BulkUpsertGameInnerTestsInput!]" } },
      paramOnlyVariables: ["on"],
      defaultSelection: sn,
    },
  ]);
class AN {
  constructor(t) {
    (this.clientOrParent = t), (this.connection = this.clientOrParent.connection), (this.test = new NN(this.connection));
  }
}
class FN {
  constructor(t) {
    (this.clientOrParent = t),
      (this.calculateScore = mN(this, {
        type: "globalAction",
        functionName: "calculateScore",
        operationName: "calculateScore",
        operationReturnType: "GameCalculateScore",
        namespace: "game",
        variables: { why: { required: !1, type: "String" } },
      })),
      (this.connection = this.clientOrParent.connection),
      (this.player = new kN(this.connection)),
      (this.inner = new AN(this));
  }
}
const Wf = "production",
  wN = "development",
  xN = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let Hg = class Wu {
  constructor(t) {
    var r, o;
    (this.options = t),
      (this.apiRoots = { development: "https://kitchen-sink--development.gadget.app/", production: "https://kitchen-sink.gadget.app/" }),
      (this.applicationId = "97394"),
      (this.transaction = async (s) => await this.connection.transaction(s)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken);
    let i = !1;
    try {
      i = !!({ BASE_URL: "./", MODE: "production", DEV: !1, PROD: !0, SSR: !1, STORYBOOK: "true" } && !1);
    } catch {}
    if (i) {
      const s = (r = globalThis.GadgetGlobals) == null ? void 0 : r.api;
      if (s) return s.actAsSession;
    }
    this.environment = ((t == null ? void 0 : t.environment) ?? xN() ?? wN).toLocaleLowerCase();
    let n;
    this.apiRoots[this.environment]
      ? (n = this.apiRoots[this.environment])
      : (n = `https://kitchen-sink${this.environment == Wf ? "" : `--${this.environment}`}.gadget.app`);
    const a = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== Wf) {
      const s =
        ({ forward: l }) =>
        (d) => {
          const u = l(d);
          return Vn(
            u,
            Bi((f) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const p = new CustomEvent("gadget:devharness:graphqlresult", { detail: f });
                  window.dispatchEvent(p);
                }
              } catch (p) {
                console.warn("[gadget] error dispatching gadget dev harness event", p);
              }
              return f;
            })
          );
        };
      a.beforeAll = [s, ...(a.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", n).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: a,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((o = t == null ? void 0 : t.authenticationMode) != null && o.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.session = new gN(this.connection)),
      (this.currentSession = new bN(this.connection)),
      (this.user = new vN(this.connection)),
      (this.widget = new IN(this.connection)),
      (this.test = new SN(this.connection)),
      (this.game = new FN(this)),
      (this.internal = {
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifiers: !1, namespace: [] }),
        user: new B("user", this.connection, { pluralApiIdentifier: "users", hasAmbiguousIdentifiers: !1, namespace: [] }),
        widget: new B("widget", this.connection, { pluralApiIdentifier: "widgets", hasAmbiguousIdentifiers: !1, namespace: [] }),
        test: new B("test", this.connection, { pluralApiIdentifier: "tests", hasAmbiguousIdentifiers: !1, namespace: [] }),
        game: {
          player: new B("player", this.connection, { pluralApiIdentifier: "players", hasAmbiguousIdentifiers: !1, namespace: ["game"] }),
          inner: {
            test: new B("test", this.connection, {
              pluralApiIdentifier: "tests",
              hasAmbiguousIdentifiers: !1,
              namespace: ["game", "inner"],
            }),
          },
        },
      });
  }
  get actAsAdmin() {
    var t, i;
    return (
      mt(
        (i = (t = this.options) == null ? void 0 : t.authenticationMode) == null ? void 0 : i.internal,
        "actAsAdmin can only be used for API clients using internal authentication"
      ),
      new Wu({ ...this.options, authenticationMode: { internal: { ...this.options.authenticationMode.internal, actAsSession: !1 } } })
    );
  }
  get actAsSession() {
    var t, i;
    return (
      mt(
        (i = (t = this.options) == null ? void 0 : t.authenticationMode) == null ? void 0 : i.internal,
        "actAsSession can only be used for API clients using internal authentication"
      ),
      new Wu({ ...this.options, authenticationMode: { internal: { ...this.options.authenticationMode.internal, actAsSession: !0 } } })
    );
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
Hg.prototype[Symbol.for("gadget/modelRelationships")] = {
  session: { user: { type: "BelongsTo", model: "user" } },
  user: {},
  widget: {},
  test: {},
  player: {},
};
const _n = (e, t, i, n) => {
  const a = class {
    constructor(r) {
      this.connection = r;
    }
  };
  for (const r of n)
    switch (r.type) {
      case "maybeFindOne":
      case "findOne": {
        "functionName" in r
          ? (a.prototype[r.functionName] = Object.assign(async function (o, s) {
              return await Ni(this, r.operationName, r.findByField, o, i, e, s);
            }, r))
          : (a.prototype[r.type] = Object.assign(async function (o, s) {
              const l = await ye(this, e, o, i, e, s, r.type != "maybeFindOne");
              return l.isEmpty() ? null : l;
            }, r));
        break;
      }
      case "findMany": {
        a.prototype.findMany = Object.assign(async function (o) {
          return await se(this, t, i, e, o);
        }, r);
        break;
      }
      case "maybeFindFirst":
      case "findFirst": {
        a.prototype[r.type] = Object.assign(async function (o) {
          const s = await se(this, t, i, e, { ...o, first: 1, last: void 0, before: void 0, after: void 0 }, r.type != "maybeFindFirst");
          return (s == null ? void 0 : s[0]) ?? null;
        }, r);
        break;
      }
      case "get": {
        a.prototype.get = Object.assign(async function (o) {
          return await ye(this, r.operationName, void 0, i, e, o);
        }, r);
        break;
      }
      case "action": {
        if (r.isBulk) {
          const o = !!r.variables.ids;
          a.prototype[r.functionName] = Object.assign(async function (s, l) {
            let d;
            return (
              o
                ? (d = { ids: { ...r.variables.ids, value: s } })
                : (d = { inputs: { ...r.variables.inputs, value: s.map((u) => Qg(this[r.singleActionFunctionName], void 0, u)) } }),
              await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !0, d, l, r.namespace, r.hasReturnType)
            );
          }, r);
        } else {
          const o = !!r.variables.id,
            s = Object.keys(r.variables).filter((l) => l != "id").length > 0;
          a.prototype[r.functionName] = Object.assign(async function (...l) {
            const [d, u] = TN(r, o, s, l);
            return await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !1, d, u, r.namespace, r.hasReturnType);
          }, r);
        }
        break;
      }
    }
  return a;
};
function Qg(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
function TN(e, t, i, n) {
  let a, r;
  t && (a = n.shift()), i && (r = n.shift());
  const o = n.shift();
  let s = r;
  (a || r) && (s = Qg(e, a, r));
  const l = {};
  for (const [d, u] of Object.entries(e.variables)) l[d] = { value: d == "id" ? a : s == null ? void 0 : s[d], ...u };
  return [l, o];
}
const kn = { __typename: !0, id: !0, state: !0, createdAt: !0, email: !0, roles: { key: !0, name: !0 }, updatedAt: !0 },
  ut = "user",
  pr = "users",
  MN = _n(ut, pr, kn, [
    { type: "findOne", operationName: ut, modelApiIdentifier: ut, findByVariableName: "id", defaultSelection: kn },
    { type: "maybeFindOne", operationName: ut, modelApiIdentifier: ut, findByVariableName: "id", defaultSelection: kn },
    { type: "findMany", operationName: pr, modelApiIdentifier: ut, defaultSelection: kn },
    { type: "findFirst", operationName: pr, modelApiIdentifier: ut, defaultSelection: kn },
    { type: "maybeFindFirst", operationName: pr, modelApiIdentifier: ut, defaultSelection: kn },
    {
      type: "findOne",
      operationName: pr,
      functionName: "findByEmail",
      findByField: "email",
      findByVariableName: "email",
      modelApiIdentifier: ut,
      defaultSelection: kn,
    },
    {
      type: "action",
      operationName: "signUpUser",
      functionName: "signUp",
      namespace: null,
      modelApiIdentifier: ut,
      modelSelectionField: ut,
      isBulk: !1,
      isDeleter: !1,
      variables: { user: { required: !1, type: "SignUpUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: kn,
    },
    {
      type: "action",
      operationName: "bulkSignUpUsers",
      functionName: "bulkSignUp",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "signUp",
      modelApiIdentifier: ut,
      modelSelectionField: pr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkSignUpUsersInput!]" } },
      defaultSelection: kn,
    },
    {
      type: "action",
      operationName: "updateUser",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: ut,
      modelSelectionField: ut,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "UpdateUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: kn,
    },
    {
      type: "action",
      operationName: "bulkUpdateUsers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: ut,
      modelSelectionField: pr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateUsersInput!]" } },
      defaultSelection: kn,
    },
    {
      type: "action",
      operationName: "deleteUser",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: ut,
      modelSelectionField: ut,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteUsers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: ut,
      modelSelectionField: pr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "createUser",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: ut,
      modelSelectionField: ut,
      isBulk: !1,
      isDeleter: !1,
      variables: { user: { required: !1, type: "CreateUserInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: kn,
    },
    {
      type: "action",
      operationName: "bulkCreateUsers",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: ut,
      modelSelectionField: pr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateUsersInput!]" } },
      defaultSelection: kn,
    },
  ]),
  ja = { __typename: !0, id: !0, state: !0, createdAt: !0, roles: { key: !0, name: !0 }, shopifySID: !0, updatedAt: !0 },
  ln = "session",
  Ko = "sessions",
  ON = _n(ln, Ko, ja, [
    { type: "findOne", operationName: ln, modelApiIdentifier: ln, findByVariableName: "id", defaultSelection: ja },
    { type: "maybeFindOne", operationName: ln, modelApiIdentifier: ln, findByVariableName: "id", defaultSelection: ja },
    { type: "findMany", operationName: Ko, modelApiIdentifier: ln, defaultSelection: ja },
    { type: "findFirst", operationName: Ko, modelApiIdentifier: ln, defaultSelection: ja },
    { type: "maybeFindFirst", operationName: Ko, modelApiIdentifier: ln, defaultSelection: ja },
    {
      type: "action",
      operationName: "logInViaEmail",
      functionName: "logInViaEmail",
      namespace: "currentSession",
      modelApiIdentifier: ln,
      modelSelectionField: ln,
      isBulk: !1,
      isDeleter: !1,
      variables: { email: { required: !1, type: "String" }, password: { required: !1, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: ja,
    },
    {
      type: "action",
      operationName: "bulkLogInViaEmailSessions",
      functionName: "bulkLogInViaEmail",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "logInViaEmail",
      modelApiIdentifier: ln,
      modelSelectionField: Ko,
      namespace: "currentSession",
      variables: { inputs: { required: !0, type: "[BulkLogInViaEmailSessionsInput!]" } },
      defaultSelection: ja,
    },
    {
      type: "action",
      operationName: "logOut",
      functionName: "logOut",
      namespace: "currentSession",
      modelApiIdentifier: ln,
      modelSelectionField: ln,
      isBulk: !1,
      isDeleter: !1,
      variables: {},
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: ja,
    },
    {
      type: "action",
      operationName: "bulkLogOutSessions",
      functionName: "bulkLogOut",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "logOut",
      modelApiIdentifier: ln,
      modelSelectionField: Ko,
      namespace: "currentSession",
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: ja,
    },
  ]),
  za = {
    __typename: !0,
    id: !0,
    state: !0,
    body: !0,
    createdAt: !0,
    handle: !0,
    productCategory: !0,
    productType: !0,
    publishedAt: !0,
    publishedScope: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    status: !0,
    tags: !0,
    templateSuffix: !0,
    title: !0,
    updatedAt: !0,
    vendor: !0,
  },
  Xt = "shopifyProduct",
  mo = "shopifyProducts",
  RN = _n(Xt, mo, za, [
    { type: "findOne", operationName: Xt, modelApiIdentifier: Xt, findByVariableName: "id", defaultSelection: za },
    { type: "maybeFindOne", operationName: Xt, modelApiIdentifier: Xt, findByVariableName: "id", defaultSelection: za },
    { type: "findMany", operationName: mo, modelApiIdentifier: Xt, defaultSelection: za },
    { type: "findFirst", operationName: mo, modelApiIdentifier: Xt, defaultSelection: za },
    { type: "maybeFindFirst", operationName: mo, modelApiIdentifier: Xt, defaultSelection: za },
    {
      type: "action",
      operationName: "createShopifyProduct",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Xt,
      modelSelectionField: Xt,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifyProduct: { required: !1, type: "CreateShopifyProductInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: za,
    },
    {
      type: "action",
      operationName: "bulkCreateShopifyProducts",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Xt,
      modelSelectionField: mo,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateShopifyProductsInput!]" } },
      defaultSelection: za,
    },
    {
      type: "action",
      operationName: "updateShopifyProduct",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Xt,
      modelSelectionField: Xt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifyProduct: { required: !1, type: "UpdateShopifyProductInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: za,
    },
    {
      type: "action",
      operationName: "bulkUpdateShopifyProducts",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Xt,
      modelSelectionField: mo,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateShopifyProductsInput!]" } },
      defaultSelection: za,
    },
    {
      type: "action",
      operationName: "deleteShopifyProduct",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Xt,
      modelSelectionField: Xt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteShopifyProducts",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Xt,
      modelSelectionField: mo,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  Wa = {
    __typename: !0,
    id: !0,
    state: !0,
    alt: !0,
    createdAt: !0,
    height: !0,
    position: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    source: !0,
    updatedAt: !0,
    width: !0,
  },
  Kt = "shopifyProductImage",
  yo = "shopifyProductImages",
  BN = _n(Kt, yo, Wa, [
    { type: "findOne", operationName: Kt, modelApiIdentifier: Kt, findByVariableName: "id", defaultSelection: Wa },
    { type: "maybeFindOne", operationName: Kt, modelApiIdentifier: Kt, findByVariableName: "id", defaultSelection: Wa },
    { type: "findMany", operationName: yo, modelApiIdentifier: Kt, defaultSelection: Wa },
    { type: "findFirst", operationName: yo, modelApiIdentifier: Kt, defaultSelection: Wa },
    { type: "maybeFindFirst", operationName: yo, modelApiIdentifier: Kt, defaultSelection: Wa },
    {
      type: "action",
      operationName: "createShopifyProductImage",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Kt,
      modelSelectionField: Kt,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifyProductImage: { required: !1, type: "CreateShopifyProductImageInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Wa,
    },
    {
      type: "action",
      operationName: "bulkCreateShopifyProductImages",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Kt,
      modelSelectionField: yo,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateShopifyProductImagesInput!]" } },
      defaultSelection: Wa,
    },
    {
      type: "action",
      operationName: "updateShopifyProductImage",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Kt,
      modelSelectionField: Kt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifyProductImage: { required: !1, type: "UpdateShopifyProductImageInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Wa,
    },
    {
      type: "action",
      operationName: "bulkUpdateShopifyProductImages",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Kt,
      modelSelectionField: yo,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateShopifyProductImagesInput!]" } },
      defaultSelection: Wa,
    },
    {
      type: "action",
      operationName: "deleteShopifyProductImage",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Kt,
      modelSelectionField: Kt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteShopifyProductImages",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Kt,
      modelSelectionField: yo,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  La = { __typename: !0, id: !0, state: !0, createdAt: !0, name: !0, position: !0, updatedAt: !0, values: !0 },
  ei = "shopifyProductOption",
  go = "shopifyProductOptions",
  CN = _n(ei, go, La, [
    { type: "findOne", operationName: ei, modelApiIdentifier: ei, findByVariableName: "id", defaultSelection: La },
    { type: "maybeFindOne", operationName: ei, modelApiIdentifier: ei, findByVariableName: "id", defaultSelection: La },
    { type: "findMany", operationName: go, modelApiIdentifier: ei, defaultSelection: La },
    { type: "findFirst", operationName: go, modelApiIdentifier: ei, defaultSelection: La },
    { type: "maybeFindFirst", operationName: go, modelApiIdentifier: ei, defaultSelection: La },
    {
      type: "action",
      operationName: "createShopifyProductOption",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: ei,
      modelSelectionField: ei,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifyProductOption: { required: !1, type: "CreateShopifyProductOptionInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: La,
    },
    {
      type: "action",
      operationName: "bulkCreateShopifyProductOptions",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: ei,
      modelSelectionField: go,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateShopifyProductOptionsInput!]" } },
      defaultSelection: La,
    },
    {
      type: "action",
      operationName: "updateShopifyProductOption",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: ei,
      modelSelectionField: ei,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        shopifyProductOption: { required: !1, type: "UpdateShopifyProductOptionInput" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: La,
    },
    {
      type: "action",
      operationName: "bulkUpdateShopifyProductOptions",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: ei,
      modelSelectionField: go,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateShopifyProductOptionsInput!]" } },
      defaultSelection: La,
    },
    {
      type: "action",
      operationName: "deleteShopifyProductOption",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: ei,
      modelSelectionField: ei,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteShopifyProductOptions",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: ei,
      modelSelectionField: go,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  Ha = {
    __typename: !0,
    id: !0,
    state: !0,
    barcode: !0,
    compareAtPrice: !0,
    createdAt: !0,
    fulfillmentService: !0,
    grams: !0,
    inventoryManagement: !0,
    inventoryPolicy: !0,
    inventoryQuantity: !0,
    inventoryQuantityAdjustment: !0,
    oldInventoryQuantity: !0,
    option1: !0,
    option2: !0,
    option3: !0,
    position: !0,
    presentmentPrices: !0,
    price: !0,
    requiresShipping: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    sku: !0,
    taxCode: !0,
    taxable: !0,
    title: !0,
    updatedAt: !0,
    weight: !0,
    weightUnit: !0,
  },
  ti = "shopifyProductVariant",
  ho = "shopifyProductVariants",
  PN = _n(ti, ho, Ha, [
    { type: "findOne", operationName: ti, modelApiIdentifier: ti, findByVariableName: "id", defaultSelection: Ha },
    { type: "maybeFindOne", operationName: ti, modelApiIdentifier: ti, findByVariableName: "id", defaultSelection: Ha },
    { type: "findMany", operationName: ho, modelApiIdentifier: ti, defaultSelection: Ha },
    { type: "findFirst", operationName: ho, modelApiIdentifier: ti, defaultSelection: Ha },
    { type: "maybeFindFirst", operationName: ho, modelApiIdentifier: ti, defaultSelection: Ha },
    {
      type: "action",
      operationName: "createShopifyProductVariant",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: ti,
      modelSelectionField: ti,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifyProductVariant: { required: !1, type: "CreateShopifyProductVariantInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ha,
    },
    {
      type: "action",
      operationName: "bulkCreateShopifyProductVariants",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: ti,
      modelSelectionField: ho,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateShopifyProductVariantsInput!]" } },
      defaultSelection: Ha,
    },
    {
      type: "action",
      operationName: "updateShopifyProductVariant",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: ti,
      modelSelectionField: ti,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        shopifyProductVariant: { required: !1, type: "UpdateShopifyProductVariantInput" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Ha,
    },
    {
      type: "action",
      operationName: "bulkUpdateShopifyProductVariants",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: ti,
      modelSelectionField: ho,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateShopifyProductVariantsInput!]" } },
      defaultSelection: Ha,
    },
    {
      type: "action",
      operationName: "deleteShopifyProductVariant",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: ti,
      modelSelectionField: ti,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteShopifyProductVariants",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: ti,
      modelSelectionField: ho,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  dn = {
    __typename: !0,
    id: !0,
    state: !0,
    address1: !0,
    address2: !0,
    checkoutApiSupported: !0,
    city: !0,
    cookieConsentLevel: !0,
    country: !0,
    countryCode: !0,
    countryName: !0,
    countyTaxes: !0,
    createdAt: !0,
    currency: !0,
    customerEmail: !0,
    disabledWebhooks: !0,
    domain: !0,
    eligibleForCardReaderGiveaway: !0,
    eligibleForPayments: !0,
    email: !0,
    enabledPresentmentCurrencies: !0,
    finances: !0,
    forceSsl: !0,
    googleAppsDomain: !0,
    googleAppsLoginEnabled: !0,
    grantedScopes: !0,
    hasDiscounts: !0,
    hasGiftCards: !0,
    hasStorefront: !0,
    ianaTimezone: !0,
    installedViaApiKey: !0,
    latitude: !0,
    longitude: !0,
    marketingSmsContentEnabledAtCheckout: !0,
    moneyFormat: !0,
    moneyInEmailsFormat: !0,
    moneyWithCurrencyFormat: !0,
    moneyWithCurrencyInEmailsFormat: !0,
    multiLocationEnabled: !0,
    myshopifyDomain: !0,
    name: !0,
    passwordEnabled: !0,
    phone: !0,
    planDisplayName: !0,
    planName: !0,
    preLaunchEnabled: !0,
    primaryLocale: !0,
    province: !0,
    provinceCode: !0,
    registeredWebhooks: !0,
    requiresExtraPaymentsAgreement: !0,
    setupRequired: !0,
    shopOwner: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    source: !0,
    taxShipping: !0,
    taxesIncluded: !0,
    timezone: !0,
    transactionalSmsDisabled: !0,
    updatedAt: !0,
    weightUnit: !0,
    zipCode: !0,
  },
  Ue = "shopifyShop",
  fr = "shopifyShops",
  EN = _n(Ue, fr, dn, [
    { type: "findOne", operationName: Ue, modelApiIdentifier: Ue, findByVariableName: "id", defaultSelection: dn },
    { type: "maybeFindOne", operationName: Ue, modelApiIdentifier: Ue, findByVariableName: "id", defaultSelection: dn },
    { type: "findMany", operationName: fr, modelApiIdentifier: Ue, defaultSelection: dn },
    { type: "findFirst", operationName: fr, modelApiIdentifier: Ue, defaultSelection: dn },
    { type: "maybeFindFirst", operationName: fr, modelApiIdentifier: Ue, defaultSelection: dn },
    {
      type: "action",
      operationName: "createShopifyShop",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Ue,
      modelSelectionField: Ue,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifyShop: { required: !1, type: "CreateShopifyShopInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: dn,
    },
    {
      type: "action",
      operationName: "bulkCreateShopifyShops",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Ue,
      modelSelectionField: fr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateShopifyShopsInput!]" } },
      defaultSelection: dn,
    },
    {
      type: "action",
      operationName: "updateShopifyShop",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Ue,
      modelSelectionField: Ue,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifyShop: { required: !1, type: "UpdateShopifyShopInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: dn,
    },
    {
      type: "action",
      operationName: "bulkUpdateShopifyShops",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Ue,
      modelSelectionField: fr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateShopifyShopsInput!]" } },
      defaultSelection: dn,
    },
    {
      type: "action",
      operationName: "deleteShopifyShop",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Ue,
      modelSelectionField: Ue,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteShopifyShops",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Ue,
      modelSelectionField: fr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "reinstallShopifyShop",
      functionName: "reinstall",
      namespace: null,
      modelApiIdentifier: Ue,
      modelSelectionField: Ue,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifyShop: { required: !1, type: "ReinstallShopifyShopInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: dn,
    },
    {
      type: "action",
      operationName: "bulkReinstallShopifyShops",
      functionName: "bulkReinstall",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "reinstall",
      modelApiIdentifier: Ue,
      modelSelectionField: fr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkReinstallShopifyShopsInput!]" } },
      defaultSelection: dn,
    },
    {
      type: "action",
      operationName: "uninstallShopifyShop",
      functionName: "uninstall",
      namespace: null,
      modelApiIdentifier: Ue,
      modelSelectionField: Ue,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifyShop: { required: !1, type: "UninstallShopifyShopInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: dn,
    },
    {
      type: "action",
      operationName: "bulkUninstallShopifyShops",
      functionName: "bulkUninstall",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "uninstall",
      modelApiIdentifier: Ue,
      modelSelectionField: fr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUninstallShopifyShopsInput!]" } },
      defaultSelection: dn,
    },
  ]),
  Qa = { __typename: !0, id: !0, state: !0, createdAt: !0, updatedAt: !0 },
  ii = "productPairing",
  bo = "productPairings",
  DN = _n(ii, bo, Qa, [
    { type: "findOne", operationName: ii, modelApiIdentifier: ii, findByVariableName: "id", defaultSelection: Qa },
    { type: "maybeFindOne", operationName: ii, modelApiIdentifier: ii, findByVariableName: "id", defaultSelection: Qa },
    { type: "findMany", operationName: bo, modelApiIdentifier: ii, defaultSelection: Qa },
    { type: "findFirst", operationName: bo, modelApiIdentifier: ii, defaultSelection: Qa },
    { type: "maybeFindFirst", operationName: bo, modelApiIdentifier: ii, defaultSelection: Qa },
    {
      type: "action",
      operationName: "createProductPairing",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: ii,
      modelSelectionField: ii,
      isBulk: !1,
      isDeleter: !1,
      variables: { productPairing: { required: !1, type: "CreateProductPairingInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Qa,
    },
    {
      type: "action",
      operationName: "bulkCreateProductPairings",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: ii,
      modelSelectionField: bo,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateProductPairingsInput!]" } },
      defaultSelection: Qa,
    },
    {
      type: "action",
      operationName: "updateProductPairing",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: ii,
      modelSelectionField: ii,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, productPairing: { required: !1, type: "UpdateProductPairingInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Qa,
    },
    {
      type: "action",
      operationName: "bulkUpdateProductPairings",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: ii,
      modelSelectionField: bo,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateProductPairingsInput!]" } },
      defaultSelection: Qa,
    },
    {
      type: "action",
      operationName: "deleteProductPairing",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: ii,
      modelSelectionField: ii,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteProductPairings",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: ii,
      modelSelectionField: bo,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  Nn = {
    __typename: !0,
    id: !0,
    state: !0,
    createdAt: !0,
    domain: !0,
    errorDetails: !0,
    errorMessage: !0,
    force: !0,
    models: !0,
    syncKey: !0,
    syncSince: !0,
    updatedAt: !0,
  },
  Ct = "shopifySync",
  Dr = "shopifySyncs",
  UN = _n(Ct, Dr, Nn, [
    { type: "findOne", operationName: Ct, modelApiIdentifier: Ct, findByVariableName: "id", defaultSelection: Nn },
    { type: "maybeFindOne", operationName: Ct, modelApiIdentifier: Ct, findByVariableName: "id", defaultSelection: Nn },
    { type: "findMany", operationName: Dr, modelApiIdentifier: Ct, defaultSelection: Nn },
    { type: "findFirst", operationName: Dr, modelApiIdentifier: Ct, defaultSelection: Nn },
    { type: "maybeFindFirst", operationName: Dr, modelApiIdentifier: Ct, defaultSelection: Nn },
    {
      type: "findOne",
      operationName: Dr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ct,
      defaultSelection: Nn,
    },
    {
      type: "action",
      operationName: "completeShopifySync",
      functionName: "complete",
      namespace: null,
      modelApiIdentifier: Ct,
      modelSelectionField: Ct,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifySync: { required: !1, type: "CompleteShopifySyncInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Nn,
    },
    {
      type: "action",
      operationName: "bulkCompleteShopifySyncs",
      functionName: "bulkComplete",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "complete",
      modelApiIdentifier: Ct,
      modelSelectionField: Dr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCompleteShopifySyncsInput!]" } },
      defaultSelection: Nn,
    },
    {
      type: "action",
      operationName: "errorShopifySync",
      functionName: "error",
      namespace: null,
      modelApiIdentifier: Ct,
      modelSelectionField: Ct,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifySync: { required: !1, type: "ErrorShopifySyncInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Nn,
    },
    {
      type: "action",
      operationName: "bulkErrorShopifySyncs",
      functionName: "bulkError",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "error",
      modelApiIdentifier: Ct,
      modelSelectionField: Dr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkErrorShopifySyncsInput!]" } },
      defaultSelection: Nn,
    },
    {
      type: "action",
      operationName: "runShopifySync",
      functionName: "run",
      namespace: null,
      modelApiIdentifier: Ct,
      modelSelectionField: Ct,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifySync: { required: !1, type: "RunShopifySyncInput" }, startReason: { required: !1, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Nn,
    },
    {
      type: "action",
      operationName: "bulkRunShopifySyncs",
      functionName: "bulkRun",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "run",
      modelApiIdentifier: Ct,
      modelSelectionField: Dr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkRunShopifySyncsInput!]" } },
      defaultSelection: Nn,
    },
  ]),
  Hn = { __typename: !0, id: !0, ambiguous: !0, booleanField: !0, createdAt: !0, updatedAt: !0 },
  Pt = "ambiguous",
  Ur = "ambiguouss",
  qN = _n(Pt, Ur, Hn, [
    { type: "findOne", operationName: Pt, modelApiIdentifier: Pt, findByVariableName: "id", defaultSelection: Hn },
    { type: "maybeFindOne", operationName: Pt, modelApiIdentifier: Pt, findByVariableName: "id", defaultSelection: Hn },
    { type: "findMany", operationName: Ur, modelApiIdentifier: Pt, defaultSelection: Hn },
    { type: "findFirst", operationName: Ur, modelApiIdentifier: Pt, defaultSelection: Hn },
    { type: "maybeFindFirst", operationName: Ur, modelApiIdentifier: Pt, defaultSelection: Hn },
    {
      type: "findOne",
      operationName: Ur,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Pt,
      defaultSelection: Hn,
    },
    {
      type: "action",
      operationName: "createAmbiguous",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Pt,
      modelSelectionField: Pt,
      isBulk: !1,
      isDeleter: !1,
      variables: { ambiguous: { required: !1, type: "CreateAmbiguousInput" } },
      hasAmbiguousIdentifier: !0,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Hn,
    },
    {
      type: "action",
      operationName: "bulkCreateAmbiguous",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Pt,
      modelSelectionField: Ur,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateAmbiguousInput!]" } },
      defaultSelection: Hn,
    },
    {
      type: "action",
      operationName: "updateAmbiguous",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Pt,
      modelSelectionField: Pt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, ambiguous: { required: !1, type: "UpdateAmbiguousInput" } },
      hasAmbiguousIdentifier: !0,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Hn,
    },
    {
      type: "action",
      operationName: "bulkUpdateAmbiguous",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Pt,
      modelSelectionField: Ur,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateAmbiguousInput!]" } },
      defaultSelection: Hn,
    },
    {
      type: "action",
      operationName: "deleteAmbiguous",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Pt,
      modelSelectionField: Pt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteAmbiguous",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Pt,
      modelSelectionField: Ur,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  Qn = { __typename: !0, id: !0, createdAt: !0, numberField: !0, stringField: !0, updatedAt: !0 },
  Et = "unambiguous",
  qr = "unambiguouss",
  VN = _n(Et, qr, Qn, [
    { type: "findOne", operationName: Et, modelApiIdentifier: Et, findByVariableName: "id", defaultSelection: Qn },
    { type: "maybeFindOne", operationName: Et, modelApiIdentifier: Et, findByVariableName: "id", defaultSelection: Qn },
    { type: "findMany", operationName: qr, modelApiIdentifier: Et, defaultSelection: Qn },
    { type: "findFirst", operationName: qr, modelApiIdentifier: Et, defaultSelection: Qn },
    { type: "maybeFindFirst", operationName: qr, modelApiIdentifier: Et, defaultSelection: Qn },
    {
      type: "findOne",
      operationName: qr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Et,
      defaultSelection: Qn,
    },
    {
      type: "action",
      operationName: "createUnambiguous",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Et,
      modelSelectionField: Et,
      isBulk: !1,
      isDeleter: !1,
      variables: { unambiguous: { required: !1, type: "CreateUnambiguousInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Qn,
    },
    {
      type: "action",
      operationName: "bulkCreateUnambiguous",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Et,
      modelSelectionField: qr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateUnambiguousInput!]" } },
      defaultSelection: Qn,
    },
    {
      type: "action",
      operationName: "updateUnambiguous",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Et,
      modelSelectionField: Et,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, unambiguous: { required: !1, type: "UpdateUnambiguousInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Qn,
    },
    {
      type: "action",
      operationName: "bulkUpdateUnambiguous",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Et,
      modelSelectionField: qr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateUnambiguousInput!]" } },
      defaultSelection: Qn,
    },
    {
      type: "action",
      operationName: "deleteUnambiguous",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Et,
      modelSelectionField: Et,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteUnambiguous",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Et,
      modelSelectionField: qr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  Lf = { __typename: !0, id: !0, state: !0, createdAt: !0, roles: { key: !0, name: !0 }, shopifySID: !0, updatedAt: !0 },
  Hf = "session",
  _N = "sessions",
  $N = _n(Hf, _N, Lf, [{ type: "get", operationName: "currentSession", defaultSelection: Lf, modelApiIdentifier: Hf }]);
var Zg;
const Qf = "production",
  GN = "development",
  jN = Symbol.for("gadget/modelRelationships"),
  zN = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let WN = class {
  constructor(t) {
    var a;
    (this.apiRoots = {
      development: "https://related-products-example.gadget.app/",
      production: "https://related-products-example.gadget.host/",
    }),
      (this.applicationId = "1268"),
      (this[Zg] = {
        user: { sessions: { type: "HasMany", model: "session" } },
        session: { shop: { type: "BelongsTo", model: "shopifyShop" }, user: { type: "BelongsTo", model: "user" } },
        shopifyProduct: {
          incomingPairedProducts: { type: "HasManyThrough", model: "shopifyProduct" },
          images: { type: "HasMany", model: "shopifyProductImage" },
          options: { type: "HasMany", model: "shopifyProductOption" },
          variants: { type: "HasMany", model: "shopifyProductVariant" },
          pairedProducts: { type: "HasManyThrough", model: "shopifyProduct" },
          shop: { type: "BelongsTo", model: "shopifyShop" },
        },
        shopifyProductImage: {
          variants: { type: "HasMany", model: "shopifyProductVariant" },
          product: { type: "BelongsTo", model: "shopifyProduct" },
          shop: { type: "BelongsTo", model: "shopifyShop" },
        },
        shopifyProductOption: {
          product: { type: "BelongsTo", model: "shopifyProduct" },
          shop: { type: "BelongsTo", model: "shopifyShop" },
        },
        shopifyProductVariant: {
          product: { type: "BelongsTo", model: "shopifyProduct" },
          productImage: { type: "BelongsTo", model: "shopifyProductImage" },
          shop: { type: "BelongsTo", model: "shopifyShop" },
        },
        shopifyShop: {
          productImages: { type: "HasMany", model: "shopifyProductImage" },
          productOptions: { type: "HasMany", model: "shopifyProductOption" },
          syncs: { type: "HasMany", model: "shopifySync" },
          products: { type: "HasMany", model: "shopifyProduct" },
          productVariants: { type: "HasMany", model: "shopifyProductVariant" },
        },
        productPairing: {
          productA: { type: "BelongsTo", model: "shopifyProduct" },
          productB: { type: "BelongsTo", model: "shopifyProduct" },
        },
        shopifySync: { shop: { type: "BelongsTo", model: "shopifyShop" } },
        ambiguous: {},
        unambiguous: {},
      }),
      (this.globalShopifySync = Object.assign(
        async (r) =>
          await gs(
            this.connection,
            "globalShopifySync",
            {
              apiKeys: { value: r.apiKeys, required: !1, type: "[String!]" },
              syncSince: { value: r.syncSince, required: !1, type: "DateTime" },
              models: { value: r.models, required: !1, type: "[String!]" },
              force: { value: r.force, required: !1, type: "Boolean" },
              startReason: { value: r.startReason, required: !1, type: "String" },
            },
            null
          ),
        {
          type: "globalAction",
          operationName: "globalShopifySync",
          namespace: null,
          variables: {
            apiKeys: { required: !1, type: "[String!]" },
            syncSince: { required: !1, type: "DateTime" },
            models: { required: !1, type: "[String!]" },
            force: { required: !1, type: "Boolean" },
            startReason: { required: !1, type: "String" },
          },
        }
      )),
      (this.test = Object.assign(async () => await gs(this.connection, "test", {}, null), {
        type: "globalAction",
        operationName: "test",
        namespace: null,
        variables: {},
      })),
      (this.transaction = async (r) => await this.connection.transaction(r)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken),
      (this.environment = ((t == null ? void 0 : t.environment) ?? zN() ?? GN).toLocaleLowerCase());
    let i;
    this.apiRoots[this.environment]
      ? (i = this.apiRoots[this.environment])
      : (i = `https://related-products-example${this.environment == Qf ? "" : `--${this.environment}`}.gadget.app`);
    const n = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== Qf) {
      const r =
        ({ forward: o }) =>
        (s) => {
          const l = o(s);
          return Vn(
            l,
            Bi((d) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const u = new CustomEvent("gadget:devharness:graphqlresult", { detail: d });
                  window.dispatchEvent(u);
                }
              } catch (u) {
                console.warn("[gadget] error dispatching gadget dev harness event", u);
              }
              return d;
            })
          );
        };
      n.beforeAll = [r, ...(n.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", i).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: n,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((a = t == null ? void 0 : t.authenticationMode) != null && a.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.user = new MN(this.connection)),
      (this.session = new ON(this.connection)),
      (this.shopifyProduct = new RN(this.connection)),
      (this.shopifyProductImage = new BN(this.connection)),
      (this.shopifyProductOption = new CN(this.connection)),
      (this.shopifyProductVariant = new PN(this.connection)),
      (this.shopifyShop = new EN(this.connection)),
      (this.productPairing = new DN(this.connection)),
      (this.shopifySync = new UN(this.connection)),
      (this.ambiguous = new qN(this.connection)),
      (this.unambiguous = new VN(this.connection)),
      (this.currentSession = new $N(this.connection)),
      (this.internal = {
        user: new B("user", this.connection, { pluralApiIdentifier: "users", hasAmbiguousIdentifier: !1 }),
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifier: !1 }),
        shopifyProduct: new B("shopifyProduct", this.connection, { pluralApiIdentifier: "shopifyProducts", hasAmbiguousIdentifier: !1 }),
        shopifyProductImage: new B("shopifyProductImage", this.connection, {
          pluralApiIdentifier: "shopifyProductImages",
          hasAmbiguousIdentifier: !1,
        }),
        shopifyProductOption: new B("shopifyProductOption", this.connection, {
          pluralApiIdentifier: "shopifyProductOptions",
          hasAmbiguousIdentifier: !1,
        }),
        shopifyProductVariant: new B("shopifyProductVariant", this.connection, {
          pluralApiIdentifier: "shopifyProductVariants",
          hasAmbiguousIdentifier: !1,
        }),
        shopifyShop: new B("shopifyShop", this.connection, { pluralApiIdentifier: "shopifyShops", hasAmbiguousIdentifier: !1 }),
        productPairing: new B("productPairing", this.connection, { pluralApiIdentifier: "productPairings", hasAmbiguousIdentifier: !1 }),
        shopifySync: new B("shopifySync", this.connection, { pluralApiIdentifier: "shopifySyncs", hasAmbiguousIdentifier: !1 }),
        ambiguous: new B("ambiguous", this.connection, { pluralApiIdentifier: "ambiguouss", hasAmbiguousIdentifier: !0 }),
        unambiguous: new B("unambiguous", this.connection, { pluralApiIdentifier: "unambiguouss", hasAmbiguousIdentifier: !1 }),
      });
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
Zg = jN;
const bn = (e, t, i, n) => {
  const a = class {
    constructor(r) {
      this.connection = r;
    }
  };
  for (const r of n)
    switch (r.type) {
      case "maybeFindOne":
      case "findOne": {
        "functionName" in r
          ? (a.prototype[r.functionName] = Object.assign(async function (o, s) {
              return await Ni(this, r.operationName, r.findByField, o, i, e, s);
            }, r))
          : (a.prototype[r.type] = Object.assign(async function (o, s) {
              const l = await ye(this, e, o, i, e, s, r.type != "maybeFindOne");
              return l.isEmpty() ? null : l;
            }, r));
        break;
      }
      case "findMany": {
        a.prototype.findMany = Object.assign(async function (o) {
          return await se(this, t, i, e, o);
        }, r);
        break;
      }
      case "maybeFindFirst":
      case "findFirst": {
        a.prototype[r.type] = Object.assign(async function (o) {
          const s = await se(this, t, i, e, { ...o, first: 1, last: void 0, before: void 0, after: void 0 }, r.type != "maybeFindFirst");
          return (s == null ? void 0 : s[0]) ?? null;
        }, r);
        break;
      }
      case "get": {
        a.prototype.get = Object.assign(async function (o) {
          return await ye(this, r.operationName, void 0, i, e, o);
        }, r);
        break;
      }
      case "action": {
        if (r.isBulk) {
          const o = !!r.variables.ids;
          a.prototype[r.functionName] = Object.assign(async function (s, l) {
            let d;
            return (
              o
                ? (d = { ids: { ...r.variables.ids, value: s } })
                : (d = { inputs: { ...r.variables.inputs, value: s.map((u) => Jg(this[r.singleActionFunctionName], void 0, u)) } }),
              await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !0, d, l, r.namespace, r.hasReturnType)
            );
          }, r);
        } else {
          const o = !!r.variables.id,
            s = Object.keys(r.variables).filter((l) => l != "id").length > 0;
          a.prototype[r.functionName] = Object.assign(async function (...l) {
            const [d, u] = LN(r, o, s, l);
            return await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !1, d, u, r.namespace, r.hasReturnType);
          }, r);
        }
        break;
      }
    }
  return a;
};
function Jg(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
function LN(e, t, i, n) {
  let a, r;
  t && (a = n.shift()), i && (r = n.shift());
  const o = n.shift();
  let s = r;
  (a || r) && (s = Jg(e, a, r));
  const l = {};
  for (const [d, u] of Object.entries(e.variables)) l[d] = { value: d == "id" ? a : s == null ? void 0 : s[d], ...u };
  return [l, o];
}
const Zn = { __typename: !0, id: !0, createdAt: !0, text: !0, updatedAt: !0 },
  Dt = "answer",
  Vr = "answers",
  HN = bn(Dt, Vr, Zn, [
    { type: "findOne", operationName: Dt, modelApiIdentifier: Dt, findByVariableName: "id", defaultSelection: Zn },
    { type: "maybeFindOne", operationName: Dt, modelApiIdentifier: Dt, findByVariableName: "id", defaultSelection: Zn },
    { type: "findMany", operationName: Vr, modelApiIdentifier: Dt, defaultSelection: Zn },
    { type: "findFirst", operationName: Vr, modelApiIdentifier: Dt, defaultSelection: Zn },
    { type: "maybeFindFirst", operationName: Vr, modelApiIdentifier: Dt, defaultSelection: Zn },
    {
      type: "findOne",
      operationName: Vr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Dt,
      defaultSelection: Zn,
    },
    {
      type: "action",
      operationName: "createAnswer",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Dt,
      modelSelectionField: Dt,
      isBulk: !1,
      isDeleter: !1,
      variables: { answer: { required: !1, type: "CreateAnswerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Zn,
    },
    {
      type: "action",
      operationName: "bulkCreateAnswers",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Dt,
      modelSelectionField: Vr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateAnswersInput!]" } },
      defaultSelection: Zn,
    },
    {
      type: "action",
      operationName: "updateAnswer",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Dt,
      modelSelectionField: Dt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, answer: { required: !1, type: "UpdateAnswerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Zn,
    },
    {
      type: "action",
      operationName: "bulkUpdateAnswers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Dt,
      modelSelectionField: Vr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateAnswersInput!]" } },
      defaultSelection: Zn,
    },
    {
      type: "action",
      operationName: "deleteAnswer",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Dt,
      modelSelectionField: Dt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteAnswers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Dt,
      modelSelectionField: Vr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  Jn = { __typename: !0, id: !0, createdAt: !0, productMetadata: !0, updatedAt: !0 },
  Ut = "recommendedProduct",
  _r = "recommendedProducts",
  QN = bn(Ut, _r, Jn, [
    { type: "findOne", operationName: Ut, modelApiIdentifier: Ut, findByVariableName: "id", defaultSelection: Jn },
    { type: "maybeFindOne", operationName: Ut, modelApiIdentifier: Ut, findByVariableName: "id", defaultSelection: Jn },
    { type: "findMany", operationName: _r, modelApiIdentifier: Ut, defaultSelection: Jn },
    { type: "findFirst", operationName: _r, modelApiIdentifier: Ut, defaultSelection: Jn },
    { type: "maybeFindFirst", operationName: _r, modelApiIdentifier: Ut, defaultSelection: Jn },
    {
      type: "findOne",
      operationName: _r,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Ut,
      defaultSelection: Jn,
    },
    {
      type: "action",
      operationName: "createRecommendedProduct",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Ut,
      modelSelectionField: Ut,
      isBulk: !1,
      isDeleter: !1,
      variables: { recommendedProduct: { required: !1, type: "CreateRecommendedProductInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Jn,
    },
    {
      type: "action",
      operationName: "bulkCreateRecommendedProducts",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Ut,
      modelSelectionField: _r,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateRecommendedProductsInput!]" } },
      defaultSelection: Jn,
    },
    {
      type: "action",
      operationName: "updateRecommendedProduct",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Ut,
      modelSelectionField: Ut,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, recommendedProduct: { required: !1, type: "UpdateRecommendedProductInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Jn,
    },
    {
      type: "action",
      operationName: "bulkUpdateRecommendedProducts",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Ut,
      modelSelectionField: _r,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateRecommendedProductsInput!]" } },
      defaultSelection: Jn,
    },
    {
      type: "action",
      operationName: "deleteRecommendedProduct",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Ut,
      modelSelectionField: Ut,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteRecommendedProducts",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Ut,
      modelSelectionField: _r,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  Yn = { __typename: !0, id: !0, createdAt: !0, updatedAt: !0 },
  qt = "notificationMetadata",
  $r = "notificationMetadatas",
  ZN = bn(qt, $r, Yn, [
    { type: "findOne", operationName: qt, modelApiIdentifier: qt, findByVariableName: "id", defaultSelection: Yn },
    { type: "maybeFindOne", operationName: qt, modelApiIdentifier: qt, findByVariableName: "id", defaultSelection: Yn },
    { type: "findMany", operationName: $r, modelApiIdentifier: qt, defaultSelection: Yn },
    { type: "findFirst", operationName: $r, modelApiIdentifier: qt, defaultSelection: Yn },
    { type: "maybeFindFirst", operationName: $r, modelApiIdentifier: qt, defaultSelection: Yn },
    {
      type: "findOne",
      operationName: $r,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: qt,
      defaultSelection: Yn,
    },
    {
      type: "action",
      operationName: "createNotificationMetadata",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: qt,
      modelSelectionField: qt,
      isBulk: !1,
      isDeleter: !1,
      variables: { notificationMetadata: { required: !1, type: "CreateNotificationMetadataInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Yn,
    },
    {
      type: "action",
      operationName: "bulkCreateNotificationMetadata",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: qt,
      modelSelectionField: $r,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateNotificationMetadataInput!]" } },
      defaultSelection: Yn,
    },
    {
      type: "action",
      operationName: "updateNotificationMetadata",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: qt,
      modelSelectionField: qt,
      isBulk: !1,
      isDeleter: !1,
      variables: {
        id: { required: !0, type: "GadgetID" },
        notificationMetadata: { required: !1, type: "UpdateNotificationMetadataInput" },
      },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Yn,
    },
    {
      type: "action",
      operationName: "bulkUpdateNotificationMetadata",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: qt,
      modelSelectionField: $r,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateNotificationMetadataInput!]" } },
      defaultSelection: Yn,
    },
    {
      type: "action",
      operationName: "deleteNotificationMetadata",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: qt,
      modelSelectionField: qt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteNotificationMetadata",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: qt,
      modelSelectionField: $r,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  vo = { __typename: !0, id: !0, createdAt: !0, payload: !0, topic: !0, updatedAt: !0 },
  mr = "shopifyGdprRequest",
  Es = "shopifyGdprRequests",
  JN = bn(mr, Es, vo, [
    { type: "findOne", operationName: mr, modelApiIdentifier: mr, findByVariableName: "id", defaultSelection: vo },
    { type: "maybeFindOne", operationName: mr, modelApiIdentifier: mr, findByVariableName: "id", defaultSelection: vo },
    { type: "findMany", operationName: Es, modelApiIdentifier: mr, defaultSelection: vo },
    { type: "findFirst", operationName: Es, modelApiIdentifier: mr, defaultSelection: vo },
    { type: "maybeFindFirst", operationName: Es, modelApiIdentifier: mr, defaultSelection: vo },
    {
      type: "findOne",
      operationName: Es,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: mr,
      defaultSelection: vo,
    },
  ]),
  Gr = {
    __typename: !0,
    id: !0,
    body: !0,
    compareAtPriceRange: !0,
    createdAt: !0,
    handle: !0,
    productCategory: !0,
    productType: !0,
    publishedAt: !0,
    publishedScope: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    status: !0,
    tags: !0,
    templateSuffix: !0,
    title: !0,
    updatedAt: !0,
    vendor: !0,
  },
  Xn = "shopifyProduct",
  Ds = "shopifyProducts",
  YN = bn(Xn, Ds, Gr, [
    { type: "findOne", operationName: Xn, modelApiIdentifier: Xn, findByVariableName: "id", defaultSelection: Gr },
    { type: "maybeFindOne", operationName: Xn, modelApiIdentifier: Xn, findByVariableName: "id", defaultSelection: Gr },
    { type: "findMany", operationName: Ds, modelApiIdentifier: Xn, defaultSelection: Gr },
    { type: "findFirst", operationName: Ds, modelApiIdentifier: Xn, defaultSelection: Gr },
    { type: "maybeFindFirst", operationName: Ds, modelApiIdentifier: Xn, defaultSelection: Gr },
    {
      type: "action",
      operationName: "createShopifyProduct",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Xn,
      modelSelectionField: Xn,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifyProduct: { required: !1, type: "CreateShopifyProductInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Gr,
    },
    {
      type: "action",
      operationName: "bulkCreateShopifyProducts",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Xn,
      modelSelectionField: Ds,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateShopifyProductsInput!]" } },
      defaultSelection: Gr,
    },
  ]),
  es = {
    __typename: !0,
    id: !0,
    state: !0,
    address1: !0,
    address2: !0,
    checkoutApiSupported: !0,
    city: !0,
    cookieConsentLevel: !0,
    country: !0,
    countryCode: !0,
    countryName: !0,
    countyTaxes: !0,
    createdAt: !0,
    currency: !0,
    customerAccountsV2: !0,
    customerEmail: !0,
    disabledWebhooks: !0,
    domain: !0,
    eligibleForCardReaderGiveaway: !0,
    eligibleForPayments: !0,
    email: !0,
    enabledPresentmentCurrencies: !0,
    finances: !0,
    forceSsl: !0,
    googleAppsDomain: !0,
    googleAppsLoginEnabled: !0,
    grantedScopes: !0,
    hasDiscounts: !0,
    hasGiftCards: !0,
    hasStorefront: !0,
    ianaTimezone: !0,
    installedViaApiKey: !0,
    latitude: !0,
    longitude: !0,
    marketingSmsContentEnabledAtCheckout: !0,
    moneyFormat: !0,
    moneyInEmailsFormat: !0,
    moneyWithCurrencyFormat: !0,
    moneyWithCurrencyInEmailsFormat: !0,
    multiLocationEnabled: !0,
    myshopifyDomain: !0,
    name: !0,
    passwordEnabled: !0,
    phone: !0,
    planDisplayName: !0,
    planName: !0,
    preLaunchEnabled: !0,
    primaryLocale: !0,
    province: !0,
    provinceCode: !0,
    registeredWebhooks: !0,
    requiresExtraPaymentsAgreement: !0,
    setupRequired: !0,
    shopOwner: !0,
    shopifyCreatedAt: !0,
    shopifyUpdatedAt: !0,
    source: !0,
    taxShipping: !0,
    taxesIncluded: !0,
    timezone: !0,
    transactionalSmsDisabled: !0,
    updatedAt: !0,
    weightUnit: !0,
    zipCode: !0,
  },
  jr = "shopifyShop",
  Rl = "shopifyShops",
  XN = bn(jr, Rl, es, [
    { type: "findOne", operationName: jr, modelApiIdentifier: jr, findByVariableName: "id", defaultSelection: es },
    { type: "maybeFindOne", operationName: jr, modelApiIdentifier: jr, findByVariableName: "id", defaultSelection: es },
    { type: "findMany", operationName: Rl, modelApiIdentifier: jr, defaultSelection: es },
    { type: "findFirst", operationName: Rl, modelApiIdentifier: jr, defaultSelection: es },
    { type: "maybeFindFirst", operationName: Rl, modelApiIdentifier: jr, defaultSelection: es },
  ]),
  xi = {
    __typename: !0,
    id: !0,
    state: !0,
    createdAt: !0,
    domain: !0,
    errorDetails: !0,
    errorMessage: !0,
    force: !0,
    models: !0,
    syncSince: !0,
    updatedAt: !0,
  },
  ct = "shopifySync",
  yr = "shopifySyncs",
  KN = bn(ct, yr, xi, [
    { type: "findOne", operationName: ct, modelApiIdentifier: ct, findByVariableName: "id", defaultSelection: xi },
    { type: "maybeFindOne", operationName: ct, modelApiIdentifier: ct, findByVariableName: "id", defaultSelection: xi },
    { type: "findMany", operationName: yr, modelApiIdentifier: ct, defaultSelection: xi },
    { type: "findFirst", operationName: yr, modelApiIdentifier: ct, defaultSelection: xi },
    { type: "maybeFindFirst", operationName: yr, modelApiIdentifier: ct, defaultSelection: xi },
    {
      type: "findOne",
      operationName: yr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: ct,
      defaultSelection: xi,
    },
    {
      type: "action",
      operationName: "abortShopifySync",
      functionName: "abort",
      namespace: null,
      modelApiIdentifier: ct,
      modelSelectionField: ct,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifySync: { required: !1, type: "AbortShopifySyncInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: xi,
    },
    {
      type: "action",
      operationName: "bulkAbortShopifySyncs",
      functionName: "bulkAbort",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "abort",
      modelApiIdentifier: ct,
      modelSelectionField: yr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkAbortShopifySyncsInput!]" } },
      defaultSelection: xi,
    },
    {
      type: "action",
      operationName: "completeShopifySync",
      functionName: "complete",
      namespace: null,
      modelApiIdentifier: ct,
      modelSelectionField: ct,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifySync: { required: !1, type: "CompleteShopifySyncInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: xi,
    },
    {
      type: "action",
      operationName: "bulkCompleteShopifySyncs",
      functionName: "bulkComplete",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "complete",
      modelApiIdentifier: ct,
      modelSelectionField: yr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCompleteShopifySyncsInput!]" } },
      defaultSelection: xi,
    },
    {
      type: "action",
      operationName: "errorShopifySync",
      functionName: "error",
      namespace: null,
      modelApiIdentifier: ct,
      modelSelectionField: ct,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, shopifySync: { required: !1, type: "ErrorShopifySyncInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: xi,
    },
    {
      type: "action",
      operationName: "bulkErrorShopifySyncs",
      functionName: "bulkError",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "error",
      modelApiIdentifier: ct,
      modelSelectionField: yr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkErrorShopifySyncsInput!]" } },
      defaultSelection: xi,
    },
    {
      type: "action",
      operationName: "runShopifySync",
      functionName: "run",
      namespace: null,
      modelApiIdentifier: ct,
      modelSelectionField: ct,
      isBulk: !1,
      isDeleter: !1,
      variables: { shopifySync: { required: !1, type: "RunShopifySyncInput" }, startReason: { required: !1, type: "String" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: xi,
    },
    {
      type: "action",
      operationName: "bulkRunShopifySyncs",
      functionName: "bulkRun",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "run",
      modelApiIdentifier: ct,
      modelSelectionField: yr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkRunShopifySyncsInput!]" } },
      defaultSelection: xi,
    },
  ]),
  Kn = { __typename: !0, id: !0, createdAt: !0, updatedAt: !0 },
  Vt = "questionable",
  zr = "questionables",
  eA = bn(Vt, zr, Kn, [
    { type: "findOne", operationName: Vt, modelApiIdentifier: Vt, findByVariableName: "id", defaultSelection: Kn },
    { type: "maybeFindOne", operationName: Vt, modelApiIdentifier: Vt, findByVariableName: "id", defaultSelection: Kn },
    { type: "findMany", operationName: zr, modelApiIdentifier: Vt, defaultSelection: Kn },
    { type: "findFirst", operationName: zr, modelApiIdentifier: Vt, defaultSelection: Kn },
    { type: "maybeFindFirst", operationName: zr, modelApiIdentifier: Vt, defaultSelection: Kn },
    {
      type: "findOne",
      operationName: zr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Vt,
      defaultSelection: Kn,
    },
    {
      type: "action",
      operationName: "createQuestionable",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Vt,
      modelSelectionField: Vt,
      isBulk: !1,
      isDeleter: !1,
      variables: { questionable: { required: !1, type: "CreateQuestionableInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Kn,
    },
    {
      type: "action",
      operationName: "bulkCreateQuestionables",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Vt,
      modelSelectionField: zr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateQuestionablesInput!]" } },
      defaultSelection: Kn,
    },
    {
      type: "action",
      operationName: "updateQuestionable",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Vt,
      modelSelectionField: Vt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, questionable: { required: !1, type: "UpdateQuestionableInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: Kn,
    },
    {
      type: "action",
      operationName: "bulkUpdateQuestionables",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Vt,
      modelSelectionField: zr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateQuestionablesInput!]" } },
      defaultSelection: Kn,
    },
    {
      type: "action",
      operationName: "deleteQuestionable",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Vt,
      modelSelectionField: Vt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteQuestionables",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Vt,
      modelSelectionField: zr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  ea = { __typename: !0, id: !0, createdAt: !0, text: !0, updatedAt: !0 },
  _t = "notificationMessage",
  Wr = "notificationMessages",
  tA = bn(_t, Wr, ea, [
    { type: "findOne", operationName: _t, modelApiIdentifier: _t, findByVariableName: "id", defaultSelection: ea },
    { type: "maybeFindOne", operationName: _t, modelApiIdentifier: _t, findByVariableName: "id", defaultSelection: ea },
    { type: "findMany", operationName: Wr, modelApiIdentifier: _t, defaultSelection: ea },
    { type: "findFirst", operationName: Wr, modelApiIdentifier: _t, defaultSelection: ea },
    { type: "maybeFindFirst", operationName: Wr, modelApiIdentifier: _t, defaultSelection: ea },
    {
      type: "findOne",
      operationName: Wr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: _t,
      defaultSelection: ea,
    },
    {
      type: "action",
      operationName: "createNotificationMessage",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: _t,
      modelSelectionField: _t,
      isBulk: !1,
      isDeleter: !1,
      variables: { notificationMessage: { required: !1, type: "CreateNotificationMessageInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ea,
    },
    {
      type: "action",
      operationName: "bulkCreateNotificationMessages",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: _t,
      modelSelectionField: Wr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateNotificationMessagesInput!]" } },
      defaultSelection: ea,
    },
    {
      type: "action",
      operationName: "updateNotificationMessage",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: _t,
      modelSelectionField: _t,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, notificationMessage: { required: !1, type: "UpdateNotificationMessageInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ea,
    },
    {
      type: "action",
      operationName: "bulkUpdateNotificationMessages",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: _t,
      modelSelectionField: Wr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateNotificationMessagesInput!]" } },
      defaultSelection: ea,
    },
    {
      type: "action",
      operationName: "deleteNotificationMessage",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: _t,
      modelSelectionField: _t,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteNotificationMessages",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: _t,
      modelSelectionField: Wr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  ta = { __typename: !0, id: !0, createdAt: !0, text: !0, updatedAt: !0 },
  $t = "question",
  Lr = "questions",
  iA = bn($t, Lr, ta, [
    { type: "findOne", operationName: $t, modelApiIdentifier: $t, findByVariableName: "id", defaultSelection: ta },
    { type: "maybeFindOne", operationName: $t, modelApiIdentifier: $t, findByVariableName: "id", defaultSelection: ta },
    { type: "findMany", operationName: Lr, modelApiIdentifier: $t, defaultSelection: ta },
    { type: "findFirst", operationName: Lr, modelApiIdentifier: $t, defaultSelection: ta },
    { type: "maybeFindFirst", operationName: Lr, modelApiIdentifier: $t, defaultSelection: ta },
    {
      type: "findOne",
      operationName: Lr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: $t,
      defaultSelection: ta,
    },
    {
      type: "action",
      operationName: "createQuestion",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: $t,
      modelSelectionField: $t,
      isBulk: !1,
      isDeleter: !1,
      variables: { question: { required: !1, type: "CreateQuestionInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ta,
    },
    {
      type: "action",
      operationName: "bulkCreateQuestions",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: $t,
      modelSelectionField: Lr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateQuestionsInput!]" } },
      defaultSelection: ta,
    },
    {
      type: "action",
      operationName: "updateQuestion",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: $t,
      modelSelectionField: $t,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, question: { required: !1, type: "UpdateQuestionInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ta,
    },
    {
      type: "action",
      operationName: "bulkUpdateQuestions",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: $t,
      modelSelectionField: Lr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateQuestionsInput!]" } },
      defaultSelection: ta,
    },
    {
      type: "action",
      operationName: "deleteQuestion",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: $t,
      modelSelectionField: $t,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteQuestions",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: $t,
      modelSelectionField: Lr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  ia = { __typename: !0, id: !0, createdAt: !0, text: !0, updatedAt: !0 },
  Gt = "quiz",
  Hr = "quizzes",
  nA = bn(Gt, Hr, ia, [
    { type: "findOne", operationName: Gt, modelApiIdentifier: Gt, findByVariableName: "id", defaultSelection: ia },
    { type: "maybeFindOne", operationName: Gt, modelApiIdentifier: Gt, findByVariableName: "id", defaultSelection: ia },
    { type: "findMany", operationName: Hr, modelApiIdentifier: Gt, defaultSelection: ia },
    { type: "findFirst", operationName: Hr, modelApiIdentifier: Gt, defaultSelection: ia },
    { type: "maybeFindFirst", operationName: Hr, modelApiIdentifier: Gt, defaultSelection: ia },
    {
      type: "findOne",
      operationName: Hr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Gt,
      defaultSelection: ia,
    },
    {
      type: "action",
      operationName: "createQuiz",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Gt,
      modelSelectionField: Gt,
      isBulk: !1,
      isDeleter: !1,
      variables: { quiz: { required: !1, type: "CreateQuizInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ia,
    },
    {
      type: "action",
      operationName: "bulkCreateQuizzes",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Gt,
      modelSelectionField: Hr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateQuizzesInput!]" } },
      defaultSelection: ia,
    },
    {
      type: "action",
      operationName: "updateQuiz",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Gt,
      modelSelectionField: Gt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, quiz: { required: !1, type: "UpdateQuizInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ia,
    },
    {
      type: "action",
      operationName: "bulkUpdateQuizzes",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Gt,
      modelSelectionField: Hr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateQuizzesInput!]" } },
      defaultSelection: ia,
    },
    {
      type: "action",
      operationName: "deleteQuiz",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Gt,
      modelSelectionField: Gt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteQuizzes",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Gt,
      modelSelectionField: Hr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  na = { __typename: !0, id: !0, createdAt: !0, enabled: !0, sendOutDate: !0, updatedAt: !0 },
  jt = "notification",
  Qr = "notifications",
  aA = bn(jt, Qr, na, [
    { type: "findOne", operationName: jt, modelApiIdentifier: jt, findByVariableName: "id", defaultSelection: na },
    { type: "maybeFindOne", operationName: jt, modelApiIdentifier: jt, findByVariableName: "id", defaultSelection: na },
    { type: "findMany", operationName: Qr, modelApiIdentifier: jt, defaultSelection: na },
    { type: "findFirst", operationName: Qr, modelApiIdentifier: jt, defaultSelection: na },
    { type: "maybeFindFirst", operationName: Qr, modelApiIdentifier: jt, defaultSelection: na },
    {
      type: "findOne",
      operationName: Qr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: jt,
      defaultSelection: na,
    },
    {
      type: "action",
      operationName: "createNotification",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: jt,
      modelSelectionField: jt,
      isBulk: !1,
      isDeleter: !1,
      variables: { notification: { required: !1, type: "CreateNotificationInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: na,
    },
    {
      type: "action",
      operationName: "bulkCreateNotifications",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: jt,
      modelSelectionField: Qr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateNotificationsInput!]" } },
      defaultSelection: na,
    },
    {
      type: "action",
      operationName: "updateNotification",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: jt,
      modelSelectionField: jt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, notification: { required: !1, type: "UpdateNotificationInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: na,
    },
    {
      type: "action",
      operationName: "bulkUpdateNotifications",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: jt,
      modelSelectionField: Qr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateNotificationsInput!]" } },
      defaultSelection: na,
    },
    {
      type: "action",
      operationName: "deleteNotification",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: jt,
      modelSelectionField: jt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteNotifications",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: jt,
      modelSelectionField: Qr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  Io = { __typename: !0, id: !0, createdAt: !0, roles: { key: !0, name: !0 }, shopifySID: !0, updatedAt: !0 },
  gr = "session",
  Us = "sessions",
  rA = bn(gr, Us, Io, [
    { type: "findOne", operationName: gr, modelApiIdentifier: gr, findByVariableName: "id", defaultSelection: Io },
    { type: "maybeFindOne", operationName: gr, modelApiIdentifier: gr, findByVariableName: "id", defaultSelection: Io },
    { type: "findMany", operationName: Us, modelApiIdentifier: gr, defaultSelection: Io },
    { type: "findFirst", operationName: Us, modelApiIdentifier: gr, defaultSelection: Io },
    { type: "maybeFindFirst", operationName: Us, modelApiIdentifier: gr, defaultSelection: Io },
    {
      type: "findOne",
      operationName: Us,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: gr,
      defaultSelection: Io,
    },
  ]),
  Zf = { __typename: !0, id: !0, createdAt: !0, roles: { key: !0, name: !0 }, shopifySID: !0, updatedAt: !0 },
  Jf = "session",
  oA = "sessions",
  sA = bn(Jf, oA, Zf, [{ type: "get", operationName: "currentSession", defaultSelection: Zf, modelApiIdentifier: Jf }]);
var Yg;
const Yf = "production",
  lA = "development",
  dA = Symbol.for("gadget/modelRelationships"),
  uA = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let cA = class {
  constructor(t) {
    var a;
    (this.apiRoots = {
      development: "https://zxcv-deeply-nested--development.gadget.app/",
      production: "https://zxcv-deeply-nested.gadget.app/",
    }),
      (this.applicationId = "76013"),
      (this[Yg] = {
        answer: {
          question: { type: "BelongsTo", model: "question" },
          notification: { type: "HasOne", model: "notification" },
          questionable: { type: "BelongsTo", model: "questionable" },
          recommendedProduct: { type: "HasOne", model: "recommendedProduct" },
        },
        recommendedProduct: {
          productSuggestion: { type: "BelongsTo", model: "shopifyShop" },
          answer: { type: "BelongsTo", model: "answer" },
          anotherProductSuggestion: { type: "BelongsTo", model: "shopifyShop" },
        },
        notificationMetadata: { notificationMessages: { type: "HasMany", model: "notificationMessage" } },
        shopifyGdprRequest: { shop: { type: "BelongsTo", model: "shopifyShop" } },
        shopifyProduct: { shop: { type: "BelongsTo", model: "shopifyShop" } },
        shopifyShop: {
          syncs: { type: "HasMany", model: "shopifySync" },
          products: { type: "HasMany", model: "shopifyProduct" },
          gdprRequests: { type: "HasMany", model: "shopifyGdprRequest" },
          recommendedProducts: { type: "HasMany", model: "recommendedProduct" },
        },
        shopifySync: { shop: { type: "BelongsTo", model: "shopifyShop" } },
        questionable: { quiz: { type: "BelongsTo", model: "quiz" }, answers: { type: "HasMany", model: "answer" } },
        notificationMessage: {
          notificationMetadata: { type: "BelongsTo", model: "notificationMetadata" },
          notification: { type: "BelongsTo", model: "notification" },
        },
        question: { answers: { type: "HasMany", model: "answer" }, quiz: { type: "BelongsTo", model: "quiz" } },
        quiz: { questionables: { type: "HasMany", model: "questionable" }, questions: { type: "HasMany", model: "question" } },
        notification: {
          notificationMessage: { type: "HasOne", model: "notificationMessage" },
          answer: { type: "BelongsTo", model: "answer" },
        },
        session: { shop: { type: "BelongsTo", model: "shopifyShop" } },
      }),
      (this.globalShopifySync = Object.assign(
        async (r) =>
          await gs(
            this.connection,
            "globalShopifySync",
            {
              apiKeys: { value: r.apiKeys, required: !1, type: "[String!]" },
              syncSince: { value: r.syncSince, required: !1, type: "DateTime" },
              models: { value: r.models, required: !1, type: "[String!]" },
              force: { value: r.force, required: !1, type: "Boolean" },
              startReason: { value: r.startReason, required: !1, type: "String" },
            },
            null
          ),
        {
          type: "globalAction",
          operationName: "globalShopifySync",
          namespace: null,
          variables: {
            apiKeys: { required: !1, type: "[String!]" },
            syncSince: { required: !1, type: "DateTime" },
            models: { required: !1, type: "[String!]" },
            force: { required: !1, type: "Boolean" },
            startReason: { required: !1, type: "String" },
          },
        }
      )),
      (this.transaction = async (r) => await this.connection.transaction(r)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken),
      (this.environment = ((t == null ? void 0 : t.environment) ?? uA() ?? lA).toLocaleLowerCase());
    let i;
    this.apiRoots[this.environment]
      ? (i = this.apiRoots[this.environment])
      : (i = `https://zxcv-deeply-nested${this.environment == Yf ? "" : `--${this.environment}`}.gadget.app`);
    const n = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== Yf) {
      const r =
        ({ forward: o }) =>
        (s) => {
          const l = o(s);
          return Vn(
            l,
            Bi((d) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const u = new CustomEvent("gadget:devharness:graphqlresult", { detail: d });
                  window.dispatchEvent(u);
                }
              } catch (u) {
                console.warn("[gadget] error dispatching gadget dev harness event", u);
              }
              return d;
            })
          );
        };
      n.beforeAll = [r, ...(n.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", i).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: n,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((a = t == null ? void 0 : t.authenticationMode) != null && a.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.answer = new HN(this.connection)),
      (this.recommendedProduct = new QN(this.connection)),
      (this.notificationMetadata = new ZN(this.connection)),
      (this.shopifyGdprRequest = new JN(this.connection)),
      (this.shopifyProduct = new YN(this.connection)),
      (this.shopifyShop = new XN(this.connection)),
      (this.shopifySync = new KN(this.connection)),
      (this.questionable = new eA(this.connection)),
      (this.notificationMessage = new tA(this.connection)),
      (this.question = new iA(this.connection)),
      (this.quiz = new nA(this.connection)),
      (this.notification = new aA(this.connection)),
      (this.session = new rA(this.connection)),
      (this.currentSession = new sA(this.connection)),
      (this.internal = {
        answer: new B("answer", this.connection, { pluralApiIdentifier: "answers", hasAmbiguousIdentifier: !1 }),
        recommendedProduct: new B("recommendedProduct", this.connection, {
          pluralApiIdentifier: "recommendedProducts",
          hasAmbiguousIdentifier: !1,
        }),
        notificationMetadata: new B("notificationMetadata", this.connection, {
          pluralApiIdentifier: "notificationMetadatas",
          hasAmbiguousIdentifier: !1,
        }),
        shopifyGdprRequest: new B("shopifyGdprRequest", this.connection, {
          pluralApiIdentifier: "shopifyGdprRequests",
          hasAmbiguousIdentifier: !1,
        }),
        shopifyProduct: new B("shopifyProduct", this.connection, { pluralApiIdentifier: "shopifyProducts", hasAmbiguousIdentifier: !1 }),
        shopifyShop: new B("shopifyShop", this.connection, { pluralApiIdentifier: "shopifyShops", hasAmbiguousIdentifier: !1 }),
        shopifySync: new B("shopifySync", this.connection, { pluralApiIdentifier: "shopifySyncs", hasAmbiguousIdentifier: !1 }),
        questionable: new B("questionable", this.connection, { pluralApiIdentifier: "questionables", hasAmbiguousIdentifier: !1 }),
        notificationMessage: new B("notificationMessage", this.connection, {
          pluralApiIdentifier: "notificationMessages",
          hasAmbiguousIdentifier: !1,
        }),
        question: new B("question", this.connection, { pluralApiIdentifier: "questions", hasAmbiguousIdentifier: !1 }),
        quiz: new B("quiz", this.connection, { pluralApiIdentifier: "quizzes", hasAmbiguousIdentifier: !1 }),
        notification: new B("notification", this.connection, { pluralApiIdentifier: "notifications", hasAmbiguousIdentifier: !1 }),
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifier: !1 }),
      });
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
Yg = dA;
function Ne(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
const Z = {
    __typename: !0,
    createdAt: !0,
    email: !0,
    emailVerificationToken: !0,
    emailVerificationTokenExpiration: !0,
    emailVerified: !0,
    firstName: !0,
    googleImageUrl: !0,
    googleProfileId: !0,
    id: !0,
    lastName: !0,
    lastSignedIn: !0,
    resetPasswordToken: !0,
    resetPasswordTokenExpiration: !0,
    roles: { key: !0, name: !0 },
    updatedAt: !0,
  },
  W = "user";
async function pA(e, t) {
  const i = Ne(this.signUp, void 0, e);
  return await H(
    this,
    "signUpUser",
    Z,
    W,
    W,
    !1,
    { email: { value: i.email, required: !0, type: "String" }, password: { value: i.password, required: !0, type: "String" } },
    t,
    null,
    !0
  );
}
async function fA(e, t) {
  const i = Ne(this.signIn, void 0, e);
  return await H(
    this,
    "signInUser",
    Z,
    W,
    W,
    !1,
    { email: { value: i.email, required: !0, type: "String" }, password: { value: i.password, required: !0, type: "String" } },
    t,
    null,
    !1
  );
}
async function mA(e, t) {
  return await H(this, "signOutUser", Z, W, W, !1, { id: { value: e, required: !0, type: "GadgetID" } }, t, null, !1);
}
async function yA(e, t, i) {
  const n = Ne(this.update, e, t);
  return await H(
    this,
    "updateUser",
    Z,
    W,
    W,
    !1,
    { id: { value: e, required: !0, type: "GadgetID" }, user: { value: n.user, required: !1, type: "UpdateUserInput" } },
    i,
    null,
    !1
  );
}
async function gA(e, t) {
  return await H(this, "deleteUser", null, W, W, !1, { id: { value: e, required: !0, type: "GadgetID" } }, t, null, !1);
}
async function hA(e, t) {
  const i = Ne(this.sendVerifyEmail, void 0, e);
  return await H(this, "sendVerifyEmailUser", Z, W, W, !1, { email: { value: i.email, required: !0, type: "String" } }, t, null, !0);
}
async function bA(e, t) {
  const i = Ne(this.verifyEmail, void 0, e);
  return await H(this, "verifyEmailUser", Z, W, W, !1, { code: { value: i.code, required: !0, type: "String" } }, t, null, !0);
}
async function vA(e, t) {
  const i = Ne(this.sendResetPassword, void 0, e);
  return await H(this, "sendResetPasswordUser", Z, W, W, !1, { email: { value: i.email, required: !0, type: "String" } }, t, null, !0);
}
async function IA(e, t) {
  const i = Ne(this.resetPassword, void 0, e);
  return await H(
    this,
    "resetPasswordUser",
    Z,
    W,
    W,
    !1,
    { password: { value: i.password, required: !0, type: "String" }, code: { value: i.code, required: !0, type: "String" } },
    t,
    null,
    !0
  );
}
async function SA(e, t, i) {
  const n = Ne(this.changePassword, e, t);
  return await H(
    this,
    "changePasswordUser",
    Z,
    W,
    W,
    !1,
    {
      id: { value: e, required: !0, type: "GadgetID" },
      currentPassword: { value: n.currentPassword, required: !0, type: "String" },
      newPassword: { value: n.newPassword, required: !0, type: "String" },
    },
    i,
    null,
    !1
  );
}
class kA {
  constructor(t) {
    (this.connection = t),
      (this.findOne = Object.assign(async (i, n) => await ye(this, "user", i, Z, W, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "user",
        modelApiIdentifier: W,
        defaultSelection: Z,
      })),
      (this.maybeFindOne = Object.assign(
        async (i, n) => {
          const a = await ye(this, "user", i, Z, W, n, !1);
          return a.isEmpty() ? null : a;
        },
        { type: "maybeFindOne", findByVariableName: "id", operationName: "user", modelApiIdentifier: "user", defaultSelection: Z }
      )),
      (this.findMany = Object.assign(async (i) => await se(this, "users", Z, "user", i), {
        type: "findMany",
        operationName: "users",
        modelApiIdentifier: W,
        defaultSelection: Z,
      })),
      (this.findFirst = Object.assign(
        async (i) => (await se(this, "users", Z, W, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !0))[0],
        { type: "findFirst", operationName: "users", modelApiIdentifier: W, defaultSelection: Z }
      )),
      (this.maybeFindFirst = Object.assign(
        async (i) => {
          const n = await se(this, "users", Z, W, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !1);
          return (n == null ? void 0 : n[0]) ?? null;
        },
        { type: "maybeFindFirst", operationName: "users", modelApiIdentifier: W, defaultSelection: Z }
      )),
      (this.findById = Object.assign(async (i, n) => await Ni(this, "users", "id", i, Z, W, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "users",
        modelApiIdentifier: W,
        defaultSelection: Z,
      })),
      (this.findByEmail = Object.assign(async (i, n) => await Ni(this, "users", "email", i, Z, W, n), {
        type: "findOne",
        findByVariableName: "email",
        operationName: "users",
        modelApiIdentifier: W,
        defaultSelection: Z,
      })),
      (this.signUp = Object.assign(pA, {
        type: "action",
        operationName: "signUpUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: { email: { required: !0, type: "String" }, password: { required: !0, type: "String" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !0,
        acceptsModelInput: !1,
      })),
      (this.bulkSignUp = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.signUp, void 0, r));
          return await H(
            this,
            "bulkSignUpUsers",
            Z,
            "user",
            "users",
            !0,
            { inputs: { value: a, ...this.bulkSignUp.variables.inputs } },
            n,
            null,
            !0
          );
        },
        {
          type: "action",
          operationName: "bulkSignUpUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { inputs: { required: !0, type: "[BulkSignUpUsersInput!]" } },
          hasReturnType: !0,
          acceptsModelInput: !1,
        }
      )),
      (this.signIn = Object.assign(fA, {
        type: "action",
        operationName: "signInUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: { email: { required: !0, type: "String" }, password: { required: !0, type: "String" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !1,
      })),
      (this.bulkSignIn = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.signIn, void 0, r));
          return await H(
            this,
            "bulkSignInUsers",
            Z,
            "user",
            "users",
            !0,
            { inputs: { value: a, ...this.bulkSignIn.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkSignInUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { inputs: { required: !0, type: "[BulkSignInUsersInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !1,
        }
      )),
      (this.signOut = Object.assign(mA, {
        type: "action",
        operationName: "signOutUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: { id: { required: !0, type: "GadgetID" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !1,
      })),
      (this.bulkSignOut = Object.assign(
        async (i, n) =>
          await H(this, "bulkSignOutUsers", Z, "user", "users", !0, { ids: { value: i, ...this.bulkSignOut.variables.ids } }, n, null, !1),
        {
          type: "action",
          operationName: "bulkSignOutUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { ids: { required: !0, type: "[GadgetID!]" } },
          hasReturnType: !1,
          acceptsModelInput: !1,
        }
      )),
      (this.update = Object.assign(yA, {
        type: "action",
        operationName: "updateUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: { id: { required: !0, type: "GadgetID" }, user: { required: !1, type: "UpdateUserInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkUpdate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.update, void 0, r));
          return await H(
            this,
            "bulkUpdateUsers",
            Z,
            "user",
            "users",
            !0,
            { inputs: { value: a, ...this.bulkUpdate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkUpdateUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { inputs: { required: !0, type: "[BulkUpdateUsersInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.delete = Object.assign(gA, {
        type: "action",
        operationName: "deleteUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: null,
        variables: { id: { required: !0, type: "GadgetID" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !1,
      })),
      (this.bulkDelete = Object.assign(
        async (i, n) =>
          await H(this, "bulkDeleteUsers", null, "user", "users", !0, { ids: { value: i, ...this.bulkDelete.variables.ids } }, n, null, !1),
        {
          type: "action",
          operationName: "bulkDeleteUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: null,
          variables: { ids: { required: !0, type: "[GadgetID!]" } },
          hasReturnType: !1,
          acceptsModelInput: !1,
        }
      )),
      (this.sendVerifyEmail = Object.assign(hA, {
        type: "action",
        operationName: "sendVerifyEmailUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: { email: { required: !0, type: "String" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !0,
        acceptsModelInput: !1,
      })),
      (this.bulkSendVerifyEmail = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.sendVerifyEmail, void 0, r));
          return await H(
            this,
            "bulkSendVerifyEmailUsers",
            Z,
            "user",
            "users",
            !0,
            { inputs: { value: a, ...this.bulkSendVerifyEmail.variables.inputs } },
            n,
            null,
            !0
          );
        },
        {
          type: "action",
          operationName: "bulkSendVerifyEmailUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { inputs: { required: !0, type: "[BulkSendVerifyEmailUsersInput!]" } },
          hasReturnType: !0,
          acceptsModelInput: !1,
        }
      )),
      (this.verifyEmail = Object.assign(bA, {
        type: "action",
        operationName: "verifyEmailUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: { code: { required: !0, type: "String" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !0,
        acceptsModelInput: !1,
      })),
      (this.bulkVerifyEmail = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.verifyEmail, void 0, r));
          return await H(
            this,
            "bulkVerifyEmailUsers",
            Z,
            "user",
            "users",
            !0,
            { inputs: { value: a, ...this.bulkVerifyEmail.variables.inputs } },
            n,
            null,
            !0
          );
        },
        {
          type: "action",
          operationName: "bulkVerifyEmailUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { inputs: { required: !0, type: "[BulkVerifyEmailUsersInput!]" } },
          hasReturnType: !0,
          acceptsModelInput: !1,
        }
      )),
      (this.sendResetPassword = Object.assign(vA, {
        type: "action",
        operationName: "sendResetPasswordUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: { email: { required: !0, type: "String" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !0,
        acceptsModelInput: !1,
      })),
      (this.bulkSendResetPassword = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.sendResetPassword, void 0, r));
          return await H(
            this,
            "bulkSendResetPasswordUsers",
            Z,
            "user",
            "users",
            !0,
            { inputs: { value: a, ...this.bulkSendResetPassword.variables.inputs } },
            n,
            null,
            !0
          );
        },
        {
          type: "action",
          operationName: "bulkSendResetPasswordUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { inputs: { required: !0, type: "[BulkSendResetPasswordUsersInput!]" } },
          hasReturnType: !0,
          acceptsModelInput: !1,
        }
      )),
      (this.resetPassword = Object.assign(IA, {
        type: "action",
        operationName: "resetPasswordUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: { password: { required: !0, type: "String" }, code: { required: !0, type: "String" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !0,
        acceptsModelInput: !1,
      })),
      (this.bulkResetPassword = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.resetPassword, void 0, r));
          return await H(
            this,
            "bulkResetPasswordUsers",
            Z,
            "user",
            "users",
            !0,
            { inputs: { value: a, ...this.bulkResetPassword.variables.inputs } },
            n,
            null,
            !0
          );
        },
        {
          type: "action",
          operationName: "bulkResetPasswordUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { inputs: { required: !0, type: "[BulkResetPasswordUsersInput!]" } },
          hasReturnType: !0,
          acceptsModelInput: !1,
        }
      )),
      (this.changePassword = Object.assign(SA, {
        type: "action",
        operationName: "changePasswordUser",
        namespace: null,
        modelApiIdentifier: W,
        modelSelectionField: W,
        isBulk: !1,
        defaultSelection: Z,
        variables: {
          id: { required: !0, type: "GadgetID" },
          currentPassword: { required: !0, type: "String" },
          newPassword: { required: !0, type: "String" },
        },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !1,
      })),
      (this.bulkChangePassword = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.changePassword, void 0, r));
          return await H(
            this,
            "bulkChangePasswordUsers",
            Z,
            "user",
            "users",
            !0,
            { inputs: { value: a, ...this.bulkChangePassword.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkChangePasswordUsers",
          namespace: null,
          modelApiIdentifier: W,
          modelSelectionField: "users",
          isBulk: !0,
          defaultSelection: Z,
          variables: { inputs: { required: !0, type: "[BulkChangePasswordUsersInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !1,
        }
      ));
  }
}
const vt = { __typename: !0, createdAt: !0, fullName: !0, id: !0, updatedAt: !0 },
  Oe = "student";
async function NA(e, t) {
  const i = Ne(this.create, void 0, e);
  return await H(
    this,
    "createStudent",
    vt,
    Oe,
    Oe,
    !1,
    { student: { value: i.student, required: !1, type: "CreateStudentInput" } },
    t,
    null,
    !1
  );
}
async function AA(e, t, i) {
  const n = Ne(this.update, e, t);
  return await H(
    this,
    "updateStudent",
    vt,
    Oe,
    Oe,
    !1,
    { id: { value: e, required: !0, type: "GadgetID" }, student: { value: n.student, required: !1, type: "UpdateStudentInput" } },
    i,
    null,
    !1
  );
}
async function FA(e, t) {
  return await H(this, "deleteStudent", null, Oe, Oe, !1, { id: { value: e, required: !0, type: "GadgetID" } }, t, null, !1);
}
class wA {
  constructor(t) {
    (this.connection = t),
      (this.findOne = Object.assign(async (i, n) => await ye(this, "student", i, vt, Oe, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "student",
        modelApiIdentifier: Oe,
        defaultSelection: vt,
      })),
      (this.maybeFindOne = Object.assign(
        async (i, n) => {
          const a = await ye(this, "student", i, vt, Oe, n, !1);
          return a.isEmpty() ? null : a;
        },
        { type: "maybeFindOne", findByVariableName: "id", operationName: "student", modelApiIdentifier: "student", defaultSelection: vt }
      )),
      (this.findMany = Object.assign(async (i) => await se(this, "students", vt, "student", i), {
        type: "findMany",
        operationName: "students",
        modelApiIdentifier: Oe,
        defaultSelection: vt,
      })),
      (this.findFirst = Object.assign(
        async (i) => (await se(this, "students", vt, Oe, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !0))[0],
        { type: "findFirst", operationName: "students", modelApiIdentifier: Oe, defaultSelection: vt }
      )),
      (this.maybeFindFirst = Object.assign(
        async (i) => {
          const n = await se(this, "students", vt, Oe, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !1);
          return (n == null ? void 0 : n[0]) ?? null;
        },
        { type: "maybeFindFirst", operationName: "students", modelApiIdentifier: Oe, defaultSelection: vt }
      )),
      (this.findById = Object.assign(async (i, n) => await Ni(this, "students", "id", i, vt, Oe, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "students",
        modelApiIdentifier: Oe,
        defaultSelection: vt,
      })),
      (this.create = Object.assign(NA, {
        type: "action",
        operationName: "createStudent",
        namespace: null,
        modelApiIdentifier: Oe,
        modelSelectionField: Oe,
        isBulk: !1,
        defaultSelection: vt,
        variables: { student: { required: !1, type: "CreateStudentInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkCreate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.create, void 0, r));
          return await H(
            this,
            "bulkCreateStudents",
            vt,
            "student",
            "students",
            !0,
            { inputs: { value: a, ...this.bulkCreate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkCreateStudents",
          namespace: null,
          modelApiIdentifier: Oe,
          modelSelectionField: "students",
          isBulk: !0,
          defaultSelection: vt,
          variables: { inputs: { required: !0, type: "[BulkCreateStudentsInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.update = Object.assign(AA, {
        type: "action",
        operationName: "updateStudent",
        namespace: null,
        modelApiIdentifier: Oe,
        modelSelectionField: Oe,
        isBulk: !1,
        defaultSelection: vt,
        variables: { id: { required: !0, type: "GadgetID" }, student: { required: !1, type: "UpdateStudentInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkUpdate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.update, void 0, r));
          return await H(
            this,
            "bulkUpdateStudents",
            vt,
            "student",
            "students",
            !0,
            { inputs: { value: a, ...this.bulkUpdate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkUpdateStudents",
          namespace: null,
          modelApiIdentifier: Oe,
          modelSelectionField: "students",
          isBulk: !0,
          defaultSelection: vt,
          variables: { inputs: { required: !0, type: "[BulkUpdateStudentsInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.delete = Object.assign(FA, {
        type: "action",
        operationName: "deleteStudent",
        namespace: null,
        modelApiIdentifier: Oe,
        modelSelectionField: Oe,
        isBulk: !1,
        defaultSelection: null,
        variables: { id: { required: !0, type: "GadgetID" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !1,
      })),
      (this.bulkDelete = Object.assign(
        async (i, n) =>
          await H(
            this,
            "bulkDeleteStudents",
            null,
            "student",
            "students",
            !0,
            { ids: { value: i, ...this.bulkDelete.variables.ids } },
            n,
            null,
            !1
          ),
        {
          type: "action",
          operationName: "bulkDeleteStudents",
          namespace: null,
          modelApiIdentifier: Oe,
          modelSelectionField: "students",
          isBulk: !0,
          defaultSelection: null,
          variables: { ids: { required: !0, type: "[GadgetID!]" } },
          hasReturnType: !1,
          acceptsModelInput: !1,
        }
      ));
  }
}
const Pn = { __typename: !0, createdAt: !0, id: !0, roles: { key: !0, name: !0 }, shopifySID: !0, updatedAt: !0 },
  Za = "session";
let xA = class {
  constructor(t) {
    (this.connection = t),
      (this.findOne = Object.assign(async (i, n) => await ye(this, "session", i, Pn, Za, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "session",
        modelApiIdentifier: Za,
        defaultSelection: Pn,
      })),
      (this.maybeFindOne = Object.assign(
        async (i, n) => {
          const a = await ye(this, "session", i, Pn, Za, n, !1);
          return a.isEmpty() ? null : a;
        },
        { type: "maybeFindOne", findByVariableName: "id", operationName: "session", modelApiIdentifier: "session", defaultSelection: Pn }
      )),
      (this.findMany = Object.assign(async (i) => await se(this, "sessions", Pn, "session", i), {
        type: "findMany",
        operationName: "sessions",
        modelApiIdentifier: Za,
        defaultSelection: Pn,
      })),
      (this.findFirst = Object.assign(
        async (i) => (await se(this, "sessions", Pn, Za, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !0))[0],
        { type: "findFirst", operationName: "sessions", modelApiIdentifier: Za, defaultSelection: Pn }
      )),
      (this.maybeFindFirst = Object.assign(
        async (i) => {
          const n = await se(this, "sessions", Pn, Za, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !1);
          return (n == null ? void 0 : n[0]) ?? null;
        },
        { type: "maybeFindFirst", operationName: "sessions", modelApiIdentifier: Za, defaultSelection: Pn }
      )),
      (this.findById = Object.assign(async (i, n) => await Ni(this, "sessions", "id", i, Pn, Za, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "sessions",
        modelApiIdentifier: Za,
        defaultSelection: Pn,
      }));
  }
};
const It = { __typename: !0, createdAt: !0, id: !0, title: !0, updatedAt: !0 },
  Re = "course";
async function TA(e, t) {
  const i = Ne(this.create, void 0, e);
  return await H(
    this,
    "createCourse",
    It,
    Re,
    Re,
    !1,
    { course: { value: i.course, required: !1, type: "CreateCourseInput" } },
    t,
    null,
    !1
  );
}
async function MA(e, t, i) {
  const n = Ne(this.update, e, t);
  return await H(
    this,
    "updateCourse",
    It,
    Re,
    Re,
    !1,
    { id: { value: e, required: !0, type: "GadgetID" }, course: { value: n.course, required: !1, type: "UpdateCourseInput" } },
    i,
    null,
    !1
  );
}
async function OA(e, t) {
  return await H(this, "deleteCourse", null, Re, Re, !1, { id: { value: e, required: !0, type: "GadgetID" } }, t, null, !1);
}
class RA {
  constructor(t) {
    (this.connection = t),
      (this.findOne = Object.assign(async (i, n) => await ye(this, "course", i, It, Re, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "course",
        modelApiIdentifier: Re,
        defaultSelection: It,
      })),
      (this.maybeFindOne = Object.assign(
        async (i, n) => {
          const a = await ye(this, "course", i, It, Re, n, !1);
          return a.isEmpty() ? null : a;
        },
        { type: "maybeFindOne", findByVariableName: "id", operationName: "course", modelApiIdentifier: "course", defaultSelection: It }
      )),
      (this.findMany = Object.assign(async (i) => await se(this, "courses", It, "course", i), {
        type: "findMany",
        operationName: "courses",
        modelApiIdentifier: Re,
        defaultSelection: It,
      })),
      (this.findFirst = Object.assign(
        async (i) => (await se(this, "courses", It, Re, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !0))[0],
        { type: "findFirst", operationName: "courses", modelApiIdentifier: Re, defaultSelection: It }
      )),
      (this.maybeFindFirst = Object.assign(
        async (i) => {
          const n = await se(this, "courses", It, Re, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !1);
          return (n == null ? void 0 : n[0]) ?? null;
        },
        { type: "maybeFindFirst", operationName: "courses", modelApiIdentifier: Re, defaultSelection: It }
      )),
      (this.findById = Object.assign(async (i, n) => await Ni(this, "courses", "id", i, It, Re, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "courses",
        modelApiIdentifier: Re,
        defaultSelection: It,
      })),
      (this.create = Object.assign(TA, {
        type: "action",
        operationName: "createCourse",
        namespace: null,
        modelApiIdentifier: Re,
        modelSelectionField: Re,
        isBulk: !1,
        defaultSelection: It,
        variables: { course: { required: !1, type: "CreateCourseInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkCreate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.create, void 0, r));
          return await H(
            this,
            "bulkCreateCourses",
            It,
            "course",
            "courses",
            !0,
            { inputs: { value: a, ...this.bulkCreate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkCreateCourses",
          namespace: null,
          modelApiIdentifier: Re,
          modelSelectionField: "courses",
          isBulk: !0,
          defaultSelection: It,
          variables: { inputs: { required: !0, type: "[BulkCreateCoursesInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.update = Object.assign(MA, {
        type: "action",
        operationName: "updateCourse",
        namespace: null,
        modelApiIdentifier: Re,
        modelSelectionField: Re,
        isBulk: !1,
        defaultSelection: It,
        variables: { id: { required: !0, type: "GadgetID" }, course: { required: !1, type: "UpdateCourseInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkUpdate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.update, void 0, r));
          return await H(
            this,
            "bulkUpdateCourses",
            It,
            "course",
            "courses",
            !0,
            { inputs: { value: a, ...this.bulkUpdate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkUpdateCourses",
          namespace: null,
          modelApiIdentifier: Re,
          modelSelectionField: "courses",
          isBulk: !0,
          defaultSelection: It,
          variables: { inputs: { required: !0, type: "[BulkUpdateCoursesInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.delete = Object.assign(OA, {
        type: "action",
        operationName: "deleteCourse",
        namespace: null,
        modelApiIdentifier: Re,
        modelSelectionField: Re,
        isBulk: !1,
        defaultSelection: null,
        variables: { id: { required: !0, type: "GadgetID" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !1,
      })),
      (this.bulkDelete = Object.assign(
        async (i, n) =>
          await H(
            this,
            "bulkDeleteCourses",
            null,
            "course",
            "courses",
            !0,
            { ids: { value: i, ...this.bulkDelete.variables.ids } },
            n,
            null,
            !1
          ),
        {
          type: "action",
          operationName: "bulkDeleteCourses",
          namespace: null,
          modelApiIdentifier: Re,
          modelSelectionField: "courses",
          isBulk: !0,
          defaultSelection: null,
          variables: { ids: { required: !0, type: "[GadgetID!]" } },
          hasReturnType: !1,
          acceptsModelInput: !1,
        }
      ));
  }
}
const St = { __typename: !0, createdAt: !0, description: !0, id: !0, updatedAt: !0 },
  Be = "registration";
async function BA(e, t) {
  const i = Ne(this.create, void 0, e);
  return await H(
    this,
    "createRegistration",
    St,
    Be,
    Be,
    !1,
    { registration: { value: i.registration, required: !1, type: "CreateRegistrationInput" } },
    t,
    null,
    !1
  );
}
async function CA(e, t, i) {
  const n = Ne(this.update, e, t);
  return await H(
    this,
    "updateRegistration",
    St,
    Be,
    Be,
    !1,
    {
      id: { value: e, required: !0, type: "GadgetID" },
      registration: { value: n.registration, required: !1, type: "UpdateRegistrationInput" },
    },
    i,
    null,
    !1
  );
}
async function PA(e, t) {
  return await H(this, "deleteRegistration", null, Be, Be, !1, { id: { value: e, required: !0, type: "GadgetID" } }, t, null, !1);
}
class EA {
  constructor(t) {
    (this.connection = t),
      (this.findOne = Object.assign(async (i, n) => await ye(this, "registration", i, St, Be, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "registration",
        modelApiIdentifier: Be,
        defaultSelection: St,
      })),
      (this.maybeFindOne = Object.assign(
        async (i, n) => {
          const a = await ye(this, "registration", i, St, Be, n, !1);
          return a.isEmpty() ? null : a;
        },
        {
          type: "maybeFindOne",
          findByVariableName: "id",
          operationName: "registration",
          modelApiIdentifier: "registration",
          defaultSelection: St,
        }
      )),
      (this.findMany = Object.assign(async (i) => await se(this, "registrations", St, "registration", i), {
        type: "findMany",
        operationName: "registrations",
        modelApiIdentifier: Be,
        defaultSelection: St,
      })),
      (this.findFirst = Object.assign(
        async (i) => (await se(this, "registrations", St, Be, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !0))[0],
        { type: "findFirst", operationName: "registrations", modelApiIdentifier: Be, defaultSelection: St }
      )),
      (this.maybeFindFirst = Object.assign(
        async (i) => {
          const n = await se(this, "registrations", St, Be, { ...i, first: 1, last: void 0, before: void 0, after: void 0 }, !1);
          return (n == null ? void 0 : n[0]) ?? null;
        },
        { type: "maybeFindFirst", operationName: "registrations", modelApiIdentifier: Be, defaultSelection: St }
      )),
      (this.findById = Object.assign(async (i, n) => await Ni(this, "registrations", "id", i, St, Be, n), {
        type: "findOne",
        findByVariableName: "id",
        operationName: "registrations",
        modelApiIdentifier: Be,
        defaultSelection: St,
      })),
      (this.create = Object.assign(BA, {
        type: "action",
        operationName: "createRegistration",
        namespace: null,
        modelApiIdentifier: Be,
        modelSelectionField: Be,
        isBulk: !1,
        defaultSelection: St,
        variables: { registration: { required: !1, type: "CreateRegistrationInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkCreate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.create, void 0, r));
          return await H(
            this,
            "bulkCreateRegistrations",
            St,
            "registration",
            "registrations",
            !0,
            { inputs: { value: a, ...this.bulkCreate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkCreateRegistrations",
          namespace: null,
          modelApiIdentifier: Be,
          modelSelectionField: "registrations",
          isBulk: !0,
          defaultSelection: St,
          variables: { inputs: { required: !0, type: "[BulkCreateRegistrationsInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.update = Object.assign(CA, {
        type: "action",
        operationName: "updateRegistration",
        namespace: null,
        modelApiIdentifier: Be,
        modelSelectionField: Be,
        isBulk: !1,
        defaultSelection: St,
        variables: { id: { required: !0, type: "GadgetID" }, registration: { required: !1, type: "UpdateRegistrationInput" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !0,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !0,
      })),
      (this.bulkUpdate = Object.assign(
        async (i, n) => {
          const a = i.map((r) => Ne(this.update, void 0, r));
          return await H(
            this,
            "bulkUpdateRegistrations",
            St,
            "registration",
            "registrations",
            !0,
            { inputs: { value: a, ...this.bulkUpdate.variables.inputs } },
            n,
            null,
            !1
          );
        },
        {
          type: "action",
          operationName: "bulkUpdateRegistrations",
          namespace: null,
          modelApiIdentifier: Be,
          modelSelectionField: "registrations",
          isBulk: !0,
          defaultSelection: St,
          variables: { inputs: { required: !0, type: "[BulkUpdateRegistrationsInput!]" } },
          hasReturnType: !1,
          acceptsModelInput: !0,
        }
      )),
      (this.delete = Object.assign(PA, {
        type: "action",
        operationName: "deleteRegistration",
        namespace: null,
        modelApiIdentifier: Be,
        modelSelectionField: Be,
        isBulk: !1,
        defaultSelection: null,
        variables: { id: { required: !0, type: "GadgetID" } },
        hasAmbiguousIdentifier: !1,
        hasCreateOrUpdateEffect: !1,
        paramOnlyVariables: [],
        hasReturnType: !1,
        acceptsModelInput: !1,
      })),
      (this.bulkDelete = Object.assign(
        async (i, n) =>
          await H(
            this,
            "bulkDeleteRegistrations",
            null,
            "registration",
            "registrations",
            !0,
            { ids: { value: i, ...this.bulkDelete.variables.ids } },
            n,
            null,
            !1
          ),
        {
          type: "action",
          operationName: "bulkDeleteRegistrations",
          namespace: null,
          modelApiIdentifier: Be,
          modelSelectionField: "registrations",
          isBulk: !0,
          defaultSelection: null,
          variables: { ids: { required: !0, type: "[GadgetID!]" } },
          hasReturnType: !1,
          acceptsModelInput: !1,
        }
      ));
  }
}
const Xf = { __typename: !0, createdAt: !0, id: !0, roles: { key: !0, name: !0 }, shopifySID: !0, updatedAt: !0 };
let DA = class {
  constructor(t) {
    (this.connection = t),
      (this.get = Object.assign(async (i) => await ye(this, "currentSession", void 0, Xf, "session", i), {
        type: "get",
        operationName: "currentSession",
        modelApiIdentifier: "session",
        defaultSelection: Xf,
      }));
  }
};
var Xg;
const Kf = "production",
  UA = "development",
  qA = Symbol.for("gadget/modelRelationships"),
  VA = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
let _A = class {
  constructor(t) {
    var a;
    (this.apiRoots = {
      development: "https://zxcv-manythrough-example--development.gadget.app/",
      production: "https://zxcv-manythrough-example.gadget.app/",
    }),
      (this.applicationId = "114722"),
      (this[Xg] = {
        user: {},
        student: {
          courses: { type: "HasManyThrough", model: "course", through: "registration" },
          registrations: { model: "registration", type: "HasMany" },
        },
        session: { user: { type: "BelongsTo", model: "user" } },
        course: {
          students: { type: "HasManyThrough", model: "student", through: "registration" },
          registrations: { model: "registration", type: "HasMany" },
        },
        registration: { student: { type: "BelongsTo", model: "student" }, course: { type: "BelongsTo", model: "course" } },
      }),
      (this.transaction = async (r) => await this.connection.transaction(r)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken),
      (this.environment = ((t == null ? void 0 : t.environment) ?? VA() ?? UA).toLocaleLowerCase());
    let i;
    this.apiRoots[this.environment]
      ? (i = this.apiRoots[this.environment])
      : (i = `https://zxcv-manythrough-example${this.environment == Kf ? "" : `--${this.environment}`}.gadget.app`);
    const n = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== Kf) {
      const r =
        ({ forward: o }) =>
        (s) => {
          const l = o(s);
          return Vn(
            l,
            Bi((d) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const u = new CustomEvent("gadget:devharness:graphqlresult", { detail: d });
                  window.dispatchEvent(u);
                }
              } catch (u) {
                console.warn("[gadget] error dispatching gadget dev harness event", u);
              }
              return d;
            })
          );
        };
      n.beforeAll = [r, ...(n.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", i).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: n,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((a = t == null ? void 0 : t.authenticationMode) != null && a.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.user = new kA(this.connection)),
      (this.student = new wA(this.connection)),
      (this.session = new xA(this.connection)),
      (this.course = new RA(this.connection)),
      (this.registration = new EA(this.connection)),
      (this.currentSession = new DA(this.connection)),
      (this.internal = {
        user: new B("user", this.connection, { pluralApiIdentifier: "users", hasAmbiguousIdentifier: !1 }),
        student: new B("student", this.connection, { pluralApiIdentifier: "students", hasAmbiguousIdentifier: !1 }),
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifier: !1 }),
        course: new B("course", this.connection, { pluralApiIdentifier: "courses", hasAmbiguousIdentifier: !1 }),
        registration: new B("registration", this.connection, { pluralApiIdentifier: "registrations", hasAmbiguousIdentifier: !1 }),
      });
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
};
Xg = qA;
const hl = (e, t, i, n) => {
  const a = class {
    constructor(r) {
      this.connection = r;
    }
  };
  for (const r of n)
    switch (r.type) {
      case "maybeFindOne":
      case "findOne": {
        "functionName" in r
          ? (a.prototype[r.functionName] = Object.assign(async function (o, s) {
              return await Ni(this, r.operationName, r.findByField, o, i, e, s);
            }, r))
          : (a.prototype[r.type] = Object.assign(async function (o, s) {
              const l = await ye(this, e, o, i, e, s, r.type != "maybeFindOne");
              return l.isEmpty() ? null : l;
            }, r));
        break;
      }
      case "findMany": {
        a.prototype.findMany = Object.assign(async function (o) {
          return await se(this, t, i, e, o);
        }, r);
        break;
      }
      case "maybeFindFirst":
      case "findFirst": {
        a.prototype[r.type] = Object.assign(async function (o) {
          const s = await se(this, t, i, e, { ...o, first: 1, last: void 0, before: void 0, after: void 0 }, r.type != "maybeFindFirst");
          return (s == null ? void 0 : s[0]) ?? null;
        }, r);
        break;
      }
      case "get": {
        a.prototype.get = Object.assign(async function (o) {
          return await ye(this, r.operationName, void 0, i, e, o);
        }, r);
        break;
      }
      case "action": {
        if (r.isBulk) {
          const o = !!r.variables.ids;
          a.prototype[r.functionName] = Object.assign(async function (s, l) {
            let d;
            return (
              o
                ? (d = { ids: { ...r.variables.ids, value: s } })
                : (d = { inputs: { ...r.variables.inputs, value: s.map((u) => Kg(this[r.singleActionFunctionName], void 0, u)) } }),
              await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !0, d, l, r.namespace, r.hasReturnType)
            );
          }, r);
        } else {
          const o = !!r.variables.id,
            s = Object.keys(r.variables).filter((l) => l != "id").length > 0;
          a.prototype[r.functionName] = Object.assign(async function (...l) {
            const [d, u] = $A(r, o, s, l);
            return await H(this, r.operationName, r.isDeleter ? null : i, e, r.modelSelectionField, !1, d, u, r.namespace, r.hasReturnType);
          }, r);
        }
        break;
      }
    }
  return a;
};
function Kg(e, t, i = {}) {
  var r;
  if (
    e.hasAmbiguousIdentifier &&
    Object.keys(i).some((o) => {
      var s;
      return !((s = e.paramOnlyVariables) != null && s.includes(o)) && o !== e.modelApiIdentifier;
    })
  )
    throw Error(`Invalid arguments found in variables. Did you mean to use ({ ${e.modelApiIdentifier}: { ... } })?`);
  let n;
  const a = Object.entries(e.variables).find(([o, s]) => o === "id" && s.type === "GadgetID");
  if (e.acceptsModelInput || e.hasCreateOrUpdateEffect)
    if (
      (e.modelApiIdentifier in i && typeof i[e.modelApiIdentifier] == "object" && i[e.modelApiIdentifier] !== null) ||
      !e.variables[e.modelApiIdentifier]
    )
      n = i;
    else {
      n = { [e.modelApiIdentifier]: {} };
      for (const [o, s] of Object.entries(i))
        (r = e.paramOnlyVariables) != null && r.includes(o) ? (n[o] = s) : a && o === a[0] ? (n.id = s) : (n[e.modelApiIdentifier][o] = s);
    }
  else n = i;
  return n.id ?? (n.id = t), n;
}
function $A(e, t, i, n) {
  let a, r;
  t && (a = n.shift()), i && (r = n.shift());
  const o = n.shift();
  let s = r;
  (a || r) && (s = Kg(e, a, r));
  const l = {};
  for (const [d, u] of Object.entries(e.variables)) l[d] = { value: d == "id" ? a : s == null ? void 0 : s[d], ...u };
  return [l, o];
}
const aa = { __typename: !0, id: !0, createdAt: !0, text: !0, updatedAt: !0 },
  zt = "quiz",
  Zr = "quizzes",
  GA = hl(zt, Zr, aa, [
    { type: "findOne", operationName: zt, modelApiIdentifier: zt, findByVariableName: "id", defaultSelection: aa },
    { type: "maybeFindOne", operationName: zt, modelApiIdentifier: zt, findByVariableName: "id", defaultSelection: aa },
    { type: "findMany", operationName: Zr, modelApiIdentifier: zt, defaultSelection: aa },
    { type: "findFirst", operationName: Zr, modelApiIdentifier: zt, defaultSelection: aa },
    { type: "maybeFindFirst", operationName: Zr, modelApiIdentifier: zt, defaultSelection: aa },
    {
      type: "findOne",
      operationName: Zr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: zt,
      defaultSelection: aa,
    },
    {
      type: "action",
      operationName: "createQuiz",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: zt,
      modelSelectionField: zt,
      isBulk: !1,
      isDeleter: !1,
      variables: { quiz: { required: !1, type: "CreateQuizInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: aa,
    },
    {
      type: "action",
      operationName: "bulkCreateQuizzes",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: zt,
      modelSelectionField: Zr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateQuizzesInput!]" } },
      defaultSelection: aa,
    },
    {
      type: "action",
      operationName: "updateQuiz",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: zt,
      modelSelectionField: zt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, quiz: { required: !1, type: "UpdateQuizInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: aa,
    },
    {
      type: "action",
      operationName: "bulkUpdateQuizzes",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: zt,
      modelSelectionField: Zr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateQuizzesInput!]" } },
      defaultSelection: aa,
    },
    {
      type: "action",
      operationName: "deleteQuiz",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: zt,
      modelSelectionField: zt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteQuizzes",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: zt,
      modelSelectionField: Zr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  So = { __typename: !0, id: !0, createdAt: !0, roles: { key: !0, name: !0 }, updatedAt: !0 },
  hr = "session",
  qs = "sessions",
  jA = hl(hr, qs, So, [
    { type: "findOne", operationName: hr, modelApiIdentifier: hr, findByVariableName: "id", defaultSelection: So },
    { type: "maybeFindOne", operationName: hr, modelApiIdentifier: hr, findByVariableName: "id", defaultSelection: So },
    { type: "findMany", operationName: qs, modelApiIdentifier: hr, defaultSelection: So },
    { type: "findFirst", operationName: qs, modelApiIdentifier: hr, defaultSelection: So },
    { type: "maybeFindFirst", operationName: qs, modelApiIdentifier: hr, defaultSelection: So },
    {
      type: "findOne",
      operationName: qs,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: hr,
      defaultSelection: So,
    },
  ]),
  ra = { __typename: !0, id: !0, createdAt: !0, text: !0, updatedAt: !0 },
  Wt = "question",
  Jr = "questions",
  zA = hl(Wt, Jr, ra, [
    { type: "findOne", operationName: Wt, modelApiIdentifier: Wt, findByVariableName: "id", defaultSelection: ra },
    { type: "maybeFindOne", operationName: Wt, modelApiIdentifier: Wt, findByVariableName: "id", defaultSelection: ra },
    { type: "findMany", operationName: Jr, modelApiIdentifier: Wt, defaultSelection: ra },
    { type: "findFirst", operationName: Jr, modelApiIdentifier: Wt, defaultSelection: ra },
    { type: "maybeFindFirst", operationName: Jr, modelApiIdentifier: Wt, defaultSelection: ra },
    {
      type: "findOne",
      operationName: Jr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Wt,
      defaultSelection: ra,
    },
    {
      type: "action",
      operationName: "createQuestion",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Wt,
      modelSelectionField: Wt,
      isBulk: !1,
      isDeleter: !1,
      variables: { question: { required: !1, type: "CreateQuestionInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ra,
    },
    {
      type: "action",
      operationName: "bulkCreateQuestions",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Wt,
      modelSelectionField: Jr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateQuestionsInput!]" } },
      defaultSelection: ra,
    },
    {
      type: "action",
      operationName: "updateQuestion",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Wt,
      modelSelectionField: Wt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, question: { required: !1, type: "UpdateQuestionInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: ra,
    },
    {
      type: "action",
      operationName: "bulkUpdateQuestions",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Wt,
      modelSelectionField: Jr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateQuestionsInput!]" } },
      defaultSelection: ra,
    },
    {
      type: "action",
      operationName: "deleteQuestion",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Wt,
      modelSelectionField: Wt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteQuestions",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Wt,
      modelSelectionField: Jr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  oa = { __typename: !0, id: !0, createdAt: !0, text: !0, updatedAt: !0 },
  Lt = "answer",
  Yr = "answers",
  WA = hl(Lt, Yr, oa, [
    { type: "findOne", operationName: Lt, modelApiIdentifier: Lt, findByVariableName: "id", defaultSelection: oa },
    { type: "maybeFindOne", operationName: Lt, modelApiIdentifier: Lt, findByVariableName: "id", defaultSelection: oa },
    { type: "findMany", operationName: Yr, modelApiIdentifier: Lt, defaultSelection: oa },
    { type: "findFirst", operationName: Yr, modelApiIdentifier: Lt, defaultSelection: oa },
    { type: "maybeFindFirst", operationName: Yr, modelApiIdentifier: Lt, defaultSelection: oa },
    {
      type: "findOne",
      operationName: Yr,
      functionName: "findById",
      findByField: "id",
      findByVariableName: "id",
      modelApiIdentifier: Lt,
      defaultSelection: oa,
    },
    {
      type: "action",
      operationName: "createAnswer",
      functionName: "create",
      namespace: null,
      modelApiIdentifier: Lt,
      modelSelectionField: Lt,
      isBulk: !1,
      isDeleter: !1,
      variables: { answer: { required: !1, type: "CreateAnswerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: oa,
    },
    {
      type: "action",
      operationName: "bulkCreateAnswers",
      functionName: "bulkCreate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "create",
      modelApiIdentifier: Lt,
      modelSelectionField: Yr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkCreateAnswersInput!]" } },
      defaultSelection: oa,
    },
    {
      type: "action",
      operationName: "updateAnswer",
      functionName: "update",
      namespace: null,
      modelApiIdentifier: Lt,
      modelSelectionField: Lt,
      isBulk: !1,
      isDeleter: !1,
      variables: { id: { required: !0, type: "GadgetID" }, answer: { required: !1, type: "UpdateAnswerInput" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !0,
      hasCreateOrUpdateEffect: !0,
      defaultSelection: oa,
    },
    {
      type: "action",
      operationName: "bulkUpdateAnswers",
      functionName: "bulkUpdate",
      isBulk: !0,
      isDeleter: !1,
      hasReturnType: !1,
      acceptsModelInput: !0,
      singleActionFunctionName: "update",
      modelApiIdentifier: Lt,
      modelSelectionField: Yr,
      namespace: null,
      variables: { inputs: { required: !0, type: "[BulkUpdateAnswersInput!]" } },
      defaultSelection: oa,
    },
    {
      type: "action",
      operationName: "deleteAnswer",
      functionName: "delete",
      namespace: null,
      modelApiIdentifier: Lt,
      modelSelectionField: Lt,
      isBulk: !1,
      isDeleter: !0,
      variables: { id: { required: !0, type: "GadgetID" } },
      hasAmbiguousIdentifier: !1,
      paramOnlyVariables: [],
      hasReturnType: !1,
      acceptsModelInput: !1,
      hasCreateOrUpdateEffect: !1,
      defaultSelection: null,
    },
    {
      type: "action",
      operationName: "bulkDeleteAnswers",
      functionName: "bulkDelete",
      isBulk: !0,
      isDeleter: !0,
      hasReturnType: !1,
      acceptsModelInput: !1,
      singleActionFunctionName: "delete",
      modelApiIdentifier: Lt,
      modelSelectionField: Yr,
      namespace: null,
      variables: { ids: { required: !0, type: "[GadgetID!]" } },
      defaultSelection: null,
    },
  ]),
  em = { __typename: !0, id: !0, createdAt: !0, roles: { key: !0, name: !0 }, updatedAt: !0 },
  tm = "session",
  LA = "sessions",
  HA = hl(tm, LA, em, [{ type: "get", operationName: "currentSession", defaultSelection: em, modelApiIdentifier: tm }]);
var eh;
const im = "production",
  QA = "development",
  ZA = Symbol.for("gadget/modelRelationships"),
  JA = () => {
    try {
      return {}.GADGET_ENV;
    } catch {
      return;
    }
  };
class YA {
  constructor(t) {
    var a;
    (this.apiRoots = {
      development: "https://zxcv-simple-relationship--development.gadget.app/",
      production: "https://zxcv-simple-relationship.gadget.app/",
    }),
      (this.applicationId = "79412"),
      (this[eh] = {
        quiz: { question: { type: "HasOne", model: "question" } },
        session: {},
        question: { quiz: { type: "BelongsTo", model: "quiz" }, answer: { type: "HasOne", model: "answer" } },
        answer: { question: { type: "BelongsTo", model: "question" } },
      }),
      (this.transaction = async (r) => await this.connection.transaction(r)),
      (this.getDirectUploadToken = async () =>
        (
          await this.query(
            "query GetDirectUploadToken($nonce: String) { gadgetMeta { directUploadToken(nonce: $nonce) { url, token } } }",
            { nonce: Math.random().toString(36).slice(2, 7) },
            { requestPolicy: "network-only" }
          )
        ).gadgetMeta.directUploadToken),
      (this.environment = ((t == null ? void 0 : t.environment) ?? JA() ?? QA).toLocaleLowerCase());
    let i;
    this.apiRoots[this.environment]
      ? (i = this.apiRoots[this.environment])
      : (i = `https://zxcv-simple-relationship${this.environment == im ? "" : `--${this.environment}`}.gadget.app`);
    const n = { ...(t == null ? void 0 : t.exchanges) };
    if (this.environment !== im) {
      const r =
        ({ forward: o }) =>
        (s) => {
          const l = o(s);
          return Vn(
            l,
            Bi((d) => {
              try {
                if (typeof window < "u" && typeof CustomEvent == "function") {
                  const u = new CustomEvent("gadget:devharness:graphqlresult", { detail: d });
                  window.dispatchEvent(u);
                }
              } catch (u) {
                console.warn("[gadget] error dispatching gadget dev harness event", u);
              }
              return d;
            })
          );
        };
      n.beforeAll = [r, ...(n.beforeAll ?? [])];
    }
    if (
      ((this.connection = new ca({
        endpoint: new URL("api/graphql", i).toString(),
        applicationId: this.applicationId,
        authenticationMode:
          (t == null ? void 0 : t.authenticationMode) ?? (typeof window > "u" ? { anonymous: !0 } : { browserSession: !0 }),
        ...t,
        exchanges: n,
        environment: this.environment,
      })),
      typeof window < "u" &&
        this.connection.authenticationMode == ue.APIKey &&
        !((a = t == null ? void 0 : t.authenticationMode) != null && a.dangerouslyAllowBrowserApiKey))
    )
      throw new Error(
        "GGT_BROWSER_API_KEY_USAGE: Using a Gadget API key to authenticate this client object is insecure and will leak your API keys to attackers. Please use a different authentication mode."
      );
    (this.quiz = new GA(this.connection)),
      (this.session = new jA(this.connection)),
      (this.question = new zA(this.connection)),
      (this.answer = new WA(this.connection)),
      (this.currentSession = new HA(this.connection)),
      (this.internal = {
        quiz: new B("quiz", this.connection, { pluralApiIdentifier: "quizzes", hasAmbiguousIdentifier: !1 }),
        session: new B("session", this.connection, { pluralApiIdentifier: "sessions", hasAmbiguousIdentifier: !1 }),
        question: new B("question", this.connection, { pluralApiIdentifier: "questions", hasAmbiguousIdentifier: !1 }),
        answer: new B("answer", this.connection, { pluralApiIdentifier: "answers", hasAmbiguousIdentifier: !1 }),
      });
  }
  async query(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.query(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async mutate(t, i, n) {
    const { data: a, error: r } = await this.connection.currentClient.mutation(t, i, n).toPromise();
    if (r) throw r;
    return a;
  }
  async fetch(t, i = {}) {
    return await this.connection.fetch(t, i);
  }
  async enqueue(t, i, n) {
    mt(t, ".enqueue must be passed an action as the first argument but was passed undefined");
    let a, r;
    return (
      typeof n < "u"
        ? ((a = i), (r = n))
        : !t.variables || Object.keys(t.variables).length == 0
        ? ((a = {}), (r = i))
        : (typeof i == "string" ? (a = { id: i }) : (a = i), (r = {})),
      await ar(this.connection, t, a, r)
    );
  }
  handle(t, i) {
    return new Tn(this.connection, t, i);
  }
  toString() {
    return `GadgetAPIClient<${this.environment}>`;
  }
  toJSON() {
    return this.toString();
  }
}
eh = ZA;
new WN({ environment: "Development" });
new sk({ environment: "Development" });
new gk({ environment: "Development" });
new YS({ environment: "Development" });
new cA({ environment: "Development" });
new YA({ environment: "Development" });
new Hg({ environment: "Development" });
new _A({ environment: "Development" });
new WS({ environment: "Development" });
const hF = new zg({
  environment: "Development",
  authenticationMode:
    "VITE_JS_CLIENTS_TEST_API_KEY" in import.meta
      ? {
          apiKey: { BASE_URL: "./", MODE: "production", DEV: !1, PROD: !0, SSR: !1, STORYBOOK: "true" }.VITE_JS_CLIENTS_TEST_API_KEY,
          dangerouslyAllowBrowserApiKey: !0,
        }
      : void 0,
});
export {
  f5 as $,
  r5 as A,
  Pl as B,
  b5 as C,
  yn as D,
  Ka as E,
  F5 as F,
  Sd as G,
  Ja as H,
  Oo as I,
  p5 as J,
  B0 as K,
  d5 as L,
  u5 as M,
  er as N,
  Ku as O,
  uI as P,
  iv as Q,
  Sm as R,
  Hb as S,
  Nt as T,
  r0 as U,
  tc as V,
  km as W,
  y5 as X,
  Nm as Y,
  Pb as Z,
  m5 as _,
  Un as a,
  cS as a$,
  fu as a0,
  h5 as a1,
  Em as a2,
  g5 as a3,
  Wm as a4,
  jl as a5,
  Hu as a6,
  J0 as a7,
  ty as a8,
  ec as a9,
  q5 as aA,
  xS as aB,
  uf as aC,
  au as aD,
  pS as aE,
  Ky as aF,
  yl as aG,
  eF as aH,
  K5 as aI,
  tF as aJ,
  Y5 as aK,
  E5 as aL,
  Zb as aM,
  Yb as aN,
  S5 as aO,
  J5 as aP,
  yS as aQ,
  sd as aR,
  N5 as aS,
  mS as aT,
  Jb as aU,
  Km as aV,
  Cs as aW,
  pv as aX,
  wS as aY,
  V5 as aZ,
  _5 as a_,
  A0 as aa,
  kt as ab,
  E0 as ac,
  Bm as ad,
  Ic as ae,
  Nd as af,
  MI as ag,
  rl as ah,
  y1 as ai,
  mc as aj,
  vc as ak,
  Fo as al,
  fl as am,
  jd as an,
  A5 as ao,
  R5 as ap,
  Zs as aq,
  nu as ar,
  Nc as as,
  jy as at,
  OI as au,
  D as av,
  yI as aw,
  j5 as ax,
  W5 as ay,
  X as az,
  Ro as b,
  Qb as b0,
  z5 as b1,
  mt as b2,
  M5 as b3,
  iF as b4,
  P5 as b5,
  mI as b6,
  x5 as b7,
  v5 as b8,
  U5 as b9,
  s5 as bA,
  l5 as bB,
  _m as bC,
  Dm as bD,
  C5 as bE,
  O5 as bF,
  B5 as bG,
  G5 as bH,
  L5 as bI,
  H5 as bJ,
  Z5 as bK,
  Q5 as bL,
  h1 as bM,
  bc as bN,
  X5 as bO,
  D5 as bP,
  w5 as bQ,
  P0 as bR,
  I5 as ba,
  mv as bb,
  uS as bc,
  k5 as bd,
  Cb as be,
  s0 as bf,
  o0 as bg,
  c5 as bh,
  L0 as bi,
  fd as bj,
  Y0 as bk,
  oy as bl,
  ey as bm,
  n5 as bn,
  cd as bo,
  Om as bp,
  vr as bq,
  Xs as br,
  c0 as bs,
  $m as bt,
  nc as bu,
  o5 as bv,
  Vb as bw,
  xh as bx,
  Gm as by,
  i0 as bz,
  RI as c,
  ol as d,
  $5 as e,
  Cy as f,
  ua as g,
  kr as h,
  ms as i,
  $b as j,
  Po as k,
  T0 as l,
  re as m,
  sg as n,
  wh as o,
  bd as p,
  Hm as q,
  t0 as r,
  h0 as s,
  hF as t,
  T5 as u,
  y0 as v,
  Ks as w,
  a5 as x,
  Ys as y,
  rc as z,
};
